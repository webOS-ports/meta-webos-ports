From a393dc35bb283e91b780b55179f97372b9aca5d8 Mon Sep 17 00:00:00 2001
From: "piyush10.asalmol" <piyush10.asalmol@lge.com>
Date: Tue, 25 Oct 2022 13:35:13 +0530
Subject: [PATCH] Add Changes for p2p setState api

:Release Notes:
Add Changes for p2p setState api

:Detailed Notes:
Add Changes for p2p setState api

:Testing Performed:
Tested locally

:QA Notes:
NA

:Issues Addressed:
[WRO-11078] - Add Changes for p2p setState api

Change-Id: I0d2daf9ecb2aa899817813d92e355facb5e4188e
Reviewed-on: http://gpro.lge.com/c/webosose/connman-webos/+/337863
Reviewed-by: Commit Msg Checker <commit_msg@lge.com>
Reviewed-by: Ban Word Checker <ban_word@lge.com>
Reviewed-by: <muralidhar.n@lge.com>
Tested-by: <muralidhar.n@lge.com>
---
 include/technology.h |  18 ++
 src/technology.c     | 394 +++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 412 insertions(+)

diff --git a/include/technology.h b/include/technology.h
index fcd658e8..3ea7589f 100644
--- a/include/technology.h
+++ b/include/technology.h
@@ -49,6 +49,12 @@ bool connman_technology_get_wifi_tethering(const struct connman_technology *tech
 					const char **ssid, const char **psk, int *freq);
 
 bool connman_technology_is_tethering_allowed(enum connman_service_type type);
+bool connman_technology_get_p2p_listen(struct connman_technology *technology);
+void connman_technology_set_p2p_listen(struct connman_technology *technology,
+							bool enabled);
+unsigned int connman_technology_get_p2p_listen_channel(struct connman_technology *technology);
+void connman_technology_set_p2p_listen_channel(struct connman_technology *technology,
+									unsigned int listen_channel);
 
 struct connman_technology_driver {
 	const char *name;
@@ -65,6 +71,18 @@ struct connman_technology_driver {
 				const char *bridge, bool enabled);
 	int (*set_regdom) (struct connman_technology *technology,
 						const char *alpha2);
+	int (*set_p2p_identifier) (struct connman_technology *technology,
+						const char *p2p_identifier);
+	int (*set_p2p_persistent) (struct connman_technology *technology,
+						bool persistent_reconnect);
+	int (*set_p2p_listen_channel) (struct connman_technology *technology,
+						unsigned int listen_channel);
+	int (*set_p2p_go_intent) (struct connman_technology *technology,
+						unsigned int go_intent);
+	int (*set_p2p_listen) (struct connman_technology *technology,
+						bool enable);
+	int (*set_p2p_listen_params) (struct connman_technology *technology,
+						int period, int interval);
 };
 
 int connman_technology_driver_register(struct connman_technology_driver *driver);
diff --git a/src/technology.c b/src/technology.c
index 5c469111..d8c265b1 100644
--- a/src/technology.c
+++ b/src/technology.c
@@ -68,6 +68,14 @@ struct connman_technology {
 	char *tethering_passphrase;
 	int tethering_freq;
 
+	int period;
+	int interval;
+	bool enable_p2p_listen_persistent;	/* Save the tech p2p listen state by p2p/setstate API */
+	bool p2p_listen;
+	unsigned int p2p_listen_channel;
+
+	char *p2p_identifier;
+	bool p2p_persistent;
 	bool enable_persistent; /* Save the tech state */
 
 	GSList *driver_list;
@@ -885,6 +893,324 @@ make_reply:
 
 	return reply;
 }
+bool connman_technology_get_p2p_listen(struct connman_technology *technology)
+{
+	return technology->p2p_listen;
+}
+
+void connman_technology_set_p2p_listen(struct connman_technology *technology, bool enabled)
+{
+	dbus_bool_t listen_enabled;
+
+	if (enabled == technology->p2p_listen)
+		return;
+
+	technology->p2p_listen = enabled;
+	listen_enabled = enabled;
+
+	connman_dbus_property_changed_basic(technology->path,
+			CONNMAN_TECHNOLOGY_INTERFACE,
+			"P2PListen",
+			DBUS_TYPE_BOOLEAN,
+			&listen_enabled);
+}
+static DBusMessage *set_p2p_listen(struct connman_technology *technology,
+				DBusMessage *msg, bool enable)
+{
+	DBusMessage *reply = NULL;
+	int err = 0;
+	GSList *tech_drivers = NULL;
+
+	__sync_synchronize();
+	if (!technology->enabled) {
+		err = -EOPNOTSUPP;
+		goto make_reply;
+	}
+
+	if (technology->type != CONNMAN_SERVICE_TYPE_P2P) {
+		err = -EOPNOTSUPP;
+		goto make_reply;
+	}
+
+	if (technology->p2p_listen && enable)
+		return g_dbus_create_reply(msg, DBUS_TYPE_INVALID);
+
+	for (tech_drivers = technology->driver_list; tech_drivers;
+	     tech_drivers = g_slist_next(tech_drivers)) {
+		struct connman_technology_driver *driver = tech_drivers->data;
+
+		if (!driver || !driver->set_p2p_listen)
+			continue;
+
+		err = driver->set_p2p_listen(technology, enable);
+		if (!err) {
+			technology->enable_p2p_listen_persistent = enable;
+			technology_save(technology);
+		}
+	}
+
+make_reply:
+	if (err == -EINPROGRESS)
+		reply = g_dbus_create_reply(msg, DBUS_TYPE_INVALID);
+	else if (err == -EALREADY) {
+		if (enable)
+			reply = __connman_error_already_enabled(msg);
+		else
+			reply = __connman_error_already_disabled(msg);
+	} else if (err < 0)
+		reply = __connman_error_failed(msg, -err);
+	else
+		reply = g_dbus_create_reply(msg, DBUS_TYPE_INVALID);
+
+	return reply;
+}
+void connman_technology_set_p2p_listen_params(struct connman_technology *technology,
+						int period, int interval)
+{
+	if (!technology)
+		return;
+
+	technology->period = period;
+	technology->interval = interval;
+}
+unsigned int connman_technology_get_p2p_listen_channel(struct connman_technology *technology)
+{
+	return technology->p2p_listen_channel;
+}
+void connman_technology_set_p2p_listen_channel(struct connman_technology *technology,
+						unsigned int listen_channel)
+{
+	if (!connman_technology_get_p2p_listen(technology))
+		return;
+
+	if (connman_technology_get_p2p_listen_channel(technology) != listen_channel)
+	{
+		technology->p2p_listen_channel = listen_channel;
+		connman_dbus_property_changed_basic(technology->path,
+				CONNMAN_TECHNOLOGY_INTERFACE,
+				"P2PListenChannel",
+				DBUS_TYPE_UINT32,
+				&technology->p2p_listen_channel);
+	}
+}
+static DBusMessage *set_p2p_persistent(struct connman_technology *technology,
+													DBusMessage *msg, bool enabled)
+{
+	DBusMessage *reply = NULL;
+	int err = 0;
+	GSList *tech_drivers = NULL;
+	dbus_bool_t persistent_enabled;
+
+	__sync_synchronize();
+
+	if (technology->type != CONNMAN_SERVICE_TYPE_P2P || !technology->enabled) {
+		err = -EOPNOTSUPP;
+		goto make_reply;
+	}
+
+	if(technology->p2p_persistent == enabled)
+		return g_dbus_create_reply(msg, DBUS_TYPE_INVALID);
+
+	technology->p2p_persistent = enabled;
+
+	for (tech_drivers = technology->driver_list; tech_drivers != NULL;
+	     tech_drivers = g_slist_next(tech_drivers)) {
+		struct connman_technology_driver *driver = tech_drivers->data;
+
+		if (driver == NULL || driver->set_p2p_persistent == NULL)
+			continue;
+
+		err = driver->set_p2p_persistent(technology, enabled);
+	}
+make_reply:
+	if (err < 0)
+		reply = __connman_error_failed(msg, -err);
+	else {
+		reply = g_dbus_create_reply(msg, DBUS_TYPE_INVALID);
+
+		persistent_enabled = technology->p2p_persistent;
+		connman_dbus_property_changed_basic(technology->path,
+				CONNMAN_TECHNOLOGY_INTERFACE,
+				"P2PPersistent",
+				DBUS_TYPE_BOOLEAN,
+				&persistent_enabled);
+	}
+
+	return reply;
+}
+static int set_p2p_identifier(struct connman_technology *technology,
+											const char *p2p_identifier)
+{
+	int result = -EOPNOTSUPP;
+	int err = 0;
+	GSList *tech_drivers = NULL;
+
+	if (technology->type != CONNMAN_SERVICE_TYPE_P2P)
+		return -EINVAL;
+
+	for (tech_drivers = technology->driver_list; tech_drivers;
+	     tech_drivers = g_slist_next(tech_drivers)) {
+		struct connman_technology_driver *driver = tech_drivers->data;
+
+		if (!driver || !driver->set_p2p_identifier)
+			continue;
+
+		err = driver->set_p2p_identifier(technology, p2p_identifier);
+
+		if (result == -EINPROGRESS)
+			continue;
+
+		if (err == -EINPROGRESS || err == 0) {
+			result = err;
+			continue;
+		}
+	}
+
+	return result;
+}
+static DBusMessage *set_p2p_listen_params(struct connman_technology *technology,
+				DBusMessage *msg, DBusMessageIter *array)
+{
+	DBusMessage *reply = NULL;
+	int err = 0;
+	GSList *tech_drivers = NULL;
+	int period = 0, interval = 0;
+	DBusMessageIter dict;
+
+	if (dbus_message_iter_get_arg_type(array) != DBUS_TYPE_ARRAY)
+		return NULL;
+
+	dbus_message_iter_recurse(array, &dict);
+
+	while (dbus_message_iter_get_arg_type(&dict) == DBUS_TYPE_DICT_ENTRY) {
+		DBusMessageIter entry, value;
+		const char *key;
+		int type;
+
+		dbus_message_iter_recurse(&dict, &entry);
+
+		if (dbus_message_iter_get_arg_type(&entry) != DBUS_TYPE_STRING)
+			return NULL;
+
+		dbus_message_iter_get_basic(&entry, &key);
+		dbus_message_iter_next(&entry);
+
+		if (dbus_message_iter_get_arg_type(&entry) != DBUS_TYPE_VARIANT)
+			return NULL;
+
+		dbus_message_iter_recurse(&entry, &value);
+
+		type = dbus_message_iter_get_arg_type(&value);
+
+		if (g_str_equal(key, "Period")) {
+			if (type != DBUS_TYPE_INT32)
+				return NULL;
+
+			dbus_message_iter_get_basic(&value, &period);
+		} else if (g_str_equal(key, "Interval")) {
+			if (type != DBUS_TYPE_INT32)
+				return NULL;
+
+			dbus_message_iter_get_basic(&value, &interval);
+		}
+
+		dbus_message_iter_next(&dict);
+	}
+
+	for (tech_drivers = technology->driver_list; tech_drivers;
+			tech_drivers = g_slist_next(tech_drivers)) {
+		struct connman_technology_driver *driver = tech_drivers->data;
+
+		if (!driver || !driver->set_p2p_listen_params)
+			continue;
+
+		err = driver->set_p2p_listen_params(technology, period, interval);
+
+		if (err == 0)
+			connman_technology_set_p2p_listen_params(technology, period, interval);
+	}
+
+	if (err < 0)
+		reply = __connman_error_failed(msg, -err);
+	else
+		reply = g_dbus_create_reply(msg, DBUS_TYPE_INVALID);
+
+	return reply;
+}
+static DBusMessage *set_p2p_listen_channel(struct connman_technology *technology,
+													DBusMessage *msg, unsigned int listen_channel)
+{
+	DBusMessage *reply = NULL;
+	int err = 0;
+	GSList *tech_drivers = NULL;
+
+	__sync_synchronize();
+	if (!technology->enabled) {
+		err = -EOPNOTSUPP;
+		goto make_reply;
+	}
+
+	if (technology->type != CONNMAN_SERVICE_TYPE_P2P) {
+		err = -EINVAL;
+		goto make_reply;
+	}
+
+	for (tech_drivers = technology->driver_list; tech_drivers;
+			tech_drivers = g_slist_next(tech_drivers)) {
+		struct connman_technology_driver *driver = tech_drivers->data;
+
+		if (!driver|| !driver->set_p2p_listen_channel)
+			continue;
+
+		err = driver->set_p2p_listen_channel(technology, listen_channel);
+
+		if (err == 0)
+			connman_technology_set_p2p_listen_channel(technology, listen_channel);
+	}
+make_reply:
+	if (err < 0)
+		reply = __connman_error_failed(msg, -err);
+	else
+		reply = g_dbus_create_reply(msg, DBUS_TYPE_INVALID);
+
+	return reply;
+}
+static DBusMessage *set_p2p_go_intent(struct connman_technology *technology,
+				   DBusMessage *msg, unsigned int go_intent)
+{
+	DBusMessage *reply = NULL;
+	int err = 0;
+	GSList *tech_drivers = NULL;
+
+	__sync_synchronize();
+	if (!technology->enabled) {
+		err = -EOPNOTSUPP;
+		goto make_reply;
+	}
+
+	if (technology->type != CONNMAN_SERVICE_TYPE_P2P) {
+		err = -EOPNOTSUPP;
+		goto make_reply;
+	}
+
+	for (tech_drivers = technology->driver_list; tech_drivers != NULL;
+			tech_drivers = g_slist_next(tech_drivers)) {
+		struct connman_technology_driver *driver = tech_drivers->data;
+
+		if (!driver || !driver->set_p2p_go_intent)
+			continue;
+
+		err = driver->set_p2p_go_intent(technology, go_intent);
+	}
+
+make_reply:
+	if (err < 0)
+		reply = __connman_error_failed(msg, -err);
+	else
+		reply = g_dbus_create_reply(msg, DBUS_TYPE_INVALID);
+
+	return reply;
+}
 
 static DBusMessage *set_property(DBusConnection *conn,
 					DBusMessage *msg, void *data)
@@ -1011,6 +1337,74 @@ static DBusMessage *set_property(DBusConnection *conn,
 					DBUS_TYPE_INT32,
 					&technology->tethering_freq);
 		}
+	} else if (g_str_equal(name, "P2PListen")) {
+		bool enable;
+
+		if (type != DBUS_TYPE_BOOLEAN)
+			return __connman_error_invalid_arguments(msg);
+
+		if (technology->type != CONNMAN_SERVICE_TYPE_P2P)
+			return __connman_error_not_supported(msg);
+
+		dbus_message_iter_get_basic(&value, &enable);
+
+		return set_p2p_listen(technology, msg, enable);
+	} else if (g_str_equal(name, "P2PPersistent")) {
+		bool enable;
+
+		if (type != DBUS_TYPE_BOOLEAN)
+			return __connman_error_invalid_arguments(msg);
+
+		if (technology->type != CONNMAN_SERVICE_TYPE_P2P)
+			return __connman_error_not_supported(msg);
+
+		dbus_message_iter_get_basic(&value, &enable);
+
+		return set_p2p_persistent(technology, msg, enable);
+	} else if (g_str_equal(name, "P2PIdentifier")) {
+		int err;
+		const char *p2p_identifier;
+
+		if (type != DBUS_TYPE_STRING)
+			return __connman_error_invalid_arguments(msg);
+
+		dbus_message_iter_get_basic(&value, &p2p_identifier);
+
+		if(strlen(p2p_identifier) > 32)
+			return __connman_error_invalid_arguments(msg);
+
+		err = set_p2p_identifier(technology, p2p_identifier);
+		if (err < 0)
+			return __connman_error_failed(msg, -err);
+	} else if (g_str_equal(name, "P2PListenParams")) {
+		if (technology->type != CONNMAN_SERVICE_TYPE_P2P)
+			return __connman_error_not_supported(msg);
+
+		return set_p2p_listen_params(technology, msg, &value);
+	} else if (g_str_equal(name, "P2PListenChannel")) {
+		dbus_uint32_t listen_channel;
+
+		if (type != DBUS_TYPE_UINT32)
+			return __connman_error_invalid_arguments(msg);
+
+		dbus_message_iter_get_basic(&value, &listen_channel);
+
+		if (technology->type != CONNMAN_SERVICE_TYPE_P2P)
+			return __connman_error_not_supported(msg);
+
+		return set_p2p_listen_channel(technology, msg, listen_channel);
+	} else if (g_str_equal(name, "P2PGOIntent")) {
+		dbus_uint32_t go_intent;
+
+		if (type != DBUS_TYPE_UINT32)
+			return __connman_error_invalid_arguments(msg);
+
+		dbus_message_iter_get_basic(&value, &go_intent);
+
+		if (technology->type != CONNMAN_SERVICE_TYPE_P2P)
+			return __connman_error_not_supported(msg);
+
+		return set_p2p_go_intent(technology, msg, go_intent);
 	} else if (g_str_equal(name, "Powered")) {
 		dbus_bool_t enable;
 

From 029a398daeb95c89b615dca6c08501aabd5bde2b Mon Sep 17 00:00:00 2001
From: "piyush10.asalmol" <piyush10.asalmol@lge.com>
Date: Thu, 27 Oct 2022 18:50:35 +0530
Subject: [PATCH] Add Changes for p2p addService, setwifidisplayinfo,
 findService api

:Release Notes:
Add Changes for p2p addService, setwifidisplayinfo, findService api

:Detailed Notes:
Add Changes for p2p addService, setwifidisplayinfo, findService api

:Testing Performed:
Tested locally

:QA Notes:
NA

:Issues Addressed:
[WRO-11085] - Add Changes for p2p addService, setwifidisplayinfo,
              findService api

Change-Id: Ibacea86fb166383574f1a24512b94bbf4392a39f
Reviewed-on: http://gpro.lge.com/c/webosose/connman-webos/+/338046
Reviewed-by: Commit Msg Checker <commit_msg@lge.com>
Reviewed-by: <muralidhar.n@lge.com>
Tested-by: <muralidhar.n@lge.com>
---
 gdhcp/server.c       |   3 ++
 include/technology.h |   7 ++-
 plugins/ethernet.c   |   3 ++
 plugins/wifi.c       |  22 ++++----
 src/manager.c        |   8 +--
 src/service.c        |  95 ++++++++++++++++++++++++++++++---
 src/technology.c     | 102 +++++++++++++++++++++++++++--------
 src/tethering.c      | 124 +++++++++++++++++++++++++++++++++++++++++++
 8 files changed, 316 insertions(+), 48 deletions(-)

diff --git a/gdhcp/server.c b/gdhcp/server.c
index 52ea2a55..f82c4bbd 100644
--- a/gdhcp/server.c
+++ b/gdhcp/server.c
@@ -255,6 +255,9 @@ static uint32_t find_free_or_expired_nip(GDHCPServer *dhcp_server,
 		if ((ip_addr & 0xff) == 0xff)
 			continue;
 
+		if (htonl(ip_addr) == dhcp_server->server_nip)
+			continue;
+
 		lease = find_lease_by_nip(dhcp_server, ip_addr);
 		if (lease)
 			continue;
diff --git a/include/technology.h b/include/technology.h
index 124dbb07..4accc58d 100644
--- a/include/technology.h
+++ b/include/technology.h
@@ -45,10 +45,9 @@ void connman_technology_regdom_notify(struct connman_technology *technology,
 
 enum connman_service_type connman_technology_get_type
 				(struct connman_technology *technology);
-
-bool connman_technology_get_wifi_tethering(const struct connman_technology *technology,
-					const char **ssid, const char **psk, int *freq);
-
+bool connman_technology_get_wifi_tethering(const char **ssid,
+							const char **psk);
+unsigned int connman_technology_get_wifi_tethering_channel(void);
 bool connman_technology_is_tethering_allowed(enum connman_service_type type);
 bool is_technology_enabled(struct connman_technology *technology);
 
diff --git a/plugins/ethernet.c b/plugins/ethernet.c
index 0bf7fc41..27a3dcf3 100644
--- a/plugins/ethernet.c
+++ b/plugins/ethernet.c
@@ -347,6 +347,7 @@ static void eth_tech_add_interface(struct connman_technology *technology,
 
 	eth_interface_list = g_list_prepend(eth_interface_list,
 					(GINT_TO_POINTER((int) index)));
+	connman_technology_interface_changed(technology);
 }
 
 static void eth_tech_remove_interface(struct connman_technology *technology,
@@ -356,6 +357,7 @@ static void eth_tech_remove_interface(struct connman_technology *technology,
 
 	eth_interface_list = g_list_remove(eth_interface_list,
 					GINT_TO_POINTER((int) index));
+	connman_technology_interface_changed(technology);
 }
 
 static void eth_tech_enable_tethering(struct connman_technology *technology,
@@ -407,6 +409,7 @@ static void eth_tech_disable_tethering(struct connman_technology *technology,
 }
 
 static int eth_tech_set_tethering(struct connman_technology *technology,
+				const char *identifier, const char *passphrase,
 				const char *bridge, bool enabled)
 {
 	if (!connman_technology_is_tethering_allowed(
diff --git a/plugins/wifi.c b/plugins/wifi.c
index f2a5302a..101c0e7a 100644
--- a/plugins/wifi.c
+++ b/plugins/wifi.c
@@ -6000,29 +6000,27 @@ static void tech_remove(struct connman_technology *technology)
 
 static GSupplicantSSID *ssid_ap_init(const char *ssid, const char *passphrase)
 {
-    struct connman_technology *technology;
+    
 	GSupplicantSSID *ap;
-	int freq;
-	bool ret;
+	unsigned int channel;
+	unsigned int freq;
 
 	ap = g_try_malloc0(sizeof(GSupplicantSSID));
 	if (!ap)
 		return NULL;
 
-	ret = connman_technology_get_wifi_tethering(technology,
-						&ssid, &passphrase,
-						&freq);
-	if (ret == false)
-		return NULL;
+	channel = connman_technology_get_wifi_tethering_channel();
+
+	if (channel)
+		freq = 2412 + ((channel - 1) * 5);
+	else
+		freq = 2412;
 
 	ap->mode = G_SUPPLICANT_MODE_MASTER;
 	ap->ssid = ssid;
 	ap->ssid_len = strlen(ssid);
 	ap->scan_ssid = 0;
-	if (freq)
-		ap->freq = freq;
-	else
-		ap->freq = 2412;
+	ap->freq = freq;
 
 	if (!passphrase || strlen(passphrase) == 0) {
 		ap->security = G_SUPPLICANT_SECURITY_NONE;
diff --git a/src/manager.c b/src/manager.c
index e325c908..5442756b 100644
--- a/src/manager.c
+++ b/src/manager.c
@@ -432,7 +432,8 @@ static int parse_peers_service_specs(DBusMessageIter *array,
 							query, query_len);
 		} else if (!g_strcmp0(key, "UpnpService")) {
 			dbus_message_iter_get_basic(&inter, spec);
-			*spec_len = strlen((const char *)*spec)+1;
+			if (*spec)
+				*spec_len = strlen((const char *)*spec)+1;
 		} else if (!g_strcmp0(key, "UpnpVersion")) {
 			dbus_message_iter_get_basic(&inter, version);
 		} else if (!g_strcmp0(key, "WiFiDisplayIEs")) {
@@ -483,10 +484,9 @@ static DBusMessage *register_peer_service(DBusConnection *conn,
 
 	ret = __connman_peer_service_register(owner, msg, spec, spec_len,
 					query, query_len, version,master);
-	if (!ret)
+	if (!ret || ret == -EINPROGRESS)
 		return g_dbus_create_reply(msg, DBUS_TYPE_INVALID);
-	if (ret == -EINPROGRESS)
-		return NULL;
+	
 error:
 	return __connman_error_failed(msg, -ret);
 }
diff --git a/src/service.c b/src/service.c
index 712ade14..f38c88ff 100644
--- a/src/service.c
+++ b/src/service.c
@@ -156,6 +156,7 @@ static struct connman_ipconfig *create_ip6config(struct connman_service *service
 		int index);
 static void dns_changed(struct connman_service *service);
 static void vpn_auto_connect(void);
+static void append_bsses(DBusMessageIter *iter, void *user_data);
 
 struct find_data {
 	const char *path;
@@ -2540,6 +2541,57 @@ int connman_service_iterate_services(connman_service_iterate_cb cb,
 	return ret;
 }
 
+static void append_bss(DBusMessageIter *iter, void *key, void *value)
+{
+	char *bss_id = key;
+	struct connman_bss *bss_props = value;
+	DBusMessageIter item;
+	int signal = 0;
+	int frequency = 0;
+
+	connman_dbus_dict_open(iter, &item);
+
+	if (!bss_id || !bss_props)
+		goto empty_dict;
+
+	signal = connman_network_get_bss_signal(bss_props);
+	frequency = connman_network_get_bss_frequency(bss_props);
+
+	connman_dbus_dict_append_basic(&item, "Id",
+						DBUS_TYPE_STRING, &bss_id);
+
+	connman_dbus_dict_append_basic(&item, "Signal",
+						DBUS_TYPE_INT32, &signal);
+
+	connman_dbus_dict_append_basic(&item, "Frequency",
+						DBUS_TYPE_INT32, &frequency);
+
+empty_dict:
+	connman_dbus_dict_close(iter, &item);
+}
+
+static void append_bsses(DBusMessageIter *iter, void *user_data)
+{
+	GHashTable *bsses = user_data;
+	GHashTableIter hash;
+	gpointer key, value;
+
+	if (!bsses) {
+		// Empty array when no BSSes.
+		return;
+	}
+
+	g_hash_table_iter_init(&hash, bsses);
+
+	while (g_hash_table_iter_next(&hash, &key, &value)) {
+		DBusMessageIter dict;
+
+		dbus_message_iter_open_container(iter, DBUS_TYPE_STRUCT, NULL, &dict);
+		append_bss(&dict, key, value);
+		dbus_message_iter_close_container(iter, &dict);
+	}
+}
+
 static void append_properties(DBusMessageIter *dict, dbus_bool_t limited,
 					struct connman_service *service)
 {
@@ -2605,9 +2657,21 @@ static void append_properties(DBusMessageIter *dict, dbus_bool_t limited,
 						append_ethernet, service);
 		break;
 	case CONNMAN_SERVICE_TYPE_WIFI:
-	case CONNMAN_SERVICE_TYPE_ETHERNET:
+		if (service->network) {
+			connman_dbus_dict_append_array(dict, "BSS",
+											DBUS_TYPE_DICT_ENTRY,
+											append_bsses,
+											connman_network_get_bss_table(service->network));
+		}
 	case CONNMAN_SERVICE_TYPE_BLUETOOTH:
+		if (service->network) {
+			str = connman_network_get_address(service->network);
+			if (str)
+				connman_dbus_dict_append_basic(dict, "Address",
+												DBUS_TYPE_STRING, &str);
+		}
 	case CONNMAN_SERVICE_TYPE_GADGET:
+	case CONNMAN_SERVICE_TYPE_ETHERNET:
 		connman_dbus_dict_append_dict(dict, "Ethernet",
 						append_ethernet, service);
 		break;
@@ -3518,6 +3582,10 @@ static void do_auto_connect(struct connman_service *service,
 	 */
 	if (service->type != CONNMAN_SERVICE_TYPE_VPN)
 		__connman_service_auto_connect(reason);
+	/* Only user interaction should get VPN connected in failure state. */
+	else if (service->state == CONNMAN_SERVICE_STATE_FAILURE &&
+				reason != CONNMAN_SERVICE_CONNECT_REASON_USER)
+		return;
 
 	vpn_auto_connect();
 }
@@ -5923,14 +5991,27 @@ static int service_update_preferred_order(struct connman_service *default_servic
 		struct connman_service *new_service,
 		enum connman_service_state new_state)
 {
-	if (!default_service || default_service == new_service)
-		return 0;
+	unsigned int *tech_array;
+	int i;
 
-	if (service_compare_preferred(default_service, new_service) > 0) {
-		switch_default_service(default_service,
-				new_service);
-		__connman_connection_update_gateway();
+	if (!default_service || default_service == new_service ||
+			default_service->state != new_state)
 		return 0;
+
+	tech_array = connman_setting_get_uint_list("PreferredTechnologies");
+	if (tech_array) {
+
+		for (i = 0; tech_array[i] != 0; i += 1) {
+			if (default_service->type == tech_array[i])
+				return -EALREADY;
+
+			if (new_service->type == tech_array[i]) {
+				switch_default_service(default_service,
+						new_service);
+				__connman_connection_update_gateway();
+				return 0;
+			}
+		}
 	}
 
 	return -EALREADY;
diff --git a/src/technology.c b/src/technology.c
index 1332e57c..b048c62e 100644
--- a/src/technology.c
+++ b/src/technology.c
@@ -259,14 +259,21 @@ int connman_technology_tethering_notify(struct connman_technology *technology,
 							bool enabled)
 {
 	int err;
+	const char *ip;
 
 	DBG("technology %p enabled %u", technology, enabled);
 
 	if (technology->tethering == enabled)
 		return -EALREADY;
 
+	ip = technology->tethering_ipaddress;
+
 	if (enabled) {
-		err = __connman_tethering_set_enabled();
+		if (!ip || strlen(ip) == 0)
+			err = __connman_tethering_set_enabled();
+		else
+			err = __connman_tethering_set_enabled_with_ip(ip);
+
 		if (err < 0)
 			return err;
 	} else
@@ -399,12 +406,12 @@ enum connman_service_type connman_technology_get_type
 	return technology->type;
 }
 
-bool connman_technology_get_wifi_tethering(const struct connman_technology *technology,
-					const char **ssid, const char **psk,
-					int *freq)
+bool connman_technology_get_wifi_tethering(const char **ssid,
+							const char **psk)
 {
 	bool force = true;
 
+    struct connman_technology *technology;
 	if (!ssid || !psk)
 		return false;
 
@@ -424,11 +431,22 @@ bool connman_technology_get_wifi_tethering(const struct connman_technology *tech
 
 	*ssid = technology->tethering_ident;
 	*psk = technology->tethering_passphrase;
-	*freq = technology->tethering_freq;
+	//*freq = technology->tethering_freq;
 
 	return true;
 }
 
+unsigned int connman_technology_get_wifi_tethering_channel(void)
+{
+	struct connman_technology *technology;
+
+	technology = technology_find(CONNMAN_SERVICE_TYPE_WIFI);
+	if (!technology)
+		return 0;
+
+	return technology->tethering_channel;
+}
+
 static void free_rfkill(gpointer data)
 {
 	struct connman_rfkill *rfkill = data;
@@ -670,9 +688,15 @@ static void append_properties(DBusMessageIter *iter,
 					DBUS_TYPE_STRING,
 					&technology->tethering_passphrase);
 
-	connman_dbus_dict_append_basic(&dict, "TetheringFreq",
-				DBUS_TYPE_INT32,
-				&technology->tethering_freq);
+	if (technology->tethering_ipaddress)
+		connman_dbus_dict_append_basic(&dict, "TetheringIPAddress",
+					DBUS_TYPE_STRING,
+					&technology->tethering_ipaddress);
+
+	if (technology->tethering_channel)
+		connman_dbus_dict_append_basic(&dict, "TetheringChannel",
+					DBUS_TYPE_UINT32,
+					&technology->tethering_channel);
 
 	if(technology->p2p_identifier)
 		connman_dbus_dict_append_basic(&dict, "P2PIdentifier",
@@ -1597,10 +1621,19 @@ static DBusMessage *set_property(DBusConnection *conn,
 		if (technology->type != CONNMAN_SERVICE_TYPE_WIFI)
 			return __connman_error_not_supported(msg);
 
-		err = __connman_service_check_passphrase(CONNMAN_SERVICE_SECURITY_PSK,
-							str);
-		if (err < 0)
-			return __connman_error_passphrase_required(msg);
+		/* Allow empty passphrases for setting up an AP with open
+		 * security type */
+
+		if (strlen(str) == 0) {
+			g_free(technology->tethering_passphrase);
+			technology->tethering_passphrase = NULL;
+		}
+		else {
+			err = __connman_service_check_passphrase(CONNMAN_SERVICE_SECURITY_PSK,
+								str);
+			if (err < 0)
+				return __connman_error_passphrase_required(msg);
+		}
 
 		if (g_strcmp0(technology->tethering_passphrase, str) != 0) {
 			g_free(technology->tethering_passphrase);
@@ -1613,26 +1646,53 @@ static DBusMessage *set_property(DBusConnection *conn,
 					DBUS_TYPE_STRING,
 					&technology->tethering_passphrase);
 		}
-	} else if (g_str_equal(name, "TetheringFreq")) {
-		dbus_int32_t freq;
+	} else if (g_str_equal(name, "TetheringChannel")) {
+		dbus_uint32_t channel;
+
+		if (type != DBUS_TYPE_UINT32)
+			return __connman_error_invalid_arguments(msg);
+
+		dbus_message_iter_get_basic(&value, &channel);
 
-		if (type != DBUS_TYPE_INT32)
+		if (technology->type != CONNMAN_SERVICE_TYPE_WIFI)
+			return __connman_error_not_supported(msg);
+
+		if (channel == 0 || channel > 13)
 			return __connman_error_invalid_arguments(msg);
 
-		dbus_message_iter_get_basic(&value, &freq);
+		if (technology->tethering_channel != channel) {
+
+			technology->tethering_channel = channel;
+			technology_save(technology);
+
+			connman_dbus_property_changed_basic(technology->path,
+					CONNMAN_TECHNOLOGY_INTERFACE,
+					"TetheringChannel",
+					DBUS_TYPE_UINT32,
+					&technology->tethering_channel);
+		}
+	} else if (g_str_equal(name, "TetheringIPAddress")) {
+		const char *str;
+
+		dbus_message_iter_get_basic(&value, &str);
 
 		if (technology->type != CONNMAN_SERVICE_TYPE_WIFI)
 			return __connman_error_not_supported(msg);
 
-		if (freq >= 0) {
-			technology->tethering_freq = freq;
+		if (strlen(str) == 0) {
+				g_free(technology->tethering_ipaddress);
+				technology->tethering_ipaddress = NULL;
+		}
+		if (g_strcmp0(technology->tethering_ipaddress, str) != 0) {
+			g_free(technology->tethering_ipaddress);
+			technology->tethering_ipaddress = g_strdup(str);
 			technology_save(technology);
 
 			connman_dbus_property_changed_basic(technology->path,
 					CONNMAN_TECHNOLOGY_INTERFACE,
-					"TetheringFreq",
-					DBUS_TYPE_INT32,
-					&technology->tethering_freq);
+					"TetheringIPAddress",
+					DBUS_TYPE_STRING,
+					&technology->tethering_ipaddress);
 		}
 	} else if (g_str_equal(name, "P2PListen")) {
 		bool enable;
diff --git a/src/tethering.c b/src/tethering.c
index 784917d5..8e847a7e 100644
--- a/src/tethering.c
+++ b/src/tethering.c
@@ -438,6 +438,130 @@ void __connman_tethering_list_clients(DBusMessageIter *array)
 	g_hash_table_foreach(clients_table, append_client, array);
 }
 
+static char *get_ip(uint32_t ip)
+{
+	struct in_addr addr;
+
+	addr.s_addr = htonl(ip);
+
+	return g_strdup(inet_ntoa(addr));
+}
+int __connman_tethering_set_enabled_with_ip(const char *ip)
+{
+	int index;
+	int err;
+	const char *gateway;
+	const char *broadcast;
+	const char *subnet_mask;
+	const char *start_ip;
+	const char *end_ip;
+	const char *dns;
+	unsigned char prefixlen;
+	char **ns;
+
+	DBG("enabled %d", tethering_enabled + 1);
+
+	if (__sync_fetch_and_add(&tethering_enabled, 1) != 0)
+		return 0;
+
+	err = __connman_bridge_create(BRIDGE_NAME);
+	if (err < 0) {
+		__sync_fetch_and_sub(&tethering_enabled, 1);
+		return 0;
+	}
+
+	index = connman_inet_ifindex(BRIDGE_NAME);
+
+	__connman_ippool_newaddr(index, ip, 24);
+
+	struct in_addr inp;
+	uint32_t start, mask;
+
+	if (inet_aton(ip, &inp) == 0)
+		return 0;
+
+	start = ntohl(inp.s_addr);
+	mask = ~(0xffffffff >> 24);
+
+	start = start & mask;
+
+	gateway = ip;
+	broadcast = get_ip(start + 255);
+	subnet_mask = SUBNET_MASK_24;
+	start_ip = get_ip(start + 2);
+	end_ip = get_ip(start + 254);
+
+	err = __connman_bridge_enable(BRIDGE_NAME, gateway,
+			connman_ipaddress_calc_netmask_len(subnet_mask),
+			broadcast);
+	if (err < 0 && err != -EALREADY) {
+		__connman_ippool_free(dhcp_ippool);
+		__connman_ippool_deladdr(index, ip, 24);
+		__connman_bridge_remove(BRIDGE_NAME);
+		__sync_fetch_and_sub(&tethering_enabled, 1);
+		return -EADDRNOTAVAIL;
+	}
+
+	ns = connman_setting_get_string_list("FallbackNameservers");
+	if (ns) {
+		if (ns[0]) {
+			g_free(private_network_primary_dns);
+			private_network_primary_dns = g_strdup(ns[0]);
+		}
+		if (ns[1]) {
+			g_free(private_network_secondary_dns);
+			private_network_secondary_dns = g_strdup(ns[1]);
+		}
+
+		DBG("Fallback ns primary %s secondary %s",
+			private_network_primary_dns,
+			private_network_secondary_dns);
+	}
+
+	dns = gateway;
+	if (__connman_dnsproxy_add_listener(index) < 0) {
+		connman_error("Can't add listener %s to DNS proxy",
+								BRIDGE_NAME);
+		dns = private_network_primary_dns;
+		DBG("Serving %s nameserver to clients", dns);
+	}
+
+	tethering_dhcp_server = dhcp_server_start(BRIDGE_NAME,
+						gateway, subnet_mask,
+						start_ip, end_ip,
+						24 * 3600, dns);
+	if (!tethering_dhcp_server) {
+		__connman_bridge_disable(BRIDGE_NAME);
+		__connman_ippool_free(dhcp_ippool);
+		__connman_ippool_deladdr(index, ip, 24);
+		__connman_bridge_remove(BRIDGE_NAME);
+		__sync_fetch_and_sub(&tethering_enabled, 1);
+		return -EOPNOTSUPP;
+	}
+
+	prefixlen = connman_ipaddress_calc_netmask_len(subnet_mask);
+	err = __connman_nat_enable(BRIDGE_NAME, start_ip, prefixlen);
+	if (err < 0) {
+		connman_error("Cannot enable NAT %d/%s", err, strerror(-err));
+		dhcp_server_stop(tethering_dhcp_server);
+		__connman_bridge_disable(BRIDGE_NAME);
+		__connman_ippool_free(dhcp_ippool);
+		__connman_ippool_deladdr(index, ip, 24);
+		__connman_bridge_remove(BRIDGE_NAME);
+		__sync_fetch_and_sub(&tethering_enabled, 1);
+		return -EOPNOTSUPP;
+	}
+
+	err = __connman_ipv6pd_setup(BRIDGE_NAME);
+	if (err < 0 && err != -EINPROGRESS)
+		DBG("Cannot setup IPv6 prefix delegation %d/%s", err,
+			strerror(-err));
+
+	DBG("tethering started");
+
+	return 0;
+}
+
 static void setup_tun_interface(unsigned int flags, unsigned change,
 		void *data)
 {

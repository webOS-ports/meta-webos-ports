From 6e2bcbd9e611126279d0131db30eca86dc32e7d8 Mon Sep 17 00:00:00 2001
From: "piyush10.asalmol" <piyush10.asalmol@lge.com>
Date: Thu, 27 Oct 2022 19:41:57 +0530
Subject: [PATCH] Add Changes for p2p create group api

:Release Notes:
Add Changes for p2p create group api

:Detailed Notes:
Add Changes for p2p create group api

:Testing Performed:
Tested locally

:QA Notes:
NA

:Issues Addressed:
[WRO-11075] - Add Changes for p2p create group api

Change-Id: Idcfe8874f04f68d6e6eee75e5b47efbd16ada39a
Reviewed-on: http://gpro.lge.com/c/webosose/connman-webos/+/338048
Reviewed-by: Commit Msg Checker <commit_msg@lge.com>
Reviewed-by: Ban Word Checker <ban_word@lge.com>
Reviewed-by: <muralidhar.n@lge.com>
Tested-by: <muralidhar.n@lge.com>
---
 src/manager.c | 91 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 91 insertions(+)

diff --git a/src/manager.c b/src/manager.c
index 5442756b..93e59782 100644
--- a/src/manager.c
+++ b/src/manager.c
@@ -139,6 +139,24 @@ static DBusMessage *get_technologies(DBusConnection *conn,
 	return reply;
 }
 
+static DBusMessage *get_sta_count(DBusConnection *conn,
+               DBusMessage *msg, void *data)
+{
+	DBusMessage *reply;
+	int sta_count = 0;
+
+	reply = dbus_message_new_method_return(msg);
+	if (reply == NULL)
+		return NULL;
+
+	sta_count = __connman_tethering_sta_count();
+
+	dbus_message_append_args(reply,
+				DBUS_TYPE_INT32, &sta_count, DBUS_TYPE_INVALID);
+
+	return reply;
+}
+
 static DBusMessage *remove_provider(DBusConnection *conn,
 				    DBusMessage *msg, void *data)
 {
@@ -522,6 +540,64 @@ error:
 
 }
 
+static DBusMessage *create_group(DBusConnection *conn,
+		DBusMessage *msg, void *data)
+{
+	DBusMessageIter iter;
+	const char *identifier, *passphrase;
+	int err;
+
+	DBG("");
+
+	if (dbus_message_iter_init(msg, &iter) == FALSE)
+				return __connman_error_invalid_arguments(msg);
+
+	if (dbus_message_iter_get_arg_type(&iter) != DBUS_TYPE_STRING)
+			return __connman_error_invalid_arguments(msg);
+
+	dbus_message_iter_get_basic(&iter, &identifier);
+
+	if (strlen(identifier) > (P2P_MAX_SSID - P2P_WILDCARD_SSID_LEN))
+			return __connman_error_invalid_arguments(msg);
+
+	dbus_message_iter_next(&iter);
+
+	if (dbus_message_iter_get_arg_type(&iter) != DBUS_TYPE_STRING)
+			return __connman_error_invalid_arguments(msg);
+
+	dbus_message_iter_get_basic(&iter, &passphrase);
+
+	if ((strlen(passphrase) > 1 && strlen(passphrase) < 8) || strlen(passphrase) > 63)
+			return __connman_error_passphrase_required(msg);
+
+	err = __connman_technology_set_p2p_go(msg, identifier, passphrase);
+
+	if (err < 0)
+			return __connman_error_failed(msg, -err);
+
+	return NULL;
+}
+
+static void append_group_structs(DBusMessageIter *iter, void *user_data)
+{
+	__connman_group_list_struct(iter);
+}
+
+static DBusMessage *get_groups(DBusConnection *conn,
+					DBusMessage *msg, void *data)
+{
+	DBusMessage *reply;
+
+	reply = dbus_message_new_method_return(msg);
+	if (!reply)
+		return NULL;
+
+	__connman_dbus_append_objpath_dict_array(reply,
+			append_group_structs, NULL);
+
+	return reply;
+}
+
 static const GDBusMethodTable manager_methods[] = {
 	{ GDBUS_METHOD("GetProperties",
 			NULL, GDBUS_ARGS({ "properties", "a{sv}" }),
@@ -532,6 +608,9 @@ static const GDBusMethodTable manager_methods[] = {
 	{ GDBUS_METHOD("GetTechnologies",
 			NULL, GDBUS_ARGS({ "technologies", "a(oa{sv})" }),
 			get_technologies) },
+	{ GDBUS_METHOD("GetStaCount",
+			NULL, GDBUS_ARGS({ "stacount", "i" }),
+			get_sta_count) },
 	{ GDBUS_DEPRECATED_METHOD("RemoveProvider",
 			GDBUS_ARGS({ "provider", "o" }), NULL,
 			remove_provider) },
@@ -584,6 +663,13 @@ static const GDBusMethodTable manager_methods[] = {
 	{ GDBUS_METHOD("UnregisterPeerService",
 			GDBUS_ARGS({ "specification", "a{sv}" }), NULL,
 			unregister_peer_service) },
+	{ GDBUS_ASYNC_METHOD("CreateGroup",
+			GDBUS_ARGS({ "identifier", "s" },{ "passphrase", "s" }),
+			GDBUS_ARGS({ "path", "o" }),
+			create_group) },
+	{ GDBUS_METHOD("GetGroups",
+			NULL, GDBUS_ARGS({ "groups", "a(oa{sv})" }),
+			get_groups) },
 	{ },
 };
 
@@ -604,6 +690,11 @@ static const GDBusSignalTable manager_signals[] = {
 	{ GDBUS_SIGNAL("TetheringClientsChanged",
 			GDBUS_ARGS({ "registered", "as" },
 					{ "removed", "as" })) },
+    { GDBUS_SIGNAL("GroupAdded",
+			GDBUS_ARGS({ "path", "o" },
+					{ "properties", "a{sv}" })) },
+	{ GDBUS_SIGNAL("GroupRemoved",
+			GDBUS_ARGS({ "path", "o"})) },
 	{ },
 };
 

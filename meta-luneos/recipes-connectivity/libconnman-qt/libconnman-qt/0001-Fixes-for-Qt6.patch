From 9473b6d7d0c066b53d4993423407339f9c546fbd Mon Sep 17 00:00:00 2001
From: Herman van Hazendonk <github.com@herrie.org>
Date: Sat, 28 May 2022 14:23:09 +0200
Subject: [PATCH] Fixes for Qt6

Signed-off-by: Herman van Hazendonk <github.com@herrie.org>

---
 libconnman-qt/clockmodel.cpp     |  4 ++--
 libconnman-qt/counter.cpp        |  4 ++--
 libconnman-qt/marshalutils.cpp   |  3 ++-
 libconnman-qt/networkmanager.cpp | 20 ++++++++++----------
 libconnman-qt/networkservice.cpp |  2 +-
 libconnman-qt/networksession.cpp |  4 ++--
 libconnman-qt/sessionagent.cpp   |  4 ++--
 libconnman-qt/vpnmanager.h       |  2 +-
 libconnman-qt/vpnmodel.h         |  2 +-
 9 files changed, 23 insertions(+), 22 deletions(-)

diff --git a/libconnman-qt/clockmodel.cpp b/libconnman-qt/clockmodel.cpp
index 72dbb53..6b902e0 100644
--- a/libconnman-qt/clockmodel.cpp
+++ b/libconnman-qt/clockmodel.cpp
@@ -154,13 +154,13 @@ void ClockModel::setTimeservers(const QStringList &val)
 void ClockModel::setDate(QDate date)
 {
     QDateTime toDate(date, QTime::currentTime());
-    quint64 secsSinceEpoch = (quint64)toDate.toTime_t();
+    quint64 secsSinceEpoch = (quint64)toDate.toSecsSinceEpoch();
     SET_CONNMAN_PROPERTY("Time", secsSinceEpoch);
 }
 
 void ClockModel::setTime(QTime time)
 {
     QDateTime toDate(QDate::currentDate(), time);
-    quint64 secsSinceEpoch = (quint64)toDate.toTime_t();
+    quint64 secsSinceEpoch = (quint64)toDate.toSecsSinceEpoch();
     SET_CONNMAN_PROPERTY("Time", secsSinceEpoch);
 }
diff --git a/libconnman-qt/counter.cpp b/libconnman-qt/counter.cpp
index 4ebde7a..b547735 100644
--- a/libconnman-qt/counter.cpp
+++ b/libconnman-qt/counter.cpp
@@ -8,6 +8,7 @@
  */
 
 #include <QtDBus/QDBusConnection>
+#include <QRandomGenerator>
 
 #include "counter.h"
 #include "networkmanager.h"
@@ -29,8 +30,7 @@ Counter::Counter(QObject *parent) :
     registered(false)
 {
     QTime time = QTime::currentTime();
-    qsrand((uint)time.msec());
-    int randomValue = qrand();
+    quint32 randomValue = QRandomGenerator::global()->generate();
     //this needs to be unique so we can use more than one at a time with different processes
     counterPath = "/ConnectivityCounter" + QString::number(randomValue);
 
diff --git a/libconnman-qt/marshalutils.cpp b/libconnman-qt/marshalutils.cpp
index 5a7963f..620d69e 100644
--- a/libconnman-qt/marshalutils.cpp
+++ b/libconnman-qt/marshalutils.cpp
@@ -31,7 +31,7 @@
  */
 
 #include <QDebug>
-#include <QDBusMetaType>
+#include <QDBusArgument> 
 #include "vpnconnection.h"
 
 #include "marshalutils.h"
@@ -188,6 +188,7 @@ QVariantMap MarshalUtils::propertiesToQml(const QVariantMap &fromDBus)
     return rv;
 }
 
+#include <QDBusMetaType>
 // Conversion to/from DBus/QML
 QHash<QString, MarshalUtils::conversionFunction> MarshalUtils::propertyConversions()
 {
diff --git a/libconnman-qt/networkmanager.cpp b/libconnman-qt/networkmanager.cpp
index 10fc34e..d198e7f 100644
--- a/libconnman-qt/networkmanager.cpp
+++ b/libconnman-qt/networkmanager.cpp
@@ -10,7 +10,7 @@
 #include "networkmanager.h"
 
 #include "libconnman_p.h"
-#include <QRegExp>
+#include <QRegularExpression>
 
 // ==========================================================================
 // NetworkManagerFactory
@@ -273,27 +273,27 @@ public:
     QDBusPendingCall GetProperties()
         { return asyncCall("GetProperties"); }
     QDBusPendingCall SetProperty(QString name, QVariant value)
-        { return asyncCall("SetProperty", name, qVariantFromValue(QDBusVariant(value))); }
+        { return asyncCall("SetProperty", name, QVariant::fromValue(QDBusVariant(value))); }
     QDBusPendingCall GetTechnologies()
         { return asyncCall("GetTechnologies"); }
     QDBusPendingCall GetServices()
         { return asyncCall("GetServices"); }
     QDBusPendingCall RegisterAgent(const QString &path)
-        { return asyncCall("RegisterAgent", qVariantFromValue(QDBusObjectPath(path))); }
+        { return asyncCall("RegisterAgent", QVariant::fromValue(QDBusObjectPath(path))); }
     QDBusPendingCall UnregisterAgent(const QString &path)
-        { return asyncCall("UnregisterAgent", qVariantFromValue(QDBusObjectPath(path))); }
+        { return asyncCall("UnregisterAgent", QVariant::fromValue(QDBusObjectPath(path))); }
     QDBusPendingCall RegisterCounter(const QString &path, uint accuracy, uint period)
-        { return asyncCall("RegisterCounter", qVariantFromValue(QDBusObjectPath(path)), accuracy, period); }
+        { return asyncCall("RegisterCounter", QVariant::fromValue(QDBusObjectPath(path)), accuracy, period); }
     QDBusPendingCall ResetCounters(const QString &type)
         { return asyncCall("ResetCounters", type); }
     QDBusPendingCall UnregisterCounter(const QString &path)
-        { return asyncCall("UnregisterCounter", qVariantFromValue(QDBusObjectPath(path))); }
+        { return asyncCall("UnregisterCounter", QVariant::fromValue(QDBusObjectPath(path))); }
     QDBusPendingReply<QDBusObjectPath> CreateSession(const QVariantMap &settings, const QString &path)
-        { return asyncCall("CreateSession", settings, qVariantFromValue(QDBusObjectPath(path))); }
+        { return asyncCall("CreateSession", settings, QVariant::fromValue(QDBusObjectPath(path))); }
     QDBusPendingCall DestroySession(const QString &path)
-        { return asyncCall("DestroySession", qVariantFromValue(QDBusObjectPath(path))); }
+        { return asyncCall("DestroySession", QVariant::fromValue(QDBusObjectPath(path))); }
     QDBusPendingReply<QDBusObjectPath> CreateService(const QString &type, const QString &device, const QString &network, const StringPairArray &settings)
-        { return asyncCall("CreateService", type, device, network, qVariantFromValue(settings)); }
+        { return asyncCall("CreateService", type, device, network, QVariant::fromValue(settings)); }
 
 Q_SIGNALS:
     void PropertyChanged(const QString &name, const QDBusVariant &value);
@@ -760,7 +760,7 @@ void NetworkManager::updateDefaultRoute()
              QTextStream ipv6in(&ipv6routeFile);
              QString ipv6line = ipv6in.readLine();
              while (!ipv6line.isNull()) {
-                 QStringList ipv6lineList = ipv6line.split(QRegExp("\\s+"));
+                 QStringList ipv6lineList = ipv6line.split(QRegularExpression("\\s+"));
                  if (ipv6lineList.size() >= 10) {
                      if (ipv6lineList.at(0) == "00000000000000000000000000000000" &&
                         (ipv6lineList.at(8).endsWith("3") || (ipv6lineList.at(8).endsWith("1")))) {
diff --git a/libconnman-qt/networkservice.cpp b/libconnman-qt/networkservice.cpp
index 970f949..ca6154e 100644
--- a/libconnman-qt/networkservice.cpp
+++ b/libconnman-qt/networkservice.cpp
@@ -321,7 +321,7 @@ public Q_SLOTS:
     QDBusPendingCall GetProperty(const QString &name)
         { return asyncCall("GetProperty", name); }
     QDBusPendingCall SetProperty(const QString &name, QVariant value)
-        { return asyncCall("SetProperty", name, qVariantFromValue(QDBusVariant(value))); }
+        { return asyncCall("SetProperty", name, QVariant::fromValue(QDBusVariant(value))); }
     QDBusPendingCall ClearProperty(const QString &name)
         { return asyncCall("ClearProperty", name); }
     QDBusPendingCall Connect()
diff --git a/libconnman-qt/networksession.cpp b/libconnman-qt/networksession.cpp
index 6affbe5..084b1bc 100644
--- a/libconnman-qt/networksession.cpp
+++ b/libconnman-qt/networksession.cpp
@@ -75,13 +75,13 @@ QString NetworkSession::connectionType() const
 
 void NetworkSession::setAllowedBearers(const QStringList &bearers)
 {
-    settingsMap.insert("AllowedBearers", qVariantFromValue(bearers));
+    settingsMap.insert("AllowedBearers", QVariant::fromValue(bearers));
     m_sessionAgent->setAllowedBearers(bearers);
 }
 
 void NetworkSession::setConnectionType(const QString &type)
 {
-    settingsMap.insert("ConnectionType", qVariantFromValue(type));
+    settingsMap.insert("ConnectionType", QVariant::fromValue(type));
     m_sessionAgent->setConnectionType(type);
 }
 
diff --git a/libconnman-qt/sessionagent.cpp b/libconnman-qt/sessionagent.cpp
index 8359e1c..6eff289 100644
--- a/libconnman-qt/sessionagent.cpp
+++ b/libconnman-qt/sessionagent.cpp
@@ -44,7 +44,7 @@ void SessionAgent::setAllowedBearers(const QStringList &bearers)
     if (!m_session)
         return;
     QVariantMap map;
-    map.insert("AllowedBearers",  qVariantFromValue(bearers));
+    map.insert("AllowedBearers",  QVariant::fromValue(bearers));
     QDBusPendingReply<> reply = m_session->Change("AllowedBearers",QDBusVariant(bearers));
     // hope this is not a lengthy task
     reply.waitForFinished();
@@ -59,7 +59,7 @@ void SessionAgent::setConnectionType(const QString &type)
     if (!m_session)
         return;
     QVariantMap map;
-    map.insert("ConnectionType",  qVariantFromValue(type));
+    map.insert("ConnectionType",  QVariant::fromValue(type));
     m_session->Change("ConnectionType",QDBusVariant(type));
 }
 
diff --git a/libconnman-qt/vpnmanager.h b/libconnman-qt/vpnmanager.h
index 88e509d..33b4c02 100644
--- a/libconnman-qt/vpnmanager.h
+++ b/libconnman-qt/vpnmanager.h
@@ -34,10 +34,10 @@
 #define VPNMANAGER_H
 
 #include <QObject>
+#include "vpnconnection.h"
 
 class VpnManagerPrivate;
 class VpnManager;
-class VpnConnection;
 
 // ==========================================================================
 // VpnManagerFactory
diff --git a/libconnman-qt/vpnmodel.h b/libconnman-qt/vpnmodel.h
index 36d691b..b929714 100644
--- a/libconnman-qt/vpnmodel.h
+++ b/libconnman-qt/vpnmodel.h
@@ -34,9 +34,9 @@
 #define VPNMODEL_H
 
 #include <QAbstractListModel>
+#include "vpnmanager.h";
 
 class VpnModelPrivate;
-class VpnManager;
 class VpnConnection;
 
 /*

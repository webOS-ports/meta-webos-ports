From 8aa3cd36343891df9faf6611feb896be705fde0c Mon Sep 17 00:00:00 2001
From: Christophe Chapuis <chris.chapuis@gmail.com>
Date: Tue, 7 Jun 2022 17:45:06 +0000
Subject: [PATCH] Qt6 migration patch

Signed-off-by: Christophe Chapuis <chris.chapuis@gmail.com>
---
 lib/src/abstractvoicecallhandler.h            |  2 ++
 lib/src/src.pro                               |  2 --
 .../src/voicecallaudiorecorder.cpp            | 23 +++++++++++--------
 .../declarative/src/voicecallaudiorecorder.h  |  4 ++--
 plugins/declarative/src/voicecallhandler.h    |  2 ++
 plugins/plugin.pri                            |  4 +---
 src/basicringtonenotificationprovider.cpp     | 10 +++++---
 7 files changed, 28 insertions(+), 19 deletions(-)

diff --git a/lib/src/abstractvoicecallhandler.h b/lib/src/abstractvoicecallhandler.h
index d2e646d..65be802 100644
--- a/lib/src/abstractvoicecallhandler.h
+++ b/lib/src/abstractvoicecallhandler.h
@@ -24,6 +24,8 @@
 #include <QObject>
 #include <QDateTime>
 
+Q_MOC_INCLUDE("abstractvoicecallprovider.h")
+
 class AbstractVoiceCallProvider;
 
 class AbstractVoiceCallHandler : public QObject
diff --git a/lib/src/src.pro b/lib/src/src.pro
index a5a7542..1a02cf8 100644
--- a/lib/src/src.pro
+++ b/lib/src/src.pro
@@ -3,8 +3,6 @@ TARGET = voicecall
 
 QT = core dbus
 
-CONFIG += c++11
-
 HEADERS += \
     common.h \
     voicecallmanagerinterface.h \
diff --git a/plugins/declarative/src/voicecallaudiorecorder.cpp b/plugins/declarative/src/voicecallaudiorecorder.cpp
index 060a9f9..b0b2a92 100644
--- a/plugins/declarative/src/voicecallaudiorecorder.cpp
+++ b/plugins/declarative/src/voicecallaudiorecorder.cpp
@@ -45,6 +45,11 @@
 #include <QStandardPaths>
 #include <QtDebug>
 
+#include <QAudioFormat>
+#include <QAudioDevice>
+#include <QAudioSource>
+#include <QMediaDevices>
+
 #include <unistd.h>
 
 namespace {
@@ -56,7 +61,7 @@ const QString CallRecordingsDirPath = QStringLiteral("%1/system/privileged/Phone
 
 const quint16 ChannelCount = 1;
 const quint16 SampleRate = 8000;
-const quint16 SampleBits = 16;
+const QAudioFormat::SampleFormat SampleBits = QAudioFormat::Int16;
 const quint32 WaveHeaderLength = 44;
 const quint16 WavePCMFormat = 1;
 
@@ -70,14 +75,14 @@ QAudioFormat getRecordingFormat()
 
     format.setChannelCount(ChannelCount);
     format.setSampleRate(SampleRate);
-    format.setSampleSize(SampleBits);
-    format.setCodec(QStringLiteral("audio/pcm"));
-    format.setByteOrder(QAudioFormat::LittleEndian);
-    format.setSampleType(QAudioFormat::UnSignedInt);
+    format.setSampleFormat(SampleBits);
+//    format.setCodec(QStringLiteral("audio/pcm"));
+//    format.setByteOrder(QAudioFormat::LittleEndian);
+//    format.setSampleType(QAudioFormat::UnSignedInt);
 
-    QAudioDeviceInfo info(QAudioDeviceInfo::defaultInputDevice());
+    QAudioDevice info = QMediaDevices::defaultAudioInput();
     if (!info.isFormatSupported(format)) {
-        format = info.nearestFormat(format);
+        format = info.preferredFormat();
     }
 
     return format;
@@ -296,8 +301,8 @@ bool VoiceCallAudioRecorder::initiateRecording(const QString &fileName)
 
     output.swap(file);
 
-    input.reset(new QAudioInput(recordingFormat));
-    connect(input.data(), &QAudioInput::stateChanged, this, &VoiceCallAudioRecorder::inputStateChanged);
+    input.reset(new QAudioSource(recordingFormat));
+    connect(input.data(), &QAudioSource::stateChanged, this, &VoiceCallAudioRecorder::inputStateChanged);
 
     input->start(output.data());
     active = true;
diff --git a/plugins/declarative/src/voicecallaudiorecorder.h b/plugins/declarative/src/voicecallaudiorecorder.h
index 44d2666..68cc134 100644
--- a/plugins/declarative/src/voicecallaudiorecorder.h
+++ b/plugins/declarative/src/voicecallaudiorecorder.h
@@ -35,7 +35,7 @@
 #ifndef VOICECALLAUDIORECORDER_H
 #define VOICECALLAUDIORECORDER_H
 
-#include <QAudioInput>
+#include <QAudioSource>
 #include <QFile>
 #include <QScopedPointer>
 #include <QDBusPendingCallWatcher>
@@ -86,7 +86,7 @@ private:
     bool initiateRecording(const QString &fileName);
     void terminateRecording();
 
-    QScopedPointer<QAudioInput> input;
+    QScopedPointer<QAudioSource> input;
     QScopedPointer<QFile> output;
     QString label;
     bool featureAvailable;
diff --git a/plugins/declarative/src/voicecallhandler.h b/plugins/declarative/src/voicecallhandler.h
index 9e11afb..b96af04 100644
--- a/plugins/declarative/src/voicecallhandler.h
+++ b/plugins/declarative/src/voicecallhandler.h
@@ -7,6 +7,8 @@
 #include <QDBusInterface>
 #include <QDBusPendingCallWatcher>
 
+Q_MOC_INCLUDE("voicecallmodel.h");
+
 class VoiceCallModel;
 
 class VoiceCallHandler : public QObject
diff --git a/plugins/plugin.pri b/plugins/plugin.pri
index 64abee0..c449d00 100644
--- a/plugins/plugin.pri
+++ b/plugins/plugin.pri
@@ -1,8 +1,6 @@
 TEMPLATE = lib
 QT = core
-CONFIG += plugin link_pkgconfig c++11
-
-QMAKE_CXXFLAGS += -std=c++0x
+CONFIG += plugin link_pkgconfig
 
 # includes are ok all the time, yes, really.
 # it's only used for some macros.
diff --git a/src/basicringtonenotificationprovider.cpp b/src/basicringtonenotificationprovider.cpp
index 59d4398..11b4cfb 100644
--- a/src/basicringtonenotificationprovider.cpp
+++ b/src/basicringtonenotificationprovider.cpp
@@ -39,6 +39,7 @@
 #include <voicecallmanagerinterface.h>
 
 #include <QMediaPlayer>
+#include <QAudioOutput>
 
 class BasicRingtoneNotificationProviderPrivate
 {
@@ -98,8 +99,11 @@ bool BasicRingtoneNotificationProvider::configure(VoiceCallManagerInterface *man
     QObject::connect(manager, SIGNAL(voiceCallAdded(AbstractVoiceCallHandler*)), SLOT(onVoiceCallAdded(AbstractVoiceCallHandler*)));
     QObject::connect(manager, SIGNAL(silenceRingtoneRequested()), d->player, SLOT(stop()));
 
-    d->player->setMedia(QMediaContent(QUrl::fromLocalFile("/usr/share/voicecall/sounds/ring-1.wav")));
-    d->player->setVolume(100);
+    QAudioOutput *audioOutput = new QAudioOutput;
+    d->player->setAudioOutput(audioOutput);
+
+    d->player->setSource(QUrl::fromLocalFile("/usr/share/voicecall/sounds/ring-1.wav"));
+    audioOutput->setVolume(1.0);
     QObject::connect(d->player, SIGNAL(mediaStatusChanged(QMediaPlayer::MediaStatus)), SLOT(onMediaPlayerMediaStatusChanged()));
 
     return true;
@@ -150,7 +154,7 @@ void BasicRingtoneNotificationProvider::onVoiceCallStatusChanged()
         d->player->setPosition(0);
 
         d->currentCall = NULL;
-    } else if (d->player->state() != QMediaPlayer::PlayingState) {
+    } else if (d->player->playbackState() != QMediaPlayer::PlayingState) {
         d->player->setPosition(0);
         d->player->play();
     }
-- 
2.34.1


From d4a7d3fba32afb21fe8c96bec64de1a5be78dcc4 Mon Sep 17 00:00:00 2001
From: "sapna.kumari" <sapna.kumari@lge.com>
Date: Wed, 19 Aug 2020 06:52:43 +0000
Subject: [PATCH] rpi : gstreamer1.0=webosrpi2 g-media-pipeline=21.gav.10

---
Upstream-Status: Pending

 gst/gstpipeline.c           | 153 ++++++++++++++++++++++++++++++++++++
 gst/gstpipeline.h           |   9 +++
 libs/gst/base/gstbasesink.c | 150 +++++++++++++++++++++++++++++++++++
 libs/gst/base/gstbasesink.h |   3 +
 4 files changed, 315 insertions(+)

diff --git a/gst/gstpipeline.c b/gst/gstpipeline.c
index 032fe69..026596f 100644
--- a/gst/gstpipeline.c
+++ b/gst/gstpipeline.c
@@ -328,6 +328,13 @@ reset_start_time (GstPipeline * pipeline, GstClockTime start_time)
   GST_OBJECT_UNLOCK (pipeline);
 }
 
+void
+gst_pipeline_reset_start_time (GstPipeline * pipeline, GstClockTime start_time)
+{
+  GST_DEBUG_OBJECT (pipeline, "Reset start_time to 0");
+  reset_start_time (pipeline, start_time);
+}
+
 /**
  * gst_pipeline_new:
  * @name: (allow-none): name of new pipeline
@@ -388,6 +395,152 @@ pipeline_update_start_time (GstElement * element)
   GST_OBJECT_UNLOCK (element);
 }
 
+GstClockTime
+gst_pipeline_get_base_time (GstPipeline * pipeline, GstClockTime stime)
+{
+  GstElement *element = GST_ELEMENT_CAST (pipeline);
+  GstClock *clock;
+  GstClockTime now, start_time, delay;
+  GstClock *cur_clock;
+  GstClockTime new_base_time = GST_CLOCK_TIME_NONE;
+
+  GST_DEBUG_OBJECT (element, "Obtaining new base_time");
+
+  GST_OBJECT_LOCK (element);
+  cur_clock = element->clock;
+  if (cur_clock)
+    gst_object_ref (cur_clock);
+  /* get the desired running_time of the first buffer aka the start_time */
+  if (stime == GST_CLOCK_TIME_NONE)
+    start_time = GST_ELEMENT_START_TIME (pipeline);
+  else
+    start_time = stime;
+
+  /* see if we need to update the clock */
+  delay = pipeline->delay;
+  GST_OBJECT_UNLOCK (element);
+
+  if (cur_clock)
+    gst_object_ref (cur_clock);
+  clock = cur_clock;
+
+  if (clock) {
+    now = gst_clock_get_time (clock);
+  } else {
+    GST_DEBUG_OBJECT (pipeline, "no clock, using base time of NONE");
+    now = GST_CLOCK_TIME_NONE;
+  }
+
+  if (clock)
+    gst_object_unref (clock);
+
+  if (start_time != GST_CLOCK_TIME_NONE && now != GST_CLOCK_TIME_NONE) {
+    new_base_time = now - start_time + delay;
+    GST_DEBUG_OBJECT (element,
+        "start_time=%" GST_TIME_FORMAT ", now=%" GST_TIME_FORMAT
+        ", base_time %" GST_TIME_FORMAT,
+        GST_TIME_ARGS (start_time), GST_TIME_ARGS (now),
+        GST_TIME_ARGS (new_base_time));
+
+  } else {
+    GST_DEBUG_OBJECT (pipeline,
+        "NOT obtaining base_time because start_time is NONE");
+  }
+
+  if (cur_clock)
+    gst_object_unref (cur_clock);
+
+  return new_base_time;
+}
+
+gboolean
+gst_pipeline_update_base_time (GstPipeline * pipeline, GstClockTime btime)
+{
+  GstElement *element = GST_ELEMENT_CAST (pipeline);
+  GstClock *clock;
+  GstClockTime now, start_time, delay;
+  GstClock *cur_clock;
+
+  GST_DEBUG_OBJECT (element, "selecting clock and base_time %" GST_TIME_FORMAT,
+      GST_TIME_ARGS (btime));
+
+  GST_OBJECT_LOCK (element);
+  cur_clock = element->clock;
+  if (cur_clock)
+    gst_object_ref (cur_clock);
+  /* get the desired running_time of the first buffer aka the start_time */
+  start_time = GST_ELEMENT_START_TIME (pipeline);
+  pipeline->priv->last_start_time = start_time;
+  delay = pipeline->delay;
+  GST_OBJECT_UNLOCK (element);
+
+  GST_DEBUG_OBJECT (element, "start_time: %" GST_TIME_FORMAT,
+      GST_TIME_ARGS (start_time));
+
+  GST_DEBUG_OBJECT (pipeline, "Don't need to update clock, using old clock.");
+  /* only try to ref if cur_clock is not NULL */
+  if (cur_clock)
+    gst_object_ref (cur_clock);
+  clock = cur_clock;
+
+  if (clock) {
+    now = gst_clock_get_time (clock);
+  } else {
+    GST_DEBUG_OBJECT (pipeline, "no clock, using base time of NONE");
+    now = GST_CLOCK_TIME_NONE;
+  }
+
+  if (clock != cur_clock) {
+    /* now distribute the clock (which could be NULL). If some
+     * element refuses the clock, this will return FALSE and
+     * we effectively fail the state change. */
+    if (!gst_element_set_clock (element, clock))
+      goto invalid_clock;
+
+    /* if we selected and distributed a new clock, let the app
+     * know about it */
+    gst_element_post_message (element,
+        gst_message_new_new_clock (GST_OBJECT_CAST (element), clock));
+  }
+
+  if (clock)
+    gst_object_unref (clock);
+
+  if (start_time != GST_CLOCK_TIME_NONE && now != GST_CLOCK_TIME_NONE) {
+    GstClockTime new_base_time =
+        (btime != GST_CLOCK_TIME_NONE) ? btime : (now - start_time + delay);
+    GST_DEBUG_OBJECT (element,
+        "start_time=%" GST_TIME_FORMAT ", now=%" GST_TIME_FORMAT
+        ", base_time %" GST_TIME_FORMAT, GST_TIME_ARGS (start_time),
+        GST_TIME_ARGS (now), GST_TIME_ARGS (new_base_time));
+
+    gst_element_set_base_time (element, new_base_time);
+  } else {
+    GST_DEBUG_OBJECT (pipeline,
+        "NOT adjusting base_time because start_time is NONE");
+  }
+
+  if (cur_clock)
+    gst_object_unref (cur_clock);
+
+  return TRUE;
+
+  /* ERRORS */
+invalid_clock:
+  {
+    /* we generate this error when the selected clock was not
+     * accepted by some element */
+    GST_ELEMENT_ERROR (pipeline, CORE, CLOCK,
+        (_("Selected clock cannot be used in pipeline.")),
+        ("Pipeline cannot operate with selected clock"));
+    GST_DEBUG_OBJECT (pipeline,
+        "Pipeline cannot operate with selected clock %p", clock);
+    if (clock)
+      gst_object_unref (clock);
+    return FALSE;
+  }
+}
+
 /* MT safe */
 static GstStateChangeReturn
 gst_pipeline_change_state (GstElement * element, GstStateChange transition)
diff --git a/gst/gstpipeline.h b/gst/gstpipeline.h
index 6406fb8..c87da57 100644
--- a/gst/gstpipeline.h
+++ b/gst/gstpipeline.h
@@ -130,6 +130,15 @@ void            gst_pipeline_set_auto_flush_bus (GstPipeline *pipeline, gboolean
 GST_API
 gboolean        gst_pipeline_get_auto_flush_bus (GstPipeline *pipeline);
 
+GST_API
+void            gst_pipeline_reset_start_time   (GstPipeline *pipeline, GstClockTime start_time);
+
+GST_API
+GstClockTime    gst_pipeline_get_base_time      (GstPipeline *pipeline, GstClockTime start_time);
+
+GST_API
+gboolean        gst_pipeline_update_base_time   (GstPipeline *pipeline, GstClockTime base_time);
+
 G_DEFINE_AUTOPTR_CLEANUP_FUNC(GstPipeline, gst_object_unref)
 
 G_END_DECLS
diff --git a/libs/gst/base/gstbasesink.c b/libs/gst/base/gstbasesink.c
index 8bfc495..48ca987 100644
--- a/libs/gst/base/gstbasesink.c
+++ b/libs/gst/base/gstbasesink.c
@@ -278,6 +278,8 @@ struct _GstBaseSinkPrivate
   gsize rc_accumulated;
 
   gboolean drop_out_of_segment;
+
+	gboolean reset_stime;
 };
 
 #define DO_RUNNING_AVG(avg,val,size) (((val) + ((size)-1) * (avg)) / (size))
@@ -726,6 +728,8 @@ gst_base_sink_init (GstBaseSink * basesink, gpointer g_class)
 
   priv->drop_out_of_segment = DEFAULT_DROP_OUT_OF_SEGMENT;
 
+	priv->reset_stime = FALSE;
+
   GST_OBJECT_FLAG_SET (basesink, GST_ELEMENT_FLAG_SINK);
 }
 
@@ -2323,6 +2327,8 @@ gst_base_sink_wait_clock (GstBaseSink * sink, GstClockTime time,
   GstClock *clock;
   GstClockTime base_time;
 
+	GstBaseSinkPrivate *priv = gst_base_sink_get_instance_private (sink);
+
   if (G_UNLIKELY (!GST_CLOCK_TIME_IS_VALID (time)))
     goto invalid_time;
 
@@ -2333,6 +2339,12 @@ gst_base_sink_wait_clock (GstBaseSink * sink, GstClockTime time,
   if (G_UNLIKELY ((clock = GST_ELEMENT_CLOCK (sink)) == NULL))
     goto no_clock;
 
+	if (priv->reset_stime) {
+    priv->reset_stime = FALSE;
+    GST_DEBUG_OBJECT (sink, "Reset stime to 0 !!");
+    time = 0;
+  }
+
   base_time = GST_ELEMENT_CAST (sink)->base_time;
   GST_LOG_OBJECT (sink,
       "time %" GST_TIME_FORMAT ", base_time %" GST_TIME_FORMAT,
@@ -4329,6 +4341,92 @@ gst_base_sink_perform_seek (GstBaseSink * sink, GstPad * pad, GstEvent * event)
   return res;
 }
 
+static gboolean
+gst_base_sink_prepare_seamless_seek (GstBaseSink * sink, GstSegment * segment,
+    gboolean reset_start_time, gboolean update_base_time,
+    GstClockTime btime, gboolean propagate)
+{
+  GstBaseSinkClass *bclass;
+  gboolean res = FALSE;
+  GstSegment new_segment;
+  GstClockTime new_base_time;
+  GstElement *top;
+  GstPipeline *pipe;
+
+  bclass = GST_BASE_SINK_GET_CLASS (sink);
+
+  GST_DEBUG_OBJECT (sink, "new segment: %" GST_PTR_FORMAT, segment);
+
+  top = (GstElement *) sink;
+  while (GST_ELEMENT_PARENT (top))
+    top = GST_ELEMENT_PARENT (top);
+
+  pipe = (GstPipeline *) top;
+
+  if (reset_start_time) {
+    GST_DEBUG_OBJECT (sink, "Reset start-time to 0");
+    gst_pipeline_reset_start_time (pipe, 0);
+  }
+
+  if (btime != GST_CLOCK_TIME_NONE)
+    new_base_time = btime;
+  else
+#if 1
+    new_base_time =
+        gst_pipeline_get_base_time (pipe,
+        (reset_start_time ? 0 : GST_CLOCK_TIME_NONE));
+#endif
+#if 0
+  new_base_time = GST_ELEMENT_CAST (sink)->base_time;
+#endif
+  GST_DEBUG_OBJECT (sink, "New base-time %" GST_TIME_FORMAT,
+      GST_TIME_ARGS (new_base_time));
+
+  memcpy (&new_segment, segment, sizeof (GstSegment));
+
+  if (bclass->prepare_seamless_seek)
+    res = bclass->prepare_seamless_seek (sink, &new_segment, new_base_time);
+
+  GST_DEBUG_OBJECT (sink, "segment configured from %" G_GINT64_FORMAT
+      " to %" G_GINT64_FORMAT ", position %" G_GINT64_FORMAT,
+      new_segment.start, new_segment.stop, new_segment.position);
+
+  GST_INFO_OBJECT (sink, "seeking done %d: %" GST_SEGMENT_FORMAT, res,
+      &new_segment);
+
+  gst_segment_copy_into (&new_segment, &sink->segment);
+
+  sink->have_newsegment = TRUE;
+  gst_base_sink_reset_qos (sink);
+
+  if (GST_STATE (sink) != GST_STATE_PLAYING) {
+    GstBaseSinkPrivate *priv = gst_base_sink_get_instance_private (sink);
+    GST_DEBUG_OBJECT (sink, "Reset stime to sync between now and base-time !!");
+    priv->reset_stime = TRUE;
+  }
+
+  if (sink->segment.flags & GST_SEGMENT_FLAG_SEGMENT) {
+    gst_element_post_message (GST_ELEMENT (sink),
+        gst_message_new_segment_start (GST_OBJECT (sink),
+            sink->segment.format, sink->segment.position));
+  }
+
+  sink->priv->discont = TRUE;
+
+  if (update_base_time) {
+    GST_DEBUG_OBJECT (sink, "Update new base-time");
+    gst_pipeline_update_base_time ((GstPipeline *) pipe, new_base_time);
+  }
+
+  if (propagate) {
+    GST_DEBUG_OBJECT (sink, "Propagate new base-time and start-time");
+    GST_ELEMENT_CAST (sink)->base_time = new_base_time;
+    GST_ELEMENT_CAST (sink)->start_time = 0;
+  }
+
+  return res;
+}
+
 static void
 set_step_info (GstBaseSink * sink, GstStepInfo * current, GstStepInfo * pending,
     guint seqnum, GstFormat format, guint64 amount, gdouble rate,
@@ -5015,6 +5113,58 @@ gst_base_sink_send_event (GstElement * element, GstEvent * event)
       result = gst_base_sink_perform_step (basesink, pad, event);
       forward = FALSE;
       break;
+		case GST_EVENT_CUSTOM_UPSTREAM:
+    {
+      if (gst_event_has_name (event, "prepare-seamless-seek")) {
+        const GstStructure *s;
+        const GValue *segment_info;
+
+        GST_DEBUG_OBJECT (basesink, "Doing NON-FLUSH seek");
+        forward = FALSE;
+        s = gst_event_get_structure (event);
+
+        /* Parse new segment and propagate sub-class */
+        segment_info = gst_structure_get_value (s, "segment-info");
+        GST_DEBUG_OBJECT (basesink, "segment-info: %p", segment_info);
+        if (segment_info && G_VALUE_TYPE (segment_info) == GST_TYPE_SEGMENT) {
+          gboolean reset_start_time = FALSE;
+          gboolean update_base_time = FALSE;
+          gboolean propagate = FALSE;
+          GstClockTime new_base_time = GST_CLOCK_TIME_NONE;
+          GstSegment *new_segment = NULL;
+          const GValue *reset_value;
+          const GValue *update_value;
+          const GValue *time_value;
+          const GValue *propagate_value;
+
+          new_segment = (GstSegment *) g_value_dup_boxed (segment_info);
+          GST_DEBUG_OBJECT (basesink, "new_segment: %" GST_PTR_FORMAT,
+              new_segment);
+
+          reset_value = gst_structure_get_value (s, "reset-start-time");
+          if (reset_value)
+            reset_start_time = g_value_get_boolean (reset_value);
+
+          update_value = gst_structure_get_value (s, "update-base-time");
+          if (update_value)
+            update_base_time = g_value_get_boolean (update_value);
+
+          time_value = gst_structure_get_value (s, "new-base-time");
+          if (time_value)
+            new_base_time = (GstClockTime) g_value_get_uint64 (time_value);
+
+          propagate_value = gst_structure_get_value (s, "propagate");
+          if (propagate_value)
+            propagate = g_value_get_boolean (propagate_value);
+
+          result =
+              gst_base_sink_prepare_seamless_seek (basesink, new_segment,
+              reset_start_time, update_base_time, new_base_time, propagate);
+          g_boxed_free (GST_TYPE_SEGMENT, new_segment);
+        }
+      }
+      break;
+    }
     default:
       break;
   }
diff --git a/libs/gst/base/gstbasesink.h b/libs/gst/base/gstbasesink.h
index 7ce8650..0f05421 100644
--- a/libs/gst/base/gstbasesink.h
+++ b/libs/gst/base/gstbasesink.h
@@ -203,6 +203,9 @@ struct _GstBaseSinkClass {
   /* Render a BufferList */
   GstFlowReturn (*render_list)  (GstBaseSink *sink, GstBufferList *buffer_list);
 
+	/* notify subclass of seamless-seek */
+  gboolean      (*prepare_seamless_seek) (GstBaseSink *sink, GstSegment *segment, GstClockTime new_base_time);
+
   /*< private >*/
   gpointer       _gst_reserved[GST_PADDING_LARGE];
 };

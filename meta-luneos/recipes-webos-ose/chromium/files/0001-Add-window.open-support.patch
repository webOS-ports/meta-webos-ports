From 8f71dc75b95351e9aa187aa7d5e69cf20cd42662 Mon Sep 17 00:00:00 2001
From: Christophe Chapuis <chris.chapuis@gmail.com>
Date: Wed, 4 Jun 2025 22:51:52 +0200
Subject: [PATCH] Add window.open support

MJ: replace gfx::Rect& initial_pos (initial_rect) with blink::mojom::WindowFeatures& window_features
    as in chromium 107 with:
    https://chromium-review.googlesource.com/c/chromium/src/+/3835666

    replace IntSize with gfx::Size
    as in chromium 98 with:
    https://chromium-review.googlesource.com/c/chromium/src/+/3312656

Signed-off-by: Christophe Chapuis <chris.chapuis@gmail.com>
---
Upstream-Status: Pending
---
 .../browser/web_contents/web_contents_impl.cc | 14 +++++
 .../browser/web_contents/web_contents_impl.h  |  5 ++
 src/content/public/browser/web_contents.h     |  3 ++
 .../renderer/window_features_converter.cc     |  2 +
 .../app_runtime/public/webview_delegate.h     |  7 +++
 src/neva/app_runtime/webview.cc               | 51 +++++++++++++++----
 src/neva/app_runtime/webview.h                | 16 +++++-
 .../window_features/window_features.mojom     |  6 +++
 .../blink/public/web/web_window_features.h    |  2 +
 .../renderer/core/page/chrome_client_impl.h   |  2 +
 .../blink/renderer/core/page/create_window.cc | 24 ++++++++-
 src/webos/webview_base.cc                     | 46 ++++++++++++++---
 src/webos/webview_base.h                      | 13 +++++
 13 files changed, 171 insertions(+), 20 deletions(-)

diff --git a/src/content/browser/web_contents/web_contents_impl.cc b/src/content/browser/web_contents/web_contents_impl.cc
index de56bacff3..0ddfa86d1c 100644
--- a/src/content/browser/web_contents/web_contents_impl.cc
+++ b/src/content/browser/web_contents/web_contents_impl.cc
@@ -1432,6 +1432,13 @@ BrowserContext* WebContentsImpl::GetBrowserContext() {
 base::WeakPtr<WebContents> WebContentsImpl::GetWeakPtr() {
   return weak_factory_.GetWeakPtr();
 }
+ 
+const std::vector<std::string> WebContentsImpl::GetAdditionalFeatures() {
+  return additional_features_;
+}
+void WebContentsImpl::SetAdditionalFeatures(std::vector<std::string> additional_features) {
+  additional_features_ = additional_features;
+}
 
 const GURL& WebContentsImpl::GetURL() {
   return GetVisibleURL();
@@ -4553,6 +4560,13 @@ FrameTree* WebContentsImpl::CreateNewWindow(
 
   auto* new_contents_impl = new_contents.get();
 
+  // Additional window features passed to window.open (webOS/LuneOS specific)
+  std::vector<std::string> additional_features;
+  for (auto webStr : params.features->additional_features)
+    additional_features.push_back(std::string(base::StringPiece(webStr)));
+
+  new_contents_impl->SetAdditionalFeatures(additional_features);
+
   // If the new frame has a name, make sure any SiteInstances that can find
   // this named frame have proxies for it.  Must be called after
   // SetSessionStorageNamespace, since this calls CreateRenderView, which uses
diff --git a/src/content/browser/web_contents/web_contents_impl.h b/src/content/browser/web_contents/web_contents_impl.h
index 549e573a39..e1738bf07f 100644
--- a/src/content/browser/web_contents/web_contents_impl.h
+++ b/src/content/browser/web_contents/web_contents_impl.h
@@ -347,6 +347,9 @@ class CONTENT_EXPORT WebContentsImpl : public WebContents,
   void SetDelegate(WebContentsDelegate* delegate) override;
   NavigationControllerImpl& GetController() override;
 
+  const std::vector<std::string> GetAdditionalFeatures() override;
+  void SetAdditionalFeatures(std::vector<std::string> additional_features);
+
 #if defined(USE_NEVA_APPRUNTIME)
   // Notify the process creation of currently active RenderProcessHost
   void RenderProcessCreated(RenderProcessHost* render_process_host) override;
@@ -2169,6 +2172,8 @@ class CONTENT_EXPORT WebContentsImpl : public WebContents,
   // Used to correctly handle integer zooming through a smooth scroll device.
   float zoom_scroll_remainder_;
 
+  std::vector<std::string> additional_features_;
+
   // The intrinsic size of the page.
   gfx::Size preferred_size_;
 
diff --git a/src/content/public/browser/web_contents.h b/src/content/public/browser/web_contents.h
index dc03a9a11c..c41670e436 100644
--- a/src/content/public/browser/web_contents.h
+++ b/src/content/public/browser/web_contents.h
@@ -388,6 +388,9 @@ class WebContents : public PageNavigator,
   // NavigationController).
   virtual content::BrowserContext* GetBrowserContext() = 0;
 
+  // Retrieve additional window features passed to window.open (webOS/LuneOS specific)
+  virtual const std::vector<std::string> GetAdditionalFeatures() = 0;
+
   // Returns a weak pointer.
   virtual base::WeakPtr<WebContents> GetWeakPtr() = 0;
 
diff --git a/src/content/public/renderer/window_features_converter.cc b/src/content/public/renderer/window_features_converter.cc
index f80e71e5ef..87281920a9 100644
--- a/src/content/public/renderer/window_features_converter.cc
+++ b/src/content/public/renderer/window_features_converter.cc
@@ -25,6 +25,7 @@ blink::mojom::WindowFeaturesPtr ConvertWebWindowFeaturesToMojoWindowFeatures(
   result->has_height = web_window_features.height_set;
   result->is_popup = web_window_features.is_popup;
   result->is_fullscreen = web_window_features.is_fullscreen;
+  result->additional_features = web_window_features.additional_features;
   return result;
 }
 
@@ -41,6 +42,7 @@ blink::WebWindowFeatures ConvertMojoWindowFeaturesToWebWindowFeatures(
   result.height_set = window_features.has_height;
   result.is_popup = window_features.is_popup;
   result.is_fullscreen = window_features.is_fullscreen;
+  result.additional_features = window_features.additional_features;
   return result;
 }
 
diff --git a/src/neva/app_runtime/public/webview_delegate.h b/src/neva/app_runtime/public/webview_delegate.h
index c46f8555d3..216419c0b4 100644
--- a/src/neva/app_runtime/public/webview_delegate.h
+++ b/src/neva/app_runtime/public/webview_delegate.h
@@ -22,6 +22,10 @@
 #include "neva/app_runtime/public/app_runtime_constants.h"
 #include "neva/app_runtime/public/app_runtime_export.h"
 
+namespace content {
+    class WebContents;
+}
+
 namespace neva_app_runtime {
 
 struct WebViewInfo;
@@ -65,6 +69,9 @@ class APP_RUNTIME_EXPORT WebViewDelegate {
       neva_app_runtime::DropPeerConnectionReason reason) {}
   virtual void DidResumeDOM() {}
 
+  // create a new view for this content
+  virtual content::WebContents *CreateWindowForContents(std::unique_ptr<content::WebContents> new_contents, const std::string& newUrl, int height = 0) = 0;
+
   // Pluggable delegate
   virtual void SendCookiesForHostname(const std::string& cookies) {}
 
diff --git a/src/neva/app_runtime/webview.cc b/src/neva/app_runtime/webview.cc
index 1bbe0e38a5..18c86ec494 100644
--- a/src/neva/app_runtime/webview.cc
+++ b/src/neva/app_runtime/webview.cc
@@ -131,12 +131,21 @@ void WebView::SetFileAccessBlocked(bool blocked) {
   NOTIMPLEMENTED();
 }
 
-WebView::WebView(int width, int height, WebViewProfile* profile)
+WebView::WebView(int width, int height, WebViewProfile* profile, std::unique_ptr<content::WebContents> web_contents)
     : width_(width),
       height_(height),
-      profile_(profile ? profile : WebViewProfile::GetDefaultProfile()) {
+      profile_(profile ? profile : WebViewProfile::GetDefaultProfile()),
+      web_contents_(std::move(web_contents)) {
   TRACE_EVENT2("neva", "WebView::WebView", "width", width, "height", height);
-  CreateWebContents();
+  if(!web_contents_) {
+    CreateWebContents();
+  }
+  else {
+    AppRuntimeWebViewHostImpl::CreateForWebContents(web_contents_.get());
+    AppRuntimeWebViewControllerImpl::CreateForWebContents(web_contents_.get());
+  }
+  injection_manager_ = std::make_unique<WebAppInjectionManager>();
+  
   web_contents_->SetDelegate(this);
   Observe(web_contents_.get());
 
@@ -218,7 +227,6 @@ void WebView::CreateWebContents() {
   params.desired_renderer_state =
       content::WebContents::CreateParams::kNoRendererProcess;
   web_contents_ = content::WebContents::Create(params);
-  injection_manager_ = std::make_unique<WebAppInjectionManager>();
   AppRuntimeWebViewHostImpl::CreateForWebContents(web_contents_.get());
   AppRuntimeWebViewControllerImpl::CreateForWebContents(web_contents_.get());
 
@@ -500,6 +508,19 @@ void WebView::LoadProgressChanged(double progress) {
     webview_delegate_->OnLoadProgressChanged(progress);
 }
 
+content::WebContents *WebView::CreateWindowForContents(std::unique_ptr<content::WebContents> new_contents, const GURL& target_url, WindowOpenDisposition disposition, const blink::mojom::WindowFeatures& window_features, bool user_gesture)
+{
+  content::WebContents *contents = nullptr;
+  if (webview_delegate_) {
+    // Nota bene: initial_pos is already scaled to take into account device_scale_factor
+    contents = webview_delegate_->CreateWindowForContents(std::move(new_contents), target_url.spec(), window_features.bounds.height());
+  }
+
+//  WebView *newAdapter = new WebContentsAdapter(std::move(new_contents));
+//  m_viewClient->adoptNewWindow(newAdapter, static_cast<WebContentsAdapterClient::WindowOpenDisposition>(disposition), user_gesture, toQt(initial_pos), m_initialTargetUrl);
+  return contents;
+}
+
 // OpenURLFromTab() method is implemented for transition from old_url to new_url
 // where old_url.SchemeIs(url::kFileScheme) == false
 // and   new_url.SchemeIs(url::kFileScheme) == true
@@ -515,14 +536,26 @@ content::WebContents* WebView::OpenURLFromTab(
     return nullptr;
   }
 
+  content::WebContents *target = source;
+  content::SiteInstance *target_site_instance = params.source_site_instance.get();
+  content::Referrer referrer = params.referrer;
   if (params.disposition != WindowOpenDisposition::CURRENT_TAB) {
-    NOTIMPLEMENTED();
-    return nullptr;
+    target = CreateWindowForContents(0, params.url, params.disposition, blink::mojom::WindowFeatures(), params.user_gesture);
   }
 
-  source->GetController().LoadURLWithParams(
-      content::NavigationController::LoadURLParams(params));
-  return source;
+  content::NavigationController::LoadURLParams load_url_params(params);
+  load_url_params.source_site_instance = target_site_instance;
+  load_url_params.referrer = referrer;
+
+  target->GetController().LoadURLWithParams(load_url_params);
+  return target;
+}
+
+void WebView::AddNewContents(content::WebContents* source, std::unique_ptr<content::WebContents> new_contents, const GURL& target_url, WindowOpenDisposition disposition, const blink::mojom::WindowFeatures& window_features, bool user_gesture, bool* was_blocked)
+{
+    content::WebContents* newContent = CreateWindowForContents(std::move(new_contents), target_url, disposition, window_features, user_gesture);
+    if (was_blocked)
+        *was_blocked = !newContent;
 }
 
 void WebView::NavigationStateChanged(content::WebContents* source,
diff --git a/src/neva/app_runtime/webview.h b/src/neva/app_runtime/webview.h
index e2c9b11839..2aaa9fd207 100644
--- a/src/neva/app_runtime/webview.h
+++ b/src/neva/app_runtime/webview.h
@@ -91,7 +91,7 @@ class WebView : public AppRuntimeWebContentsDelegate,
 
   static void SetFileAccessBlocked(bool blocked);
 
-  WebView(int width, int height, WebViewProfile* profile = nullptr);
+  WebView(int width, int height, WebViewProfile* profile = nullptr, std::unique_ptr<content::WebContents> web_contents = 0);
   ~WebView() override;
 
   void CreateRenderView();
@@ -193,6 +193,14 @@ class WebView : public AppRuntimeWebContentsDelegate,
       content::WebContents* source,
       const content::OpenURLParams& params) override;
 
+  void AddNewContents(content::WebContents* source,
+                      std::unique_ptr<content::WebContents> new_contents,
+                      const GURL& target_url,
+                      WindowOpenDisposition disposition,
+                      const blink::mojom::WindowFeatures& window_features,
+                      bool user_gesture,
+                      bool* was_blocked) override;
+
   void NavigationStateChanged(content::WebContents* source,
                               content::InvalidateTypes changed_flags) override;
   void CloseContents(content::WebContents* source) override;
@@ -293,6 +301,12 @@ class WebView : public AppRuntimeWebContentsDelegate,
   void SwitchFullscreenModeForTab(content::WebContents* web_contents,
                                   bool enter_fullscreen);
 
+  content::WebContents *CreateWindowForContents(std::unique_ptr<content::WebContents> new_contents,
+                                                const GURL& target_url,
+                                                WindowOpenDisposition disposition,
+                                                const blink::mojom::WindowFeatures& window_features,
+                                                bool user_gesture);
+
   WebViewDelegate* webview_delegate_ = nullptr;
 
   std::unique_ptr<content::WebContents> web_contents_;
diff --git a/src/third_party/blink/public/mojom/window_features/window_features.mojom b/src/third_party/blink/public/mojom/window_features/window_features.mojom
index 254f60a430..56f51fc684 100644
--- a/src/third_party/blink/public/mojom/window_features/window_features.mojom
+++ b/src/third_party/blink/public/mojom/window_features/window_features.mojom
@@ -22,4 +22,10 @@ struct WindowFeatures {
     // Window management permission must be granted on the opener.
     // See: https://chromestatus.com/feature/6002307972464640
     bool is_fullscreen = false;
+
+    // NOTE: WebWindowFeatures::additional_features is not mirrored by this
+    // mojom struct as it's never used by the browser and therefore doesn't need
+    // to be sent.
+    // ... but webOS/LuneOS apps need that to send additional info to the OS
+    array<string> additional_features;
 };
diff --git a/src/third_party/blink/public/web/web_window_features.h b/src/third_party/blink/public/web/web_window_features.h
index bef5a989ba..44db112cb3 100644
--- a/src/third_party/blink/public/web/web_window_features.h
+++ b/src/third_party/blink/public/web/web_window_features.h
@@ -73,6 +73,8 @@ struct WebWindowFeatures {
   // TODO(apaseltiner): Investigate moving this field to a non-public struct
   // since it is only needed within //third_party/blink.
   absl::optional<WebVector<WebString>> attribution_srcs;
+
+  std::vector<std::string> additional_features;
 };
 
 }  // namespace blink
diff --git a/src/third_party/blink/renderer/core/page/chrome_client_impl.h b/src/third_party/blink/renderer/core/page/chrome_client_impl.h
index b608a6b6ba..36d61f8f10 100644
--- a/src/third_party/blink/renderer/core/page/chrome_client_impl.h
+++ b/src/third_party/blink/renderer/core/page/chrome_client_impl.h
@@ -311,6 +311,8 @@ class CORE_EXPORT ChromeClientImpl final : public ChromeClient {
 
   float ZoomFactorForViewportLayout() override;
 
+  gfx::Size MinimumWindowSize() const override { return gfx::Size(100, 5); }
+
  private:
   bool IsChromeClientImpl() const override { return true; }
 
diff --git a/src/third_party/blink/renderer/core/page/create_window.cc b/src/third_party/blink/renderer/core/page/create_window.cc
index 5d49fa1b96..c428829a25 100644
--- a/src/third_party/blink/renderer/core/page/create_window.cc
+++ b/src/third_party/blink/renderer/core/page/create_window.cc
@@ -133,8 +133,23 @@ WebWindowFeatures GetWindowFeaturesFromString(const String& feature_string,
       SECURITY_DCHECK(i <= length);
 
       // skip to first separator (end of value)
-      while (i < length && !IsWindowFeaturesSeparator(buffer[i]))
-        i++;
+      if (i < length && buffer[i] == '{') {
+          // json value: go to the matching '}'
+          int unmatchedBraceCount = 0;
+          while (i < length) {
+              if (buffer[i] == '{')
+                  unmatchedBraceCount++;
+              else if (buffer[i] == '}')
+                  unmatchedBraceCount--;
+              i++;
+              if (unmatchedBraceCount <= 0)
+                  break;
+          }
+      } else {
+          // classic case: skip to first separator
+          while (i < length && !IsWindowFeaturesSeparator(buffer[i]))
+            i++;
+      }
 
       value_end = i;
 
@@ -198,6 +213,9 @@ WebWindowFeatures GetWindowFeaturesFromString(const String& feature_string,
       status_bar = value;
     } else if (key_string == "scrollbars") {
       scrollbars = value;
+    } else if (key_string == "attributes") {
+      String additionalFeature = key_string + "=" + value_string;
+      window_features.additional_features.push_back(additionalFeature.Latin1().data());
     } else if (key_string == "resizable") {
       window_features.resizable = value;
     } else if (key_string == "noopener") {
@@ -238,6 +256,8 @@ WebWindowFeatures GetWindowFeaturesFromString(const String& feature_string,
         window_features.attribution_srcs->emplace_back(DecodeURLEscapeSequences(
             original_case_value_string.ToString(), DecodeURLMode::kUTF8));
       }
+    } else if (value == 1) {
+      window_features.additional_features.push_back(key_string.ToString().Latin1().data());
     }
   }
 
diff --git a/src/webos/webview_base.cc b/src/webos/webview_base.cc
index 42efffc847..2af60eec68 100644
--- a/src/webos/webview_base.cc
+++ b/src/webos/webview_base.cc
@@ -75,10 +75,40 @@ void WebViewBase::SetFileAccessBlocked(bool blocked) {
   NOTIMPLEMENTED();
 }
 
-WebViewBase::WebViewBase(bool alt_storage_path, int width, int height) {
+WebViewBase::WebViewBase(neva_app_runtime::WebView *webview, bool alt_storage_path, int width, int height) {
+  webview_ = webview;
+  if (!webview_) {
+    // If screen is rotated then initial size might be different and default
+    // values may lead to incorrectly scaled view for the first rendered frame.
+    // That is why the default values are subject to the overriding.
+    if (display::Screen::GetScreen()->GetNumDisplays() > 0) {
+      gfx::Size displaySize =
+          display::Screen::GetScreen()->GetPrimaryDisplay().bounds().size();
+      width = displaySize.width();
+      height = displaySize.height();
+    }
+
+    webview_ = new neva_app_runtime::WebView(width, height);
+  }
+
+  webview_->SetDelegate(this);
+  webview_->SetControllerDelegate(this);
+}
+
+WebViewBase::WebViewBase(bool alt_storage_path, int width, int height):
+  WebViewBase(nullptr, alt_storage_path, width, height) {}
+
+WebViewBase::~WebViewBase() {
+  webview_->SetDelegate(nullptr);
+  delete webview_;
+}
+
+content::WebContents *WebViewBase::CreateWindowForContents(std::unique_ptr<content::WebContents> new_contents, const std::string& newUrl, int initial_height)
+{
   // If screen is rotated then initial size might be different and default
   // values may lead to incorrectly scaled view for the first rendered frame.
   // That is why the default values are subject to the overriding.
+  int width = 1920, height = 1080;
   if (display::Screen::GetScreen()->GetNumDisplays() > 0) {
     gfx::Size displaySize =
         display::Screen::GetScreen()->GetPrimaryDisplay().bounds().size();
@@ -86,14 +116,14 @@ WebViewBase::WebViewBase(bool alt_storage_path, int width, int height) {
     height = displaySize.height();
   }
 
-  webview_ = new neva_app_runtime::WebView(width, height);
-  webview_->SetDelegate(this);
-  webview_->SetControllerDelegate(this);
-}
+  // take into account the height preferred by the new content
+  if (initial_height > 0) height = initial_height;
 
-WebViewBase::~WebViewBase() {
-  webview_->SetDelegate(nullptr);
-  delete webview_;
+  std::vector<std::string> additional_features;
+  if(new_contents) additional_features = new_contents->GetAdditionalFeatures();
+
+  neva_app_runtime::WebView *webview = new neva_app_runtime::WebView(width, height, nullptr, std::move(new_contents));
+  return CreateWindowForWebView(newUrl, webview, height, additional_features);
 }
 
 void WebViewBase::Initialize(const std::string& app_id,
diff --git a/src/webos/webview_base.h b/src/webos/webview_base.h
index dd796587bd..4298183b17 100644
--- a/src/webos/webview_base.h
+++ b/src/webos/webview_base.h
@@ -100,11 +100,24 @@ class WEBOS_EXPORT WebViewBase
 
   static void SetFileAccessBlocked(bool blocked);
 
+  WebViewBase(neva_app_runtime::WebView *webview,
+              bool alt_storage_path = false,
+              int width = 1920,
+              int height = 1080);
+
   WebViewBase(bool alt_storage_path = false,
               int width = 1920,
               int height = 1080);
   ~WebViewBase() override;
 
+  content::WebContents *CreateWindowForContents(std::unique_ptr<content::WebContents> new_contents, const std::string& newUrl, int height = 0) override;
+  // CreateWindowForWebView should be implemented in WAM
+  virtual content::WebContents *CreateWindowForWebView(const std::string& newUrl,
+                                                       neva_app_runtime::WebView *webview,
+                                                       int height,
+                                                       std::vector<std::string> additional_features) { return nullptr; };
+
+
   void Initialize(const std::string& app_id,
                   const std::string& app_path,
                   const std::string& trust_level,

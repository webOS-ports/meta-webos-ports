From 5e898f34c21ac832a0fea6310ab4bd4a98e8931e Mon Sep 17 00:00:00 2001
From: Herrie <Github.com@herrie.org>
Date: Wed, 4 Jun 2025 12:08:59 +0200
Subject: [PATCH] WAM: Add window.open support

Signed-off-by: Christophe Chapuis <chris.chapuis@gmail.com>
---
Upstream-Status: Inappropriate [LuneOS specific]
---
 src/core/web_app_manager.cc                   | 45 +++++++++++++++++++
 src/core/web_app_manager.h                    |  6 +++
 src/platform/webengine/blink_web_view.cc      | 38 ++++++++++++++++
 src/platform/webengine/blink_web_view.h       |  3 ++
 src/platform/webengine/web_page_blink.cc      | 16 ++++++-
 src/platform/webengine/web_page_blink.h       |  2 +
 .../webengine/web_page_blink_delegate.h       |  5 +++
 7 files changed, 114 insertions(+), 1 deletion(-)

diff --git a/src/core/web_app_manager.cc b/src/core/web_app_manager.cc
index 4d5b712..32aefe2 100644
--- a/src/core/web_app_manager.cc
+++ b/src/core/web_app_manager.cc
@@ -1,3 +1,4 @@
+@@ -347,6 +347,50 @@ WebAppBase* WebAppManager::OnLaunchUrl(
 // Copyright (c) 2008-2021 LG Electronics, Inc.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
@@ -355,6 +356,50 @@ WebAppBase* WebAppManager::OnLaunchUrl(
   return app;
 }
 
+void WebAppManager::CreateWindowForAppPage(const std::string& win_type,
+                                           std::shared_ptr<ApplicationDescription> app_desc,
+                                           const std::string& args,
+                                           const std::string& launching_app_id,
+                                           WebPageBase* page) {
+
+  std::string instance_id = GenerateInstanceId();
+
+  WebAppFactoryManager* factory = GetWebAppFactory();
+  WebAppBase* app = factory->CreateWebApp(win_type.c_str(), app_desc,
+                                          app_desc->SubType().c_str());
+
+  if (app) {
+    // set use launching time optimization true while app loading.
+    page->SetUseLaunchOptimization(true);
+
+    if (win_type == kWtFloating || win_type == kWtCard)
+      page->SetEnableBackgroundRun(app_desc->IsEnableBackgroundRun());
+
+    app->SetAppDescription(app_desc);
+    app->SetAppProperties(args);
+    app->SetInstanceId(instance_id);
+    app->SetLaunchingAppId(launching_app_id);
+    if (web_app_manager_config_->IsCheckLaunchTimeEnabled())
+      app->StartLaunchTimer();
+    app->Attach(page);
+    app->SetPreloadState(args);
+
+    page->Load();
+    WebPageAdded(page);
+
+    app_list_.push_back(app);
+
+    if (app_version_.find(app_desc->Id()) != app_version_.end()) {
+      if (app_version_[app_desc->Id()] != app_desc->Version()) {
+        app->SetNeedReload(true);
+        app_version_[app_desc->Id()] = app_desc->Version();
+      }
+    } else {
+      app_version_[app_desc->Id()] = app_desc->Version();
+    }
+  }
+}
+
 void WebAppManager::ForceCloseAppInternal(WebAppBase* app) {
   app->SetKeepAlive(false);
   CloseAppInternal(app);
diff --git a/src/core/web_app_manager.h b/src/core/web_app_manager.h
index 452ca80..cb92459 100644
--- a/src/core/web_app_manager.h
+++ b/src/core/web_app_manager.h
@@ -126,6 +126,12 @@ class WebAppManager {
 
   void WebPageAdded(WebPageBase* page);
   void WebPageRemoved(WebPageBase* page);
+
+  void CreateWindowForAppPage(const std::string& win_type,
+                              std::shared_ptr<ApplicationDescription> app_desc,
+                              const std::string& args,
+                              const std::string& launching_app_id,
+                              WebPageBase* page);
 
   void AppDeleted(WebAppBase* app);
   void PostRunningAppList();
diff --git a/src/platform/webengine/blink_web_view.cc b/src/platform/webengine/blink_web_view.cc
index 8a6a894..a36377a 100644
--- a/src/platform/webengine/blink_web_view.cc
+++ b/src/platform/webengine/blink_web_view.cc
@@ -19,8 +19,32 @@
 #include "log_manager.h"
 #include "web_page_blink_delegate.h"
 
+#include "web_view_factory.h"
+#include "web_view_impl.h"
+
+class WebViewFactoryExistingWebContents: public WebViewFactory {
+ public:
+  WebViewFactoryExistingWebContents(WebView* webViewNewContents):
+    webViewNewContents_(webViewNewContents) {}
+
+  WebView* CreateWebView() override {
+    WebView *newView = webViewNewContents_;
+    webViewNewContents_ = nullptr; // if CreateWebView is called again, don't reuse this WebView
+    if (!newView) newView = new WebViewImpl(std::make_unique<BlinkWebView>());
+    return newView;
+  }
+ private:
+  WebView* webViewNewContents_;
+};
+
 BlinkWebView::BlinkWebView(bool /*do_initialize*/) {}
 
+BlinkWebView::BlinkWebView(neva_app_runtime::WebView *webview)
+    : WebViewBase::WebViewBase(webview),
+      delegate_(nullptr),
+      progress_(0),
+      user_script_executed_(false) {}
+
 void BlinkWebView::AddUserScript(const std::string& script) {
   user_scripts_.push_back(script);
 }
@@ -246,4 +270,18 @@ void BlinkWebView::DidErrorPageLoadedFromNetErrorHelper() {
     return;
   }
   return delegate_->DidErrorPageLoadedFromNetErrorHelper();
+
+  content::WebContents *BlinkWebView::CreateWindowForWebView(const std::string& newUrl, neva_app_runtime::WebView *webview)
+  {
+    if (!delegate_)
+      return nullptr;
+
+    // create a new factory for this new_contents
+    WebView* webViewNewContents = new WebViewImpl(std::make_unique<BlinkWebView>(webview));
+    std::unique_ptr<WebViewFactory> dedicatedFactory(new WebViewFactoryExistingWebContents(webViewNewContents));
+    // create a new WebPage using this factory
+    WebView *newWebView = delegate_->CreateWindow(newUrl, std::move(dedicatedFactory));
+
+    return newWebView->GetWebContents();
+  }
 }
diff --git a/src/platform/webengine/blink_web_view.h b/src/platform/webengine/blink_web_view.h
index 52df42a..a21dac8 100644
--- a/src/platform/webengine/blink_web_view.h
+++ b/src/platform/webengine/blink_web_view.h
@@ -28,6 +28,7 @@ class BlinkWebView : public webos::WebViewBase {
  public:
   // TODO need to refactor both constructors (here & pluggables)
   explicit BlinkWebView(bool do_initialize = true);
+  explicit BlinkWebView(neva_app_runtime::WebView *webview);
   explicit BlinkWebView(const std::string& /*group*/) : BlinkWebView() {}
 
   void AddUserScript(const std::string& script);
@@ -75,6 +76,8 @@ class BlinkWebView : public webos::WebViewBase {
   void LoadVisuallyCommitted() override;
   void DidResumeDOM() override;
   void DidErrorPageLoadedFromNetErrorHelper() override;
+
+  content::WebContents *CreateWindowForWebView(const std::string& newUrl, neva_app_runtime::WebView *webview) override;
 
  private:
   WebPageBlinkDelegate* delegate_ = nullptr;
diff --git a/src/platform/webengine/web_page_blink.cc b/src/platform/webengine/web_page_blink.cc
index 0f925a6..8d1e9bd 100644
--- a/src/platform/webengine/web_page_blink.cc
+++ b/src/platform/webengine/web_page_blink.cc
@@ -30,9 +30,11 @@
 #include "palm_system_blink.h"
 #include "url.h"
 #include "utils.h"
+#include "window_types.h"
 #include "web_app_manager_config.h"
 #include "web_app_manager_tracer.h"
 #include "web_app_manager_utils.h"
+#include "web_app_manager.h"
 #include "web_page_blink_observer.h"
 #include "web_page_observer.h"
 #include "web_view.h"
@@ -111,7 +113,7 @@ void WebPageBlink::Init() {
   page_private_->page_view_->SetDisallowScrollingInMainFrame(true);
   page_private_->page_view_->SetDoNotTrack(app_desc_.DoNotTrack());
   page_private_->page_view_->SetJavascriptCanOpenWindows(true);
-  page_private_->page_view_->SetSupportsMultipleWindows(false);
+  page_private_->page_view_->SetSupportsMultipleWindows(true);
   page_private_->page_view_->SetCSSNavigationEnabled(true);
   page_private_->page_view_->SetV8DateUseSystemLocaloffset(false);
   page_private_->page_view_->SetLocalStorageEnabled(true);
@@ -1252,3 +1254,15 @@ void WebPageBlink::SetVisibilityState(WebPageVisibilityState visibility_state) {
 void WebPageBlink::SetObserver(WebPageBlinkObserver* observer) {
   observer_ = observer;
 }
+
+WebView* WebPageBlink::CreateWindow(const std::string& newUrl, std::unique_ptr<WebViewFactory> dedicatedFactory) {
+  // create a new page, with a factory associated with the new content
+  WebPageBlink *newPage = new WebPageBlink(newUrl, app_desc_, "{}", std::move(dedicatedFactory));
+  newPage->Init();
+
+  // Create a new webApp instance for this page
+  WebAppManager *webAppMgr = WebAppManager::Instance();
+  webAppMgr->CreateWindowForAppPage(kWtCard, app_desc_, "{}", app_id_, newPage);
+
+  return newPage->PageView();
+}
\ No newline at end of file
diff --git a/src/platform/webengine/web_page_blink.h b/src/platform/webengine/web_page_blink.h
index 3cd4f1e..7e86537 100644
--- a/src/platform/webengine/web_page_blink.h
+++ b/src/platform/webengine/web_page_blink.h
@@ -150,6 +150,8 @@ class WebPageBlink : public WebPageBase, public WebPageBlinkDelegate {
   double DevicePixelRatio();
   void SetAdditionalContentsScale(float scale_x, float scale_y);
   void UpdateHardwareResolution();
+
+  WebView* CreateWindow(const std::string& newUrl, std::unique_ptr<WebViewFactory> dedicatedFactory, int height, std::vector<std::string> additional_features) override;
 
   // Timer callback
   void TimeoutCloseCallback();
diff --git a/src/platform/webengine/web_page_blink_delegate.h b/src/platform/webengine/web_page_blink_delegate.h
index 5f0a1bb..14994c7 100644
--- a/src/platform/webengine/web_page_blink_delegate.h
+++ b/src/platform/webengine/web_page_blink_delegate.h
@@ -19,6 +19,10 @@
 
 #include <string>
 #include <vector>
+#include <memory>
+
+class WebView;
+class WebViewFactory;
 
 class WebPageBlinkDelegate {
  public:
@@ -59,6 +63,7 @@ class WebPageBlinkDelegate {
   virtual void DidSwapCompositorFrame() {}
   virtual void DidResumeDOM() {}
   virtual void DidErrorPageLoadedFromNetErrorHelper() = 0;
+  virtual WebView* CreateWindow(const std::string& newUrl, std::unique_ptr<WebViewFactory> dedicatedFactory) = 0;
 };
 
 #endif  // PLATFORM_WEBENGINE_WEB_PAGE_BLINK_DELEGATE_H_

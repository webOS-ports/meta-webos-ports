From e9fef5e8fa3a874a7aa3edcb561fefa21254ece9 Mon Sep 17 00:00:00 2001
From: Herrie <Github.com@herrie.org>
Date: Wed, 13 Sep 2023 11:47:04 +0200
Subject: [PATCH 1/2] DefaultBootSequencer.cpp: Add LuneOS bits

* Start LuneOS Core Apps
* Let luna-appmanager still start the boot apps.

Signed-off-by: Christophe Chapuis <chris.chapuis@gmail.com>
---
 src/bootd/sequencer/DefaultBootSequencer.cpp | 55 +++++++++++---------
 1 file changed, 31 insertions(+), 24 deletions(-)

diff --git a/src/bootd/sequencer/DefaultBootSequencer.cpp b/src/bootd/sequencer/DefaultBootSequencer.cpp
index 5ab2709..c24b448 100644
--- a/src/bootd/sequencer/DefaultBootSequencer.cpp
+++ b/src/bootd/sequencer/DefaultBootSequencer.cpp
@@ -31,6 +31,23 @@ DefaultBootSequencer::~DefaultBootSequencer()
 
 void DefaultBootSequencer::doBoot()
 {
+    // apps to be started on boot, with keepAlive
+    std::vector<std::string> startupCoreAppsOnBoot = {
+        /* these are already started by LunaAppManager !
+        "com.palm.launcher",
+        "com.palm.systemui"
+        */
+    };
+    std::vector<std::string> startupAppsOnBoot = {
+        "com.webos.app.notification",
+        "com.webos.app.volume"
+        /* these will be started by LunaAppManager !
+        "org.webosports.app.phone",
+        "com.palm.app.email",
+        "com.palm.app.calendar"
+        */ 
+    };
+    
     /* DefaultBootSequencer is just booting. */
     g_Logger.debugLog(Logger::MSGID_BOOTSEQUENCER, "Start DefaultBootSequencer");
 
@@ -46,43 +63,33 @@ void DefaultBootSequencer::doBoot()
     int displayCnt = StaticEventDB::instance()->getDisplayCnt();
     g_Logger.debugLog(Logger::MSGID_BOOTSEQUENCER, "Display device count : (%d)", displayCnt);
 
-    if (displayCnt == 2) {
-        // Launch home on display0 and launch bareapp on display1
-        launchTargetApp("bareapp", true, false, 0);
-        launchTargetApp("bareapp", true, false, 1);
-        DynamicEventDB::instance()->waitEvent(m_mainLoop, DynamicEventDB::EVENT_FIRSTAPP_LAUNCHED, EventCoreTimeout::EventCoreTimeout_Min);
-        launchTargetApp("com.webos.app.home", true, true, 0); // launchedHidden : false , keepAlive : true
-        launchTargetApp("com.webos.app.home", true, true, 1); // launchedHidden : false , keepAlive : true
-    } else {
-        // Always launch firstapp (bareapp) first
-        launchTargetApp("bareapp", true, false);
-        DynamicEventDB::instance()->waitEvent(m_mainLoop, DynamicEventDB::EVENT_FIRSTAPP_LAUNCHED, EventCoreTimeout::EventCoreTimeout_Min);
-        launchTargetApp("com.webos.app.home", true, true); // launchedHidden : false , keepAlive : true
-    }
-
     proceedCoreBootDone();
     proceedInitBootDone();
     proceedDataStoreInitStart();
     ApplicationManager::instance()->listLaunchPoints(&m_bootManager, EventCoreTimeout::EventCoreTimeout_Max);
 
-    if (displayCnt == 2) {
-        launchTargetApp("com.webos.app.notification", false, true, 0); // launchedHidden : false , keepAlive : true
-        launchTargetApp("com.webos.app.notification", false, true, 1); // launchedHidden : false , keepAlive : true
-        launchTargetApp("com.webos.app.volume", false, true, 0); // launchedHidden : false , keepAlive : true
-        launchTargetApp("com.webos.app.volume", false, true, 1); // launchedHidden : false , keepAlive : true
-    } else {
-        launchTargetApp("com.webos.app.notification", false, true); // launchedHidden : false , keepAlive : true
-        launchTargetApp("com.webos.app.volume", false, true); // launchedHidden : false , keepAlive : true
+    int iDisplay = 0;
+    // first, start the core apps (launcher, systemui...) with keepalive
+    for (iDisplay=0; iDisplay<displayCnt; ++iDisplay) {
+        for (auto &appId: startupCoreAppsOnBoot) {
+            launchTargetApp(appId, true, true, iDisplay);
+        }
     }
-
+    // then, start some basic apps (calendar, email...) without keepalive
+    for (iDisplay=0; iDisplay<displayCnt; ++iDisplay) {
+        for (auto &appId: startupAppsOnBoot) {
+            launchTargetApp(appId, true, false, iDisplay); // launchedHidden : false , keepAlive : false
+        }
+    }
+    
     proceedMinimalBootDone();
     proceedRestBootDone();
     proceedBootDone();
-
     ApplicationManager::instance()->running(&m_bootManager, this);
 
     DynamicEventDB::instance()->triggerEvent(DynamicEventDB::EVENT_BOOT_COMPLETE);
     g_Logger.infoLog(Logger::MSGID_BOOTSEQUENCER, "Bootd's job is done");
+
 }
 
 void DefaultBootSequencer::launchTargetApp(string appId, bool visible, bool keepAlive, int displayId)
-- 
2.41.0.windows.3


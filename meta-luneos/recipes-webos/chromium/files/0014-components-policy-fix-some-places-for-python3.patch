From dd019e51617cf237aa9c73a4cbea6e5538b1c3a1 Mon Sep 17 00:00:00 2001
From: Takuto Ikuta <tikuta@chromium.org>
Date: Thu, 27 May 2021 16:16:34 +0000
Subject: [PATCH] components/policy: fix some places for python3

This uses six for compatibility.

This is still not sufficent to switch to python3.

Bug: 1205599
Change-Id: I6bda6308cf5121b55db4544187c6dda41ad5f6b3
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2921668
Reviewed-by: Yann Dago <ydago@chromium.org>
Commit-Queue: Yann Dago <ydago@chromium.org>
Auto-Submit: Takuto Ikuta <tikuta@chromium.org>
Cr-Commit-Position: refs/heads/master@{#887182}
---
 .../policy/tools/generate_policy_source.py    |  9 ++++----
 .../policy_template_generator.py              | 11 ++++++++-
 .../template_writers/template_formatter.py    | 23 +++++++++++--------
 .../template_writers/writers/doc_writer.py    |  2 +-
 .../writers/xml_formatted_writer.py           |  2 +-
 5 files changed, 31 insertions(+), 16 deletions(-)

diff --git a/src/components/policy/tools/generate_policy_source.py b/src/components/policy/tools/generate_policy_source.py
index 74c4ad3d96..b4136af8d0 100755
--- a/src/components/policy/tools/generate_policy_source.py
+++ b/src/components/policy/tools/generate_policy_source.py
@@ -18,6 +18,7 @@ from collections import OrderedDict
 from functools import partial
 import ast
 import os
+import codecs
 import json
 import re
 import sys
@@ -470,7 +471,7 @@ def _OutputComment(f, comment):
 
 
 def _LoadJSONFile(json_file):
-  with open(json_file, 'r') as f:
+  with codecs.open(json_file, 'r', encoding='utf-8') as f:
     text = f.read()
   return ast.literal_eval(text)
 
@@ -872,7 +873,7 @@ class SchemaNodesGenerator:
             'Extra  IsSensitiveValue HasSensitiveChildren\n')
     for schema_node in self.schema_nodes:
       assert schema_node.extra >= MIN_INDEX and schema_node.extra <= MAX_INDEX
-      comment = ('\n' + ' ' * 69 + '// ').join(schema_node.comments)
+      comment = ('\n' + ' ' * 69 + '// ').join(sorted(schema_node.comments))
       f.write('  { base::Value::%-19s %4s %-16s %-5s },  // %s\n' %
               (schema_node.schema_type + ',', str(schema_node.extra) + ',',
                str(schema_node.is_sensitive_value).lower() + ',',
@@ -1536,9 +1537,9 @@ def _GetSupportedChromeOSPolicies(policies, type):
   return filter(partial(_IsSupportedChromeOSPolicy, type), policies)
 
 
-# Returns the set of all policy.policy_protobuf_type strings from |policies|.
+# Returns the list of all policy.policy_protobuf_type strings from |policies|.
 def _GetProtobufTypes(policies):
-  return set(['Integer', 'Boolean', 'String', 'StringList'])
+  return sorted(['Integer', 'Boolean', 'String', 'StringList'])
 
 
 # Writes the definition of an array that contains the pointers to the mutable
diff --git a/src/components/policy/tools/template_writers/policy_template_generator.py b/src/components/policy/tools/template_writers/policy_template_generator.py
index 8f955f799d..8401eed0b9 100755
--- a/src/components/policy/tools/template_writers/policy_template_generator.py
+++ b/src/components/policy/tools/template_writers/policy_template_generator.py
@@ -4,7 +4,16 @@
 # found in the LICENSE file.
 
 import copy
+import os
 import re
+import sys
+
+sys.path.insert(
+    0,
+    os.path.join(os.path.dirname(__file__), os.pardir, os.pardir, os.pardir,
+                 os.pardir, 'third_party', 'six', 'src'))
+
+import six
 
 
 def IsGroupOrAtomicGroup(policy):
@@ -21,7 +30,7 @@ class PolicyTemplateGenerator:
   '''
 
   def _ImportMessage(self, msg_txt):
-    msg_txt = msg_txt.decode('utf-8')
+    msg_txt = six.ensure_text(msg_txt)
     lines = msg_txt.split('\n')
 
     # Strip any extra leading spaces, but keep useful indentation:
diff --git a/src/components/policy/tools/template_writers/template_formatter.py b/src/components/policy/tools/template_writers/template_formatter.py
index 71b402476b..9af88164b6 100755
--- a/src/components/policy/tools/template_writers/template_formatter.py
+++ b/src/components/policy/tools/template_writers/template_formatter.py
@@ -14,6 +14,13 @@ import os
 import re
 import sys
 
+sys.path.insert(
+    0,
+    os.path.join(os.path.dirname(__file__), os.pardir, os.pardir, os.pardir,
+                 os.pardir, 'third_party', 'six', 'src'))
+
+import six
+
 import writer_configuration
 import policy_template_generator
 
@@ -118,20 +125,19 @@ def _ParseVersionFile(version_path):
       elif key.strip() == 'PATCH':
         version['patch'] = value.strip()
 
-    version_found = version.has_key('major') and version.has_key(
-        'minor') and version.has_key('build') and version.has_key('patch')
+    version_found = len(version) == 4
   return version if version_found else None
 
 
 def _JsonToUtf8Encoding(data, ignore_dicts=False):
-  if isinstance(data, unicode):
+  if six.PY2 and isinstance(data, unicode):
     return data.encode('utf-8')
   elif isinstance(data, list):
     return [_JsonToUtf8Encoding(item, False) for item in data]
   elif isinstance(data, dict):
     return {
         _JsonToUtf8Encoding(key): _JsonToUtf8Encoding(value)
-        for key, value in data.iteritems()
+        for key, value in data.items()
     }
   return data
 
@@ -177,11 +183,10 @@ def main():
   parser.add_argument('--doc', action='append', dest='doc')
   parser.add_argument(
       '--doc_atomic_groups', action='append', dest='doc_atomic_groups')
-  parser.add_argument(
-      '--local',
-      action='store_true',
-      help='If set, the documentation will be built so \
-            that links work locally in the generated path.')
+  parser.add_argument('--local',
+                      action='store_true',
+                      help='If set, the documentation will be built so '
+                      'that links work locally in the generated path.')
   parser.add_argument('--json', action='append', dest='json')
   parser.add_argument('--plist', action='append', dest='plist')
   parser.add_argument('--plist_strings', action='append', dest='plist_strings')
diff --git a/src/components/policy/tools/template_writers/writers/doc_writer.py b/src/components/policy/tools/template_writers/writers/doc_writer.py
index 178497ca80..69ea6edba5 100755
--- a/src/components/policy/tools/template_writers/writers/doc_writer.py
+++ b/src/components/policy/tools/template_writers/writers/doc_writer.py
@@ -227,7 +227,7 @@ class DocWriter(xml_formatted_writer.XMLFormattedWriter):
         '[\n%s\n]' % ',\n'.join('  "%s"' % item for item in example_value))
 
   def _AddListExample(self, parent, policy):
-    '''Adds the example value of a 'list' policy to a DOM node. Example output:
+    r'''Adds the example value of a 'list' policy to a DOM node. Example output:
     <dl>
       <dt>Windows (Windows clients):</dt>
       <dd>
diff --git a/src/components/policy/tools/template_writers/writers/xml_formatted_writer.py b/src/components/policy/tools/template_writers/writers/xml_formatted_writer.py
index 02fee8293f..a881537047 100755
--- a/src/components/policy/tools/template_writers/writers/xml_formatted_writer.py
+++ b/src/components/policy/tools/template_writers/writers/xml_formatted_writer.py
@@ -30,7 +30,7 @@ class XMLFormattedWriter(template_writer.TemplateWriter):
 
     doc = parent.ownerDocument
     element = doc.createElement(name)
-    for key, value in sorted(attrs.iteritems()):
+    for key, value in sorted(attrs.items()):
       element.setAttribute(key, value)
     if text:
       element.appendChild(doc.createTextNode(text))

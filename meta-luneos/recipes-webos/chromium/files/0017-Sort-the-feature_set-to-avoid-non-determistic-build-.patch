From 32e45e0a0e7a45d2860f52ef74d53a5170d42cb7 Mon Sep 17 00:00:00 2001
From: Mike Taylor <miketaylr@chromium.org>
Date: Thu, 27 May 2021 20:18:27 +0000
Subject: [PATCH] Sort the feature_set to avoid non-determistic build failures.

Convert chromium/src/gpu/config/BUILD.gn to Python 3.

Bug: 1205595
Change-Id: I3b9115394d7a4d322d969c2f11253a0a28503932
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2911010
Commit-Queue: Mike Taylor <miketaylr@chromium.org>
Reviewed-by: Zhenyao Mo <zmo@chromium.org>
Cr-Commit-Position: refs/heads/master@{#887312}
---
 src/gpu/config/BUILD.gn        |  4 +---
 src/gpu/config/process_json.py | 14 +++++++-------
 2 files changed, 8 insertions(+), 10 deletions(-)

diff --git a/src/gpu/config/BUILD.gn b/src/gpu/config/BUILD.gn
index 9e291e8874..0c926324ba 100644
--- a/src/gpu/config/BUILD.gn
+++ b/src/gpu/config/BUILD.gn
@@ -5,7 +5,6 @@
 import("//build/config/chrome_build.gni")
 import("//build/config/chromecast_build.gni")
 import("//build/config/chromeos/ui_mode.gni")
-import("//build/config/python.gni")
 import("//build/config/ui.gni")
 import("//gpu/vulkan/features.gni")
 
@@ -32,8 +31,7 @@ process_json_outputs = [
   "$target_gen_dir/software_rendering_list_exceptions_autogen.h",
 ]
 
-# TODO(crbug.com/1112471): Get this to run cleanly under Python 3.
-python2_action("process_json") {
+action("process_json") {
   script = "process_json.py"
 
   inputs = [
diff --git a/src/gpu/config/process_json.py b/src/gpu/config/process_json.py
index 6a609fe932..b08ae8d85a 100755
--- a/src/gpu/config/process_json.py
+++ b/src/gpu/config/process_json.py
@@ -156,21 +156,21 @@ def load_gpu_driver_bug_workarounds(workaround_type_filename):
 
 def get_feature_set(features, total_feature_set):
   assert len(features) > 0
-  feature_set = set([])
+  feature_set = dict()
   for feature in features:
     if feature == 'all':
-      feature_set = set(total_feature_set)
+      feature_set = {k:1 for k in total_feature_set}
     elif isinstance(feature, dict):
       for key in feature:
         if key == 'exceptions':
           for exception in feature['exceptions']:
             assert exception in feature_set
-            feature_set.remove(exception)
+            del feature_set[exception]
         else:
           raise KeyError('only exceptions are allowed')
     else:
       assert feature in total_feature_set
-      feature_set.add(feature)
+      feature_set[feature] = 1
   return feature_set
 
 
@@ -178,7 +178,7 @@ def write_features(feature_set, feature_name_prefix, var_name,
                    data_helper_file):
   data_helper_file.write('const int %s[%d] = {\n' %
                          (var_name, len(feature_set)))
-  for feature in feature_set:
+  for feature in feature_set.keys():
     data_helper_file.write(feature_name_prefix + feature.upper())
     data_helper_file.write(',\n')
   data_helper_file.write('};\n\n')
@@ -606,7 +606,7 @@ def write_conditions(entry_id, is_exception, exception_id, entry,
                   'Intel' in driver_vendor)
       assert is_intel, 'Intel driver schema is only for Intel GPUs'
       valid_version = check_intel_driver_version(driver_version['value'])
-      if driver_version.has_key('value2'):
+      if 'value2' in driver_version:
         valid_version = (valid_version and
                          check_intel_driver_version(driver_version['value2']))
       assert valid_version, INTEL_DRIVER_VERSION_SCHEMA
@@ -616,7 +616,7 @@ def write_conditions(entry_id, is_exception, exception_id, entry,
       is_nvidia = (format(vendor_id, '#04x') == '0x10de')
       assert is_nvidia, 'Nvidia driver schema is only for Nvidia GPUs'
       valid_version = check_nvidia_driver_version(driver_version['value'])
-      if driver_version.has_key('value2'):
+      if 'value2' in driver_version:
         valid_version = (valid_version and
                          check_nvidia_driver_version(driver_version['value2']))
       assert valid_version, NVIDIA_DRIVER_VERSION_SCHEMA

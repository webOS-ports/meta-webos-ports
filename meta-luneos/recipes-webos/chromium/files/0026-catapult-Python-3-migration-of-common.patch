From 56c1cfad1b28f2cde062a322017d919a4a09cd57 Mon Sep 17 00:00:00 2001
From: Ryan Heise <heiserya@google.com>
Date: Fri, 21 May 2021 12:37:34 -0700
Subject: [PATCH] catapult: Python 3 migration of common/

- Migrated StringIO for all files
- Updated some instances where a byte array is needed instead of a
string
- Modernized a sort

Change-Id: Ie190199258e948b00b4aca0cd08f12e8db4bfaa6
Bug: chromium:1198408
Reviewed-on: https://chromium-review.googlesource.com/c/catapult/+/2912505
Commit-Queue: Ryan Heise <heiserya@google.com>
Reviewed-by: John Chen <johnchen@chromium.org>
Signed-off-by: Martin Jansa <martin.jansa@lge.com>
---
 .../py_trace_event/trace_event_impl/log.py     | 12 ++++++------
 .../perfetto_trace_writer_unittest.py          | 17 ++++++++++-------
 .../py_utils/py_utils/logging_util_unittest.py |  2 +-
 .../py_vulcanize/py_vulcanize/fake_fs.py       | 18 +++++++++++++++---
 .../py_vulcanize/resource_loader.py            |  9 ++++++++-
 .../py_vulcanize/style_sheet_unittest.py       |  2 +-
 6 files changed, 41 insertions(+), 19 deletions(-)

diff --git a/src/third_party/catapult/common/py_trace_event/py_trace_event/trace_event_impl/log.py b/src/third_party/catapult/common/py_trace_event/py_trace_event/trace_event_impl/log.py
index 130d168385..082dd70117 100644
--- a/src/third_party/catapult/common/py_trace_event/py_trace_event/trace_event_impl/log.py
+++ b/src/third_party/catapult/common/py_trace_event/py_trace_event/trace_event_impl/log.py
@@ -133,9 +133,9 @@ def _write_header():
     )
   else:
     if _format == JSON:
-      _log_file.write('[')
+      _log_file.write(b'[')
     elif _format == JSON_WITH_METADATA:
-      _log_file.write('{"traceEvents": [\n')
+      _log_file.write(b'{"traceEvents": [\n')
     else:
       raise TraceException("Unknown format: %s" % _format)
     json.dump({
@@ -147,7 +147,7 @@ def _write_header():
         "name": "process_argv",
         "args": {"argv": sys.argv},
     }, _log_file)
-    _log_file.write('\n')
+    _log_file.write(b'\n')
 
 
 @_locked
@@ -227,7 +227,7 @@ def _write_cur_events():
       )
   elif _format in (JSON, JSON_WITH_METADATA):
     for e in _cur_events:
-      _log_file.write(",\n")
+      _log_file.write(b",\n")
       json.dump(e, _log_file)
   else:
     raise TraceException("Unknown format: %s" % _format)
@@ -243,9 +243,9 @@ def _write_footer():
     # been written in a special proto message.
     pass
   elif _format == JSON_WITH_METADATA:
-    _log_file.write('],\n"metadata": ')
+    _log_file.write(b'],\n"metadata": ')
     json.dump(_benchmark_metadata, _log_file)
-    _log_file.write('}')
+    _log_file.write(b'}')
   else:
     raise TraceException("Unknown format: %s" % _format)
 
diff --git a/src/third_party/catapult/common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer_unittest.py b/src/third_party/catapult/common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer_unittest.py
index 00dafa463c..088ac67d64 100644
--- a/src/third_party/catapult/common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer_unittest.py
+++ b/src/third_party/catapult/common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer_unittest.py
@@ -4,7 +4,10 @@
 # found in the LICENSE file.
 
 import unittest
-import StringIO
+try:
+  from StringIO import StringIO
+except ImportError:
+  from io import StringIO
 
 from py_trace_event.trace_event_impl import perfetto_trace_writer
 
@@ -19,7 +22,7 @@ class PerfettoTraceWriterTest(unittest.TestCase):
     perfetto_trace_writer.reset_global_state()
 
   def testWriteThreadDescriptorEvent(self):
-    result = StringIO.StringIO()
+    result = StringIO()
     perfetto_trace_writer.write_thread_descriptor_event(
         output=result,
         pid=1,
@@ -33,7 +36,7 @@ class PerfettoTraceWriterTest(unittest.TestCase):
     self.assertEqual(expected_output, result.getvalue())
 
   def testWriteTwoEvents(self):
-    result = StringIO.StringIO()
+    result = StringIO()
     perfetto_trace_writer.write_thread_descriptor_event(
         output=result,
         pid=1,
@@ -59,7 +62,7 @@ class PerfettoTraceWriterTest(unittest.TestCase):
     self.assertEqual(expected_output, result.getvalue())
 
   def testWriteMetadata(self):
-    result = StringIO.StringIO()
+    result = StringIO()
     perfetto_trace_writer.write_metadata(
         output=result,
         benchmark_start_time_us=1556716807306000,
@@ -79,7 +82,7 @@ class PerfettoTraceWriterTest(unittest.TestCase):
     self.assertEqual(expected_output, result.getvalue())
 
   def testWriteArgs(self):
-    result = StringIO.StringIO()
+    result = StringIO()
     perfetto_trace_writer.write_thread_descriptor_event(
         output=result,
         pid=1,
@@ -105,7 +108,7 @@ class PerfettoTraceWriterTest(unittest.TestCase):
     self.assertEqual(expected_output, result.getvalue())
 
   def testWriteChromeMetadata(self):
-    result = StringIO.StringIO()
+    result = StringIO()
     perfetto_trace_writer.write_chrome_metadata(
         output=result,
         clock_domain='FOO',
@@ -116,7 +119,7 @@ class PerfettoTraceWriterTest(unittest.TestCase):
     self.assertEqual(expected_output, result.getvalue())
 
   def testWriteClockSnapshot(self):
-    result = StringIO.StringIO()
+    result = StringIO()
     perfetto_trace_writer.write_clock_snapshot(
         output=result,
         tid=1,
diff --git a/src/third_party/catapult/common/py_utils/py_utils/logging_util_unittest.py b/src/third_party/catapult/common/py_utils/py_utils/logging_util_unittest.py
index eb26098c88..59e6107798 100644
--- a/src/third_party/catapult/common/py_utils/py_utils/logging_util_unittest.py
+++ b/src/third_party/catapult/common/py_utils/py_utils/logging_util_unittest.py
@@ -5,7 +5,7 @@ import logging
 import unittest
 
 try:
-  from six import StringIO
+  from StringIO import StringIO
 except ImportError:
   from io import StringIO
 
diff --git a/src/third_party/catapult/common/py_vulcanize/py_vulcanize/fake_fs.py b/src/third_party/catapult/common/py_vulcanize/py_vulcanize/fake_fs.py
index 40b01bb5ff..975045fcbb 100644
--- a/src/third_party/catapult/common/py_vulcanize/py_vulcanize/fake_fs.py
+++ b/src/third_party/catapult/common/py_vulcanize/py_vulcanize/fake_fs.py
@@ -13,6 +13,8 @@ import sys
 
 import six
 
+if six.PY3:
+  import builtins
 
 class WithableStringIO(six.StringIO):
 
@@ -33,7 +35,11 @@ class FakeFS(object):
 
     self._bound = False
     self._real_codecs_open = codecs.open
-    self._real_open = sys.modules['__builtin__'].open
+    if six.PY3:
+      self._real_open = builtins.open
+    else:
+      self._real_open = sys.modules['__builtin__'].open
+
     self._real_abspath = os.path.abspath
     self._real_exists = os.path.exists
     self._real_walk = os.walk
@@ -49,7 +55,10 @@ class FakeFS(object):
   def Bind(self):
     assert not self._bound
     codecs.open = self._FakeCodecsOpen
-    sys.modules['__builtin__'].open = self._FakeOpen
+    if six.PY3:
+      builtins.open = self._FakeOpen
+    else:
+      sys.modules['__builtin__'].open = self._FakeOpen
     os.path.abspath = self._FakeAbspath
     os.path.exists = self._FakeExists
     os.walk = self._FakeWalk
@@ -59,7 +68,10 @@ class FakeFS(object):
   def Unbind(self):
     assert self._bound
     codecs.open = self._real_codecs_open
-    sys.modules['__builtin__'].open = self._real_open
+    if six.PY3:
+      builtins.open = self._real_open
+    else:
+      sys.modules['__builtin__'].open = self._real_open
     os.path.abspath = self._real_abspath
     os.path.exists = self._real_exists
     os.walk = self._real_walk
diff --git a/src/third_party/catapult/common/py_vulcanize/py_vulcanize/resource_loader.py b/src/third_party/catapult/common/py_vulcanize/py_vulcanize/resource_loader.py
index 015adaa660..f3ae2fe0ba 100644
--- a/src/third_party/catapult/common/py_vulcanize/py_vulcanize/resource_loader.py
+++ b/src/third_party/catapult/common/py_vulcanize/py_vulcanize/resource_loader.py
@@ -6,6 +6,10 @@
 
 import codecs
 import os
+import six
+import sys
+if six.PY3:
+  import functools
 
 from py_vulcanize import module
 from py_vulcanize import style_sheet as style_sheet_module
@@ -59,7 +63,10 @@ class ResourceLoader(object):
       return None
 
     # Sort by length. Longest match wins.
-    candidate_paths.sort(lambda x, y: len(x) - len(y))
+    if six.PY3:
+      sorted(candidate_paths, key=functools.cmp_to_key(lambda x, y: len(x) - len(y)), reverse=True)
+    else:
+      candidate_paths.sort(lambda x, y: len(x) - len(y))
     longest_candidate = candidate_paths[-1]
     return resource_module.Resource(longest_candidate, absolute_path, binary)
 
diff --git a/src/third_party/catapult/common/py_vulcanize/py_vulcanize/style_sheet_unittest.py b/src/third_party/catapult/common/py_vulcanize/py_vulcanize/style_sheet_unittest.py
index 4ebc71d565..0d12a6f3c8 100644
--- a/src/third_party/catapult/common/py_vulcanize/py_vulcanize/style_sheet_unittest.py
+++ b/src/third_party/catapult/common/py_vulcanize/py_vulcanize/style_sheet_unittest.py
@@ -38,7 +38,7 @@ class StyleSheetUnittest(unittest.TestCase):
 .x .y {
     background-image: url(data:image/jpeg;base64,%s);
 }
-""" % base64.standard_b64encode('hello world'), inlined)
+""" % base64.standard_b64encode(b'hello world'), inlined)
 
   def testURLResolveFails(self):
     fs = fake_fs.FakeFS()

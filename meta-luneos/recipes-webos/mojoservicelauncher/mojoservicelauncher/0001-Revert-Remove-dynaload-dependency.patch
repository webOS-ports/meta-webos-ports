From 7db9ed375a512582a91849c3234f034334c05724 Mon Sep 17 00:00:00 2001
From: Herrie <Github.com@herrie.org>
Date: Wed, 20 Sep 2023 08:41:51 +0200
Subject: [PATCH 1/2] Revert "Remove dynaload dependency"

This reverts commit b156a6a70be5db25565d2e85f432c4389222876d.
---
 bootstrap-node.js | 42 +++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 41 insertions(+), 1 deletion(-)

diff --git a/bootstrap-node.js b/bootstrap-node.js
index 724966e..c1a2c19 100644
--- a/bootstrap-node.js
+++ b/bootstrap-node.js
@@ -1,4 +1,4 @@
-// Copyright (c) 2009-2020 LG Electronics, Inc.
+// Copyright (c) 2009-2018 LG Electronics, Inc.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -18,6 +18,43 @@ var fs = global['fs'] ? global['fs'] : require('fs');
 
 appController = undefined;
 
+function loadSource() {
+	try {
+		var files = JSON.parse(bootstrap.loadFile('sources.json', 'utf8'));
+		var len = files.length;
+		var i = 0;
+		for (; i < len; i++) {
+			if (!files[i].override) {
+				break;
+			}
+			MojoLoader.override(files[i].override);
+		}
+
+		var webos = global['webos'] ? global['webos'] : require('webos');
+		IMPORTS.mojoservice = global['mojolibname'] ? global['mojolibname'] : MojoLoader.require({name: 'mojoservice', version: '1.0'}).mojoservice;
+
+		for (; i < len; i++) {
+			var file = files[i];
+			file.source && webos.include(file.source);
+
+			if (file.library) {
+				var libname = MojoLoader.builtinLibName(file.library.name, file.library.version);
+				if (!global[libname]) {
+					IMPORTS[file.library.name] = MojoLoader.require(file.library)[file.library.name];
+				} else {
+					IMPORTS[file.library.name] = global[libname];
+				}
+			}
+		}
+	} catch (e) {
+		if (file) {
+			console.error('Loading failed in: ', file.source || file.library.name);
+		}
+		console.error(e.stack || e);
+		throw e;
+	}
+}
+
 function loadAndStart(paramsToScript, appId) {
 	var service_dir = paramsToScript[1];
 
@@ -66,6 +103,9 @@ function loadAndStart(paramsToScript, appId) {
 		if (mod.run) {
 			mod.run(appId);
 		}
+	} else if (fs.existsSync('sources.json')) { // mojoservice-based service
+		loadSource();
+		appController = new IMPORTS.mojoservice.AppController(paramsToScript);
 	} else {
 		console.error("Couldn't determine launch file for service path " + service_dir);
 		throw new Error("Couldn't determine launch file for service path " + service_dir);
-- 
2.41.0.windows.3


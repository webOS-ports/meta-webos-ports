From fdc91c78a882077710cf7bf140a2fcc4b040be7e Mon Sep 17 00:00:00 2001
From: Herrie <Github.com@herrie.org>
Date: Thu, 14 Sep 2023 12:01:30 +0200
Subject: [PATCH 3/8] nyx-modules: Add keys module

Add keys module

Signed-off-by: Herman van Hazendonk <github.com@herrie.org>
---
 src/keys/CMakeLists.txt  |  26 +++
 src/keys/device/keys.c   |  65 +++++++
 src/keys/emulator/keys.c | 165 +++++++++++++++++
 src/keys/keys_common.c   | 377 +++++++++++++++++++++++++++++++++++++++
 src/keys/keys_common.h   |  28 +++
 5 files changed, 661 insertions(+)
 create mode 100644 src/keys/CMakeLists.txt
 create mode 100644 src/keys/device/keys.c
 create mode 100644 src/keys/emulator/keys.c
 create mode 100644 src/keys/keys_common.c
 create mode 100644 src/keys/keys_common.h

diff --git a/src/keys/CMakeLists.txt b/src/keys/CMakeLists.txt
new file mode 100644
index 0000000..855c583
--- /dev/null
+++ b/src/keys/CMakeLists.txt
@@ -0,0 +1,26 @@
+# Copyright (c) 2010-2018 LG Electronics, Inc.
+# Copyright (c) 2018 Herman van Hazendonk <github.com@herrie.org>
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# SPDX-License-Identifier: Apache-2.0
+
+if(${WEBOS_TARGET_MACHINE_IMPL} STREQUAL emulator)
+	webos_build_nyx_module(KeysMain 
+						   SOURCES keys_common.c emulator/keys.c
+						   LIBRARIES ${GLIB2_LDFLAGS} ${PMLOG_LDFLAGS} ${NYXLIB_LDFLAGS} -lrt -lpthread)
+elseif(${WEBOS_TARGET_MACHINE_IMPL} STREQUAL hardware)
+	webos_build_nyx_module(KeysMain 
+						   SOURCES keys_common.c device/keys.c
+						   LIBRARIES ${GLIB2_LDFLAGS} ${PMLOG_LDFLAGS} ${NYXLIB_LDFLAGS} -lrt -lpthread)
+endif()
diff --git a/src/keys/device/keys.c b/src/keys/device/keys.c
new file mode 100644
index 0000000..d890a53
--- /dev/null
+++ b/src/keys/device/keys.c
@@ -0,0 +1,65 @@
+// Copyright (c) 2010-2018 LG Electronics, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+#include <stdbool.h>
+#include <dirent.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <linux/input.h>
+#include <errno.h>
+#include <poll.h>
+#include <glib.h>
+#include <stdio.h>
+
+#include <nyx/nyx_module.h>
+
+#include "../keys_common.h"
+
+enum {
+    VOLUME_DOWN,
+    VOLUME_UP,
+    POWER
+};
+
+int lookup_key(keys_device_t* d, uint16_t keyCode, int32_t keyValue,
+        nyx_key_type_t* key_type_out_ptr)
+{
+    int key = 0;
+    switch (keyCode) {
+    case KEY_HOMEPAGE:
+    case KEY_HOME:
+        key = NYX_KEYS_CUSTOM_KEY_HOME;
+        *key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+        break;
+    case KEY_POWER:
+        key = NYX_KEYS_CUSTOM_KEY_POWER_ON;
+        *key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+        break;
+    case KEY_VOLUMEUP:
+        key = NYX_KEYS_CUSTOM_KEY_VOL_UP;
+        *key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+        break;
+    case KEY_VOLUMEDOWN:
+        key = NYX_KEYS_CUSTOM_KEY_VOL_DOWN;
+        *key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+        break;
+    default:
+        break;
+    }
+
+    return key;
+}
diff --git a/src/keys/emulator/keys.c b/src/keys/emulator/keys.c
new file mode 100644
index 0000000..4b8968d
--- /dev/null
+++ b/src/keys/emulator/keys.c
@@ -0,0 +1,165 @@
+// Copyright (c) 2010-2018 LG Electronics, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+#include <stdbool.h>
+#include <dirent.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <linux/input.h>
+#include <errno.h>
+#include <poll.h>
+#include <glib.h>
+#include <stdio.h>
+
+#include <nyx/nyx_module.h>
+
+#include "../keys_common.h"
+
+enum
+{
+    F1 = 0x276C, /* Function keys */
+    F2 = 0x276D,
+    F3 = 0x276E,
+    F4 = 0x276F,
+    F5 = 0x2770,
+    F6 = 0x2771,
+    F7 = 0x2772,
+    F8 = 0x2773,
+    F9 = 0x2774,
+    F10 = 0x2775,
+    KEY_SYM = 0xf6,
+    KEY_ORANGE = 0x64
+};
+
+int lookup_key(keys_device_t *d, uint16_t keyCode, int32_t keyValue,
+                      nyx_key_type_t *key_type_out_ptr)
+{
+	int key = 0;
+
+	switch (keyCode)
+	{
+		case KEY_Q:
+			key = NYX_KEYS_CUSTOM_KEY_HOME;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		case KEY_HOMEPAGE:
+		case KEY_W:
+			key = NYX_KEYS_CUSTOM_KEY_HOT;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		case KEY_BACK:
+		case KEY_E:
+			key = NYX_KEYS_CUSTOM_KEY_BACK;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		case KEY_HOME:
+			key = NYX_KEYS_CUSTOM_KEY_HOME;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		case KEY_VOLUMEUP:
+			key = NYX_KEYS_CUSTOM_KEY_VOL_UP;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		case KEY_VOLUMEDOWN:
+			key = NYX_KEYS_CUSTOM_KEY_VOL_DOWN;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		case KEY_END:
+			key = NYX_KEYS_CUSTOM_KEY_POWER_ON;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		case KEY_PLAY:
+			key = NYX_KEYS_CUSTOM_KEY_MEDIA_PLAY;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		case KEY_PAUSE:
+			key = NYX_KEYS_CUSTOM_KEY_MEDIA_PAUSE;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		case KEY_STOP:
+			key = NYX_KEYS_CUSTOM_KEY_MEDIA_STOP;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		case KEY_NEXT:
+			key = NYX_KEYS_CUSTOM_KEY_MEDIA_NEXT;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		case KEY_PREVIOUS:
+			key = NYX_KEYS_CUSTOM_KEY_MEDIA_PREVIOUS;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		// add keyboard function keys
+		case KEY_SEARCH:
+			key = NYX_KEYS_CUSTOM_KEY_SEARCH;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		case KEY_BRIGHTNESSDOWN:
+			key = NYX_KEYS_CUSTOM_KEY_BRIGHTNESS_DOWN;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		case KEY_BRIGHTNESSUP:
+			key = NYX_KEYS_CUSTOM_KEY_BRIGHTNESS_UP;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		case KEY_MUTE:
+			key = NYX_KEYS_CUSTOM_KEY_VOL_MUTE;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		case KEY_REWIND:
+			key = NYX_KEYS_CUSTOM_KEY_MEDIA_REWIND;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		case KEY_FASTFORWARD:
+			key = NYX_KEYS_CUSTOM_KEY_MEDIA_FASTFORWARD;
+			*key_type_out_ptr = NYX_KEY_TYPE_CUSTOM;
+			break;
+
+		default:
+			break;
+	}
+
+	if (*key_type_out_ptr != NYX_KEY_TYPE_CUSTOM)
+	{
+		if (keyCode == KEY_LEFTSHIFT)
+		{
+			key = KEY_LEFTSHIFT;
+		}
+		else
+		{
+			key = keyCode;
+		}
+	}
+
+	return key;
+}
diff --git a/src/keys/keys_common.c b/src/keys/keys_common.c
new file mode 100644
index 0000000..5aeba78
--- /dev/null
+++ b/src/keys/keys_common.c
@@ -0,0 +1,377 @@
+// Copyright (c) 2010-2018 LG Electronics, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+#include <stdbool.h>
+#include <dirent.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <linux/input.h>
+#include <errno.h>
+#include <poll.h>
+#include <glib.h>
+#include <stdio.h>
+#include <pthread.h>
+#include <stdlib.h>
+#include <unistd.h>
+
+#include <nyx/nyx_module.h>
+#include <nyx/module/nyx_utils.h>
+#include <nyx/module/nyx_log.h>
+#include "msgid.h"
+
+#include "keys_common.h"
+
+NYX_DECLARE_MODULE(NYX_DEVICE_KEYS, "Keys");
+
+#define NYX_CONF_FILE           "/etc/nyx.conf"
+#define NYX_CONF_GROUP_KEYS     "module.keys"
+#define NYX_CONF_KEY_PATHS      "paths"
+
+#define MAX_INPUT_NODES         5
+
+int keypad_event_fd[MAX_INPUT_NODES];
+int num_keypad_event_fd = 0;
+int keypad_notifier_pipe_fds[2];
+pthread_t notifier_thread;
+
+/**
+ * This is modeled after the linux input event interface events.
+ * See linux/input.h for the original definition.
+ */
+typedef struct InputEvent
+{
+	struct timeval time;  /**< time event was generated */
+	uint16_t type;        /**< type of event, EV_ABS, EV_MSC, etc. */
+	uint16_t code;        /**< event code, ABS_X, ABS_Y, etc. */
+	int32_t value;        /**< event value: coordinate, intensity,etc. */
+} InputEvent_t;
+
+static gchar** read_input_paths(guint *num_paths)
+{
+    GError *error = NULL;
+    GKeyFile *keyfile = NULL;
+    gchar **result = NULL;
+
+    keyfile = g_key_file_new();
+    g_key_file_set_list_separator(keyfile, ';');
+
+    if (!g_key_file_load_from_file(keyfile, NYX_CONF_FILE, G_KEY_FILE_NONE, &error)) {
+        nyx_error(MSGID_NYX_MOD_KEYS_CONF_FILE_ERR, 0, "Failed to load conf file");
+        g_error_free(error);
+        goto cleanup;
+    }
+
+    if (!g_key_file_has_key(keyfile, NYX_CONF_GROUP_KEYS, NYX_CONF_KEY_PATHS, &error)) {
+        nyx_error(MSGID_NYX_MOD_KEYS_CONF_FILE_PATH_ERR, 0, "Failed to read input paths from conf file");
+        g_error_free(error);
+        goto cleanup;
+    }
+
+    result = g_key_file_get_string_list(keyfile, NYX_CONF_GROUP_KEYS, NYX_CONF_KEY_PATHS, num_paths, NULL);
+
+cleanup:
+    g_key_file_free(keyfile);
+    return result;
+}
+
+void *notifier_thread_func(void *user_data)
+{
+    struct pollfd fds[MAX_INPUT_NODES];
+    int event = 1, n;
+
+    for (n = 0; n < num_keypad_event_fd; n++) {
+        fds[n].fd = keypad_event_fd[n];
+        fds[n].events = POLLIN;
+    }
+
+    while (1) {
+        int ret_val = poll(fds, num_keypad_event_fd, -1);
+        if (ret_val <= 0)
+            continue;
+
+        nyx_debug(MSGID_NYX_MOD_KEYS_NEW_INPUT_DEV, 0, "Got new input event; waking up main thread ..");
+
+        /* wakeup main thread */
+        (void) write(keypad_notifier_pipe_fds[1], &event, sizeof(int));
+    }
+
+    return NULL;
+}
+
+
+static nyx_event_keys_t *keys_event_create()
+{
+	nyx_event_keys_t *event_ptr = (nyx_event_keys_t *) calloc(
+	                                  sizeof(nyx_event_keys_t), 1);
+
+	if (NULL == event_ptr)
+	{
+		return event_ptr;
+	}
+
+	((nyx_event_t *) event_ptr)->type = NYX_EVENT_KEYS;
+
+	return event_ptr;
+}
+
+nyx_error_t keys_release_event(nyx_device_t *d, nyx_event_t *e)
+{
+	if (NULL == d)
+	{
+		return NYX_ERROR_INVALID_HANDLE;
+	}
+
+	if (NULL == e)
+	{
+		return NYX_ERROR_INVALID_HANDLE;
+	}
+
+	nyx_event_keys_t *a = (nyx_event_keys_t *) e;
+
+	free(a);
+	return NYX_ERROR_NONE;
+}
+
+nyx_error_t nyx_module_open(nyx_instance_t i, nyx_device_t **d)
+{
+    guint num_paths;
+    gchar **input_paths;
+    gchar *path;
+    int fd, n;
+
+	if (NULL == d)
+	{
+	    nyx_error(MSGID_NYX_MOD_KEYS_OPEN_ERR, 0,"Keys device open error.");
+	    return NYX_ERROR_INVALID_VALUE;
+	}
+
+    input_paths = read_input_paths(&num_paths);
+
+    if (input_paths == NULL)
+    {
+        return NYX_ERROR_NOT_FOUND;
+    }
+
+    for (n = 0; n < num_paths; n++) {
+        path = input_paths[n];
+
+        if (num_keypad_event_fd == MAX_INPUT_NODES) {
+            nyx_warn(MSGID_NYX_MOD_KEYS_OPEN_ERR, 0, "Reached maximum number of input nodes. Skipping others.");
+            break;
+        }
+
+        nyx_debug(MSGID_NYX_MOD_KEYS_OPEN_ERR, 0, "Initializing input device %s", path);
+
+        fd = open(path, O_RDONLY);
+        if (fd < 0) {
+            nyx_error(MSGID_NYX_MOD_KEYS_OPEN_ERR, 0, "Could not open keypad event file at %s", path);
+            continue;
+        }
+
+        keypad_event_fd[num_keypad_event_fd] = fd;
+        num_keypad_event_fd++;
+    }
+
+    if (num_keypad_event_fd == 0)
+        return NYX_ERROR_NOT_FOUND;
+
+	keys_device_t *keys_device = (keys_device_t *) calloc(sizeof(keys_device_t),
+	                             1);
+
+	if (G_UNLIKELY(!keys_device))
+	{
+		nyx_error(MSGID_NYX_MOD_KEY_OUT_OF_MEM, 0, "Out of memory");
+		return NYX_ERROR_OUT_OF_MEMORY;
+	}
+
+	nyx_module_register_method(i, (nyx_device_t *) keys_device,
+	                           NYX_GET_EVENT_SOURCE_MODULE_METHOD, "keys_get_event_source");
+	nyx_module_register_method(i, (nyx_device_t *) keys_device,
+	                           NYX_GET_EVENT_MODULE_METHOD, "keys_get_event");
+	nyx_module_register_method(i, (nyx_device_t *) keys_device,
+	                           NYX_RELEASE_EVENT_MODULE_METHOD, "keys_release_event");
+
+	*d = (nyx_device_t *) keys_device;
+
+    notifier_thread = pthread_create(&notifier_thread, NULL, notifier_thread_func, NULL);
+    pipe2(&keypad_notifier_pipe_fds, 0);
+
+    return NYX_ERROR_NONE;
+
+fail_unlock_settings:
+
+    return NYX_ERROR_GENERIC;
+}
+
+nyx_error_t nyx_module_close(nyx_device_t *d)
+{
+	keys_device_t *keys_device = (keys_device_t *) d;
+
+	if (NULL == d)
+	{
+		return NYX_ERROR_INVALID_HANDLE;
+	}
+
+	if (keys_device->current_event_ptr)
+	{
+		keys_release_event(d, (nyx_event_t *) keys_device->current_event_ptr);
+	}
+
+	nyx_debug(MSGID_NYX_MOD_KEYS_OPEN_ERR, 0, "Freeing keys %p", d);
+	free(d);
+
+	return NYX_ERROR_NONE;
+}
+
+nyx_error_t keys_get_event_source(nyx_device_t *d, int *f)
+{
+	if (NULL == d)
+	{
+		return NYX_ERROR_INVALID_HANDLE;
+	}
+
+	if (NULL == f)
+	{
+		return NYX_ERROR_INVALID_VALUE;
+	}
+
+    *f = keypad_notifier_pipe_fds[0];
+
+    return NYX_ERROR_NONE;
+}
+
+int read_input_event(InputEvent_t* pEvents, int maxEvents)
+{
+    int numEvents = 0;
+    int rd = 0, n, event;
+    struct pollfd fds[MAX_INPUT_NODES];
+
+	if (pEvents == NULL)
+	{
+		return -1;
+	}
+
+    /* clear notifier pipe */
+    (void) read(keypad_notifier_pipe_fds[0], &event, sizeof(int));
+
+    for (n = 0; n < num_keypad_event_fd; n++) {
+        fds[n].fd = keypad_event_fd[n];
+        fds[n].events = POLLIN;
+    }
+
+    int ret_val = poll(fds, num_keypad_event_fd, 0);
+    if (ret_val <= 0)
+        return 0;
+
+    for (n = 0; n < num_keypad_event_fd; n++)
+    {
+        if (fds[n].revents & POLLIN) 
+        {
+            /* keep looping if get EINTR */
+            for (;;) 
+            {
+                rd = read(fds[n].fd, pEvents, sizeof(InputEvent_t) * maxEvents);
+
+                if (rd > 0) 
+                {
+                    numEvents += rd / sizeof(InputEvent_t);
+                    break;
+                }
+                else if (rd < 0 && errno != EINTR) 
+                {
+    				nyx_error(MSGID_NYX_MOD_KEY_EVENT_READ_ERR, 0, "Failed to read events from keypad event file");
+                    break;
+                }
+            }
+        }
+    }
+
+	return numEvents;
+}
+
+#define MAX_EVENTS      64
+
+nyx_error_t keys_get_event(nyx_device_t *d, nyx_event_t **e)
+{
+	static InputEvent_t raw_events[MAX_EVENTS];
+
+	static int event_count = 0;
+	static int event_iter = 0;
+
+    int rd = 0;
+
+	keys_device_t *keys_device = (keys_device_t *) d;
+
+	/*
+	 * Event bookkeeping...
+	 */
+	if (!event_iter)
+	{
+		event_count = read_input_event(raw_events, MAX_EVENTS);
+		keys_device->current_event_ptr = NULL;
+	}
+
+	if (keys_device->current_event_ptr == NULL)
+	{
+		/*
+		 * let's allocate new event and hold it here.
+		 */
+		keys_device->current_event_ptr = keys_event_create();
+	}
+
+	for (; event_iter < event_count;)
+	{
+		InputEvent_t *input_event_ptr;
+		input_event_ptr = &raw_events[event_iter];
+		event_iter++;
+
+		if (input_event_ptr->type == EV_KEY)
+		{
+			keys_device->current_event_ptr->key_type = NYX_KEY_TYPE_STANDARD;
+			keys_device->current_event_ptr->key = lookup_key(keys_device,
+			                                      input_event_ptr->code, input_event_ptr->value,
+			                                      &keys_device->current_event_ptr->key_type);
+		}
+		else
+		{
+			continue;
+		}
+
+		keys_device->current_event_ptr->key_is_press
+		    = (input_event_ptr->value) ? true : false;
+		keys_device->current_event_ptr->key_is_auto_repeat
+		    = (input_event_ptr->value > 1) ? true : false;
+
+		*e = (nyx_event_t *) keys_device->current_event_ptr;
+		keys_device->current_event_ptr = NULL;
+
+		/*
+		 * Generated event, bail out and let the caller know.
+		 */
+		if (NULL != *e)
+		{
+			break;
+		}
+	}
+
+	if (event_iter >= event_count)
+	{
+		event_iter = 0;
+	}
+
+	return NYX_ERROR_NONE;
+}
diff --git a/src/keys/keys_common.h b/src/keys/keys_common.h
new file mode 100644
index 0000000..c5cad6f
--- /dev/null
+++ b/src/keys/keys_common.h
@@ -0,0 +1,28 @@
+// Copyright (c) 2010-2018 LG Electronics, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+#ifndef KEYS_COMMON_H_
+#define KEYS_COMMON_H_
+
+typedef struct {
+    nyx_device_t _parent;
+    nyx_event_keys_t* current_event_ptr;
+} keys_device_t;
+
+int lookup_key(keys_device_t* d, uint16_t keyCode, int32_t keyValue,
+        nyx_key_type_t* key_type_out_ptr);
+
+#endif
-- 
2.41.0.windows.3


From a1949211307cee07c90812af9939976758eeb0b1 Mon Sep 17 00:00:00 2001
From: Herrie <Github.com@herrie.org>
Date: Thu, 14 Sep 2023 12:01:49 +0200
Subject: [PATCH] nyx-modules: Add LED module

Add LED module

Signed-off-by: Herman van Hazendonk <github.com@herrie.org>
---
Upstream-Status: Inappropriate [LuneOS specific]

 src/led_controller/CMakeLists.txt   |  23 +++
 src/led_controller/led_controller.c | 262 ++++++++++++++++++++++++++++
 2 files changed, 285 insertions(+)
 create mode 100644 src/led_controller/CMakeLists.txt
 create mode 100644 src/led_controller/led_controller.c

diff --git a/src/led_controller/CMakeLists.txt b/src/led_controller/CMakeLists.txt
new file mode 100644
index 0000000..78c1d3b
--- /dev/null
+++ b/src/led_controller/CMakeLists.txt
@@ -0,0 +1,23 @@
+# Copyright (c) 2010-2018 LG Electronics, Inc.
+# Copyright (c) 2013 Simon Busch <morphis@gravedo.de>
+# Copyright (c) 2018 Herman van Hazendonk <github.com@herrie.org>
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# SPDX-License-Identifier: Apache-2.0
+
+include_directories(.)
+
+webos_build_nyx_module(MicroControllerLEDsDefault
+		       SOURCES led_controller.c
+		       LIBRARIES ${GLIB2_LDFLAGS} ${PMLOG_LDFLAGS} ${NYXLIB_LDFLAGS} ${UDEV_LDFLAGS} -lrt -lpthread)
diff --git a/src/led_controller/led_controller.c b/src/led_controller/led_controller.c
new file mode 100644
index 0000000..bb0a714
--- /dev/null
+++ b/src/led_controller/led_controller.c
@@ -0,0 +1,262 @@
+// Copyright (c) 2010-2018 LG Electronics, Inc.
+// Copyright (c) 2012 Simon Busch <morphis@gravedo.de>
+// Copyright (c) 2018 Herman van Hazendonk <github.com@herrie.org>
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+#include <string.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <stdio.h>
+#include <stdbool.h>
+#include <pthread.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#include <glib.h>
+#include <libudev.h>
+
+#include <nyx/nyx_module.h>
+#include <nyx/module/nyx_utils.h>
+#include <nyx/module/nyx_log.h>
+#include "msgid.h"
+
+NYX_DECLARE_MODULE(NYX_DEVICE_LED_CONTROLLER, "LedControllers");
+
+static const char *backlight_max_brightness_path = NULL;
+static const char *backlight_brightness_path = NULL;
+
+static const char* backlight_device_by_type(struct udev *udev, struct udev_list_entry *devices, const char *type)
+{
+    const char *path = NULL;
+    const char *device_type = NULL;
+    struct udev_list_entry *l;
+    struct udev_device *device;
+
+    for (l = devices; l != NULL; l = udev_list_entry_get_next(l)) {
+        device = udev_device_new_from_syspath(udev, udev_list_entry_get_name(l));
+        if (device == NULL)
+            continue;
+
+        device_type = udev_device_get_sysattr_value(device, "type");
+        if (g_strcmp0(device_type, type) == 0) {
+            path = g_strdup(udev_device_get_syspath(device));
+            udev_device_unref(device);
+            break;
+        }
+
+        udev_device_unref(device);
+    }
+
+    return path;
+}
+
+static const char* find_backlight_device(void)
+{
+    struct udev *udev;
+    struct udev_enumerate *enumerator;
+    struct udev_list_entry *devices;
+    const char *path = NULL;
+    struct udev_device *device;
+
+    udev = udev_new();
+    if (!udev) {
+        nyx_error(MSGID_NYX_MOD_UDEV_ERR, 0, "Could not initialize udev component");
+        return NULL;
+    }
+
+    enumerator = udev_enumerate_new(udev);
+    udev_enumerate_add_match_subsystem(enumerator, "backlight");
+    udev_enumerate_scan_devices(enumerator);
+
+    devices = udev_enumerate_get_list_entry(enumerator);
+    if (devices != NULL) {
+        path = backlight_device_by_type(udev, devices, "firmware");
+        if (path)
+            goto out;
+
+        path = backlight_device_by_type(udev, devices, "platform");
+        if (path)
+            goto out;
+
+        path = backlight_device_by_type(udev, devices, "raw");
+        if (path)
+            goto out;
+    }
+    else {
+        nyx_error(MSGID_NYX_MOD_LED_NODEVICE_ERR, 0, "Did not find any devices matching the backlight subsystem");
+    }
+
+out:
+    udev_enumerate_unref(enumerator);
+    udev_unref(udev);
+
+    return path;
+}
+
+nyx_error_t nyx_module_open (nyx_instance_t i, nyx_device_t** d)
+{
+    const char *backlight_path = NULL;
+
+    nyx_device_t *nyxDev = (nyx_device_t*)calloc(sizeof(nyx_device_t), 1);
+    if (NULL == nyxDev)
+        return NYX_ERROR_OUT_OF_MEMORY;
+
+    nyx_module_register_method(i, (nyx_device_t*)nyxDev, NYX_LED_CONTROLLER_EXECUTE_EFFECT_MODULE_METHOD,
+        "led_controller_execute_effect");
+
+    nyx_module_register_method(i, (nyx_device_t*)nyxDev, NYX_LED_CONTROLLER_GET_STATE_MODULE_METHOD,
+        "led_controller_get_state");
+
+    backlight_path = find_backlight_device();
+    if (!backlight_path) {
+        nyx_error(MSGID_NYX_MOD_LED_NODEVICE_ERR, 0, "Could not find a valid backlight device");
+        return NYX_ERROR_DEVICE_UNAVAILABLE;
+    }
+
+    backlight_max_brightness_path = g_build_filename(backlight_path, "max_brightness", NULL);
+    backlight_brightness_path = g_build_filename(backlight_path, "brightness", NULL);
+
+    *d = (nyx_device_t*)nyxDev;
+
+    return NYX_ERROR_NONE;
+}
+
+nyx_error_t nyx_module_close (nyx_device_t* d)
+{
+    free(d);
+
+    if (backlight_max_brightness_path) {
+        free(backlight_max_brightness_path);
+        backlight_max_brightness_path = 0;
+    }
+
+    if (backlight_brightness_path) {
+        free(backlight_brightness_path);
+        backlight_brightness_path = 0;
+    }
+
+    return NYX_ERROR_NONE;
+}
+
+static int FileGetInt(const char *path, int *ret_data)
+{
+    GError *gerror = NULL;
+    char *contents = NULL;
+    char *endptr;
+    gsize len;
+    long int val;
+
+    if (!path || !g_file_get_contents(path, &contents, &len, &gerror)) {
+        if (gerror) {
+            nyx_critical(MSGID_NYX_MOD_LED_OPENFILE_ERR, 0, "%s: %s", __FUNCTION__, gerror->message);
+            g_error_free(gerror);
+        }
+        return -1;
+    }
+
+    val = strtol(contents, &endptr, 10);
+    if (endptr == contents) {
+        nyx_critical(MSGID_NYX_MOD_LED_FILE_CONTENT_ERR, 0, "%s: Invalid input in %s.",
+            __FUNCTION__, path);
+        goto end;
+    }
+
+    if (ret_data)
+        *ret_data = val;
+end:
+    g_free(contents);
+    return 0;
+}
+
+static int FileWriteInt(const char *path, int value)
+{
+    FILE *fp;
+
+    fp = fopen(path, "w");
+    if (fp == NULL)
+        return -1;
+
+    fprintf(fp, "%i", value);
+    fclose(fp);
+
+    return 0;
+}
+
+static nyx_error_t handle_backlight_effect(nyx_device_handle_t handle, nyx_led_controller_effect_t effect)
+{
+    int max_brightness, brightness;
+    int value, display_enabled;
+    nyx_callback_status_t status = NYX_CALLBACK_STATUS_DONE;
+
+    switch(effect.required.effect)
+    {
+    case NYX_LED_CONTROLLER_EFFECT_LED_SET:
+        if (FileGetInt(backlight_max_brightness_path, &max_brightness) < 0) {
+            status = NYX_CALLBACK_STATUS_FAILED;
+            goto done;
+        }
+
+        value = 0;
+        if (effect.backlight.brightness_lcd >= 0)
+            value = (int)((max_brightness * effect.backlight.brightness_lcd) / 100.0);
+
+        if (FileWriteInt(backlight_brightness_path, value) < 0) {
+            status = NYX_CALLBACK_STATUS_FAILED;
+            goto done;
+        }
+
+        break;
+    default:
+        break;
+    }
+
+done:
+    effect.backlight.callback(handle, status, effect.backlight.callback_context);
+
+    return NYX_ERROR_NONE;
+}
+
+nyx_error_t led_controller_execute_effect(nyx_device_handle_t handle, nyx_led_controller_effect_t effect)
+{
+    switch (effect.required.led) {
+    case NYX_LED_CONTROLLER_BACKLIGHT_LEDS:
+        return handle_backlight_effect(handle, effect);
+    default:
+        break;
+    }
+
+    return NYX_ERROR_DEVICE_UNAVAILABLE;
+}
+
+nyx_error_t led_controller_get_state(nyx_device_handle_t handle, nyx_led_controller_led_t led, nyx_led_controller_state_t *state)
+{
+    int brightness = 0;
+
+    switch (led) {
+    case NYX_LED_CONTROLLER_BACKLIGHT_LEDS:
+        if (FileGetInt(backlight_brightness_path, &brightness) < 0)
+            return NYX_ERROR_DEVICE_UNAVAILABLE;
+
+        *state = brightness > 0 ? NYX_LED_CONTROLLER_STATE_ON : NYX_LED_CONTROLLER_STATE_OFF;
+
+        return NYX_ERROR_NONE;
+    default:
+        break;
+    }
+
+    return NYX_ERROR_DEVICE_UNAVAILABLE;
+}

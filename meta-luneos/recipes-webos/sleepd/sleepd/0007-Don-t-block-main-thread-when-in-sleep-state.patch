From 6fe93742a9999f912a9151dbceb7e897f0b62796 Mon Sep 17 00:00:00 2001
From: Herman van Hazendonk <github.com@herrie.org>
Date: Fri, 5 Jul 2019 08:39:33 +0200
Subject: [PATCH] Don't block main thread when in sleep state

When working with synchronous suspend/resume it's fine to block the other thread from
processing but not when we're working asynchronous. Especially when we're in a low power
state and the activity manager requests a activity to be started we currently deny that
instead of of blocking the main thread until the device has left the low power state and
is back to normal operations. This can be improved later to allow certain activities also
in low power mode to get a better battery lifetime.

Signed-off-by: Simon Busch <morphis@gravedo.de>
Signed-off-by: Herman van Hazendonk <github.com@herrie.org>
---
Upstream-Status: Inappropriate [LuneOS specific]

 src/alarms/timeout_alarm.c | 7 +++++++
 src/pwrevents/activity.c   | 6 ++++++
 2 files changed, 13 insertions(+)

diff --git a/src/alarms/timeout_alarm.c b/src/alarms/timeout_alarm.c
index 9b1f655..06c8caa 100644
--- a/src/alarms/timeout_alarm.c
+++ b/src/alarms/timeout_alarm.c
@@ -45,6 +45,7 @@
 #include "sleepd_config.h"
 #include "init.h"
 #include "timesaver.h"
+#include "suspend.h"
 
 #define LOG_DOMAIN "ALARMS-TIMEOUT: "
 
@@ -164,7 +165,13 @@ static void _update_timeouts(void);
 static void _rtc_alarm_fired(nyx_device_handle_t handle,
                              nyx_callback_status_t status, void *data)
 {
+    SLEEPDLOG_DEBUG("RTC alarm fired");
+
+    TriggerResume("rtc", kPowerEventNone);
+
+#if 0
     _update_timeouts();
+#endif
 }
 
 
diff --git a/src/pwrevents/activity.c b/src/pwrevents/activity.c
index 55e7306..191b22d 100644
--- a/src/pwrevents/activity.c
+++ b/src/pwrevents/activity.c
@@ -687,7 +687,9 @@ bool
 PwrEventFreezeActivities(struct timespec *now)
 {
     bool result = true;
+#if 0
     pthread_mutex_lock(&activity_mutex);
+#endif
 
     if (_activity_obtain_min_unlocked(now) != NULL)
     {
@@ -697,7 +699,9 @@ PwrEventFreezeActivities(struct timespec *now)
     {
         gFrozen = true;
     }
+#if 0
     pthread_mutex_unlock(&activity_mutex);
+#endif
 
     return result;
 }
@@ -710,7 +714,9 @@ void
 PwrEventThawActivities(void)
 {
     gFrozen = false;
+#if 0
     pthread_mutex_unlock(&activity_mutex);
+#endif
 }
 
 INIT_FUNC(INIT_FUNC_EARLY, _activity_init);

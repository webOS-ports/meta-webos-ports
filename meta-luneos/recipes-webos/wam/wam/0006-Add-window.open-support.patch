From 9e2877a3a1d192bd12768e3ad919db484a3d53c0 Mon Sep 17 00:00:00 2001
From: Christophe Chapuis <chris.chapuis@gmail.com>
Date: Wed, 23 Mar 2022 16:26:18 +0000
Subject: [PATCH 2/2] Add window.open support

Signed-off-by: Christophe Chapuis <chris.chapuis@gmail.com>
---
 src/core/web_app_manager.cc                   | 44 +++++++++++++++++++
 src/core/web_app_manager.h                    |  6 +++
 src/platform/webengine/blink_web_view.cc      | 39 ++++++++++++++++
 src/platform/webengine/blink_web_view.h       |  3 ++
 src/platform/webengine/web_page_blink.cc      | 18 +++++++-
 src/platform/webengine/web_page_blink.h       |  2 +
 .../webengine/web_page_blink_delegate.h       |  5 +++
 7 files changed, 116 insertions(+), 1 deletion(-)

diff --git a/src/core/web_app_manager.cc b/src/core/web_app_manager.cc
index dbfa2f8..4de3831 100644
--- a/src/core/web_app_manager.cc
+++ b/src/core/web_app_manager.cc
@@ -353,6 +353,50 @@ WebAppBase* WebAppManager::OnLaunchUrl(
   return app;
 }
 
+void WebAppManager::CreateWindowForAppPage(const std::string& win_type,
+                                           std::shared_ptr<ApplicationDescription> app_desc,
+                                           const std::string& args,
+                                           const std::string& launching_app_id,
+                                           WebPageBase* page) {
+  
+  std::string instance_id = GenerateInstanceId();
+  
+  WebAppFactoryManager* factory = GetWebAppFactory();
+  WebAppBase* app = factory->CreateWebApp(win_type.c_str(), app_desc,
+                                          app_desc->SubType().c_str());
+
+  if (app) {
+    // set use launching time optimization true while app loading.
+    page->SetUseLaunchOptimization(true);
+
+    if (win_type == kWtFloating || win_type == kWtCard)
+      page->SetEnableBackgroundRun(app_desc->IsEnableBackgroundRun());
+
+    app->SetAppDescription(app_desc);
+    app->SetAppProperties(args);
+    app->SetInstanceId(instance_id);
+    app->SetLaunchingAppId(launching_app_id);
+    if (web_app_manager_config_->IsCheckLaunchTimeEnabled())
+      app->StartLaunchTimer();
+    app->Attach(page);
+    app->SetPreloadState(args);
+
+    page->Load();
+    WebPageAdded(page);
+
+    app_list_.push_back(app);
+
+    if (app_version_.find(app_desc->Id()) != app_version_.end()) {
+      if (app_version_[app_desc->Id()] != app_desc->Version()) {
+        app->SetNeedReload(true);
+        app_version_[app_desc->Id()] = app_desc->Version();
+      }
+    } else {
+      app_version_[app_desc->Id()] = app_desc->Version();
+    }
+  }
+}
+
 void WebAppManager::ForceCloseAppInternal(WebAppBase* app) {
   app->SetKeepAlive(false);
   CloseAppInternal(app);
diff --git a/src/core/web_app_manager.h b/src/core/web_app_manager.h
index 48bbd0b..a209c18 100644
--- a/src/core/web_app_manager.h
+++ b/src/core/web_app_manager.h
@@ -134,6 +134,12 @@ class WebAppManager {
   void WebPageRemoved(WebPageBase* page);
   void RemoveWebAppFromWebProcessInfoMap(const std::string& app_id);
 
+  void CreateWindowForAppPage(const std::string& win_type,
+                              std::shared_ptr<ApplicationDescription> app_desc,
+                              const std::string& args,
+                              const std::string& launching_app_id,
+                              WebPageBase* page);
+                              
   void AppDeleted(WebAppBase* app);
   void PostRunningAppList();
   std::string GenerateInstanceId();
diff --git a/src/platform/webengine/blink_web_view.cc b/src/platform/webengine/blink_web_view.cc
index 4e42534..38221a9 100644
--- a/src/platform/webengine/blink_web_view.cc
+++ b/src/platform/webengine/blink_web_view.cc
@@ -18,6 +18,23 @@
 
 #include "log_manager.h"
 #include "web_page_blink_delegate.h"
+#include "web_view_factory.h"
+#include "web_view_impl.h"
+
+class WebViewFactoryExistingWebContents: public WebViewFactory {
+ public:
+  WebViewFactoryExistingWebContents(WebView* webViewNewContents):
+    webViewNewContents_(webViewNewContents) {}
+ 
+  WebView* CreateWebView() override {
+    WebView *newView = webViewNewContents_;
+    webViewNewContents_ = nullptr; // if CreateWebView is called again, don't reuse this WebView
+    if (!newView) newView = new WebViewImpl(std::make_unique<BlinkWebView>());
+    return newView;
+  }
+ private:
+  WebView* webViewNewContents_;
+};
 
 BlinkWebView::BlinkWebView(bool do_initialize)
     : WebViewBase::WebViewBase(),
@@ -25,6 +42,12 @@ BlinkWebView::BlinkWebView(bool do_initialize)
       progress_(0),
       user_script_executed_(false) {}
 
+BlinkWebView::BlinkWebView(neva_app_runtime::WebView *webview)
+    : WebViewBase::WebViewBase(webview),
+      delegate_(nullptr),
+      progress_(0),
+      user_script_executed_(false) {}
+
 void BlinkWebView::AddUserScript(const std::string& script) {
   user_scripts_.push_back(script);
 }
@@ -237,3 +260,19 @@ void BlinkWebView::DidErrorPageLoadedFromNetErrorHelper() {
     return;
   return delegate_->DidErrorPageLoadedFromNetErrorHelper();
 }
+
+content::WebContents *BlinkWebView::CreateWindowForWebView(const std::string& newUrl, neva_app_runtime::WebView *webview)
+{
+  if (!delegate_)
+    return nullptr;
+    
+  // create a new factory for this new_contents
+  WebView* webViewNewContents = new WebViewImpl(std::make_unique<BlinkWebView>(webview));
+  std::unique_ptr<WebViewFactory> dedicatedFactory(new WebViewFactoryExistingWebContents(webViewNewContents));
+  // create a new WebPage using this factory
+  WebView *newWebView = delegate_->CreateWindow(newUrl, std::move(dedicatedFactory));
+
+  return newWebView->GetWebContents();
+}
+
+
diff --git a/src/platform/webengine/blink_web_view.h b/src/platform/webengine/blink_web_view.h
index 0b50e3f..91ec036 100644
--- a/src/platform/webengine/blink_web_view.h
+++ b/src/platform/webengine/blink_web_view.h
@@ -28,6 +28,7 @@ class BlinkWebView : public webos::WebViewBase {
  public:
   // TODO need to refactor both constructors (here & pluggables)
   BlinkWebView(bool doInitialize = true);
+  BlinkWebView(neva_app_runtime::WebView *webview);
   BlinkWebView(const std::string& group) : BlinkWebView() {}
 
   void AddUserScript(const std::string& script);
@@ -78,6 +79,8 @@ class BlinkWebView : public webos::WebViewBase {
   void LoadVisuallyCommitted() override;
   void DidResumeDOM() override;
   void DidErrorPageLoadedFromNetErrorHelper() override;
+  
+  content::WebContents *CreateWindowForWebView(const std::string& newUrl, neva_app_runtime::WebView *webview) override;
 
  private:
   WebPageBlinkDelegate* delegate_;
diff --git a/src/platform/webengine/web_page_blink.cc b/src/platform/webengine/web_page_blink.cc
index 73a7e4e..a9ffe74 100644
--- a/src/platform/webengine/web_page_blink.cc
+++ b/src/platform/webengine/web_page_blink.cc
@@ -29,9 +30,11 @@
 #include "palm_system_blink.h"
 #include "url.h"
 #include "utils.h"
+#include "window_types.h"
 #include "web_app_manager_config.h"
 #include "web_app_manager_tracer.h"
 #include "web_app_manager_utils.h"
+#include "web_app_manager.h"
 #include "web_page_blink_observer.h"
 #include "web_page_observer.h"
 #include "web_view.h"
@@ -125,7 +128,7 @@ void WebPageBlink::Init() {
   page_private_->page_view_->SetDisallowScrollingInMainFrame(true);
   page_private_->page_view_->SetDoNotTrack(app_desc_->DoNotTrack());
   page_private_->page_view_->SetJavascriptCanOpenWindows(true);
-  page_private_->page_view_->SetSupportsMultipleWindows(false);
+  page_private_->page_view_->SetSupportsMultipleWindows(true);
   page_private_->page_view_->SetCSSNavigationEnabled(true);
   page_private_->page_view_->SetV8DateUseSystemLocaloffset(false);
   page_private_->page_view_->SetLocalStorageEnabled(true);
@@ -1241,3 +1244,16 @@ bool WebPageBlink::AllowMouseOnOffEvent() const {
 void WebPageBlink::SetObserver(WebPageBlinkObserver* observer) {
   observer_ = observer;
 }
+
+WebView* WebPageBlink::CreateWindow(const std::string& newUrl, std::unique_ptr<WebViewFactory> dedicatedFactory) {
+  // create a new page, with a factory associated with the new content
+  WebPageBlink *newPage = new WebPageBlink(newUrl, app_desc_, "{}", std::move(dedicatedFactory));
+  newPage->Init();
+
+  // Create a new webApp instance for this page
+  WebAppManager *webAppMgr = WebAppManager::Instance();
+  webAppMgr->CreateWindowForAppPage(kWtCard, app_desc_, "{}", app_id_, newPage);
+  
+  return newPage->PageView();
+}
+
diff --git a/src/platform/webengine/web_page_blink.h b/src/platform/webengine/web_page_blink.h
index 96c7917..18f88b3 100644
--- a/src/platform/webengine/web_page_blink.h
+++ b/src/platform/webengine/web_page_blink.h
@@ -157,6 +157,8 @@ class WebPageBlink : public WebPageBase, public WebPageBlinkDelegate {
   void DeactivateRendererCompositor() override;
 
   void DidResumeDOM() override;
+  
+  WebView* CreateWindow(const std::string& newUrl, std::unique_ptr<WebViewFactory> dedicatedFactory) override;
 
   // Timer callback
   void TimeoutCloseCallback();
diff --git a/src/platform/webengine/web_page_blink_delegate.h b/src/platform/webengine/web_page_blink_delegate.h
index 1d48358..c590719 100644
--- a/src/platform/webengine/web_page_blink_delegate.h
+++ b/src/platform/webengine/web_page_blink_delegate.h
@@ -19,6 +19,10 @@
 
 #include <string>
 #include <vector>
+#include <memory>
+
+class WebView;
+class WebViewFactory;
 
 class WebPageBlinkDelegate {
  public:
@@ -62,6 +66,7 @@ class WebPageBlinkDelegate {
   virtual bool AllowMouseOnOffEvent() const = 0;
   virtual void DidResumeDOM() {}
   virtual void DidErrorPageLoadedFromNetErrorHelper() = 0;
+  virtual WebView* CreateWindow(const std::string& newUrl, std::unique_ptr<WebViewFactory> dedicatedFactory) = 0;
 };
 
 #endif  // PLATFORM_WEBENGINE_WEB_PAGE_BLINK_DELEGATE_H_
-- 
2.17.1


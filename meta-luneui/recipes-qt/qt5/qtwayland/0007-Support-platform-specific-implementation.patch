From 0357ce626ca46f6689ac27c601c38a09e0182a04 Mon Sep 17 00:00:00 2001
From: Elvis Lee <kwangwoong.lee@lge.com>
Date: Tue, 21 May 2019 17:41:02 +0300
Subject: [PATCH] Add platform cursor support

Change-Id: Ief140b5b4182cef8aba18485a2b657a6c4f99191

---
 src/client/qwaylandcursor_p.h      |  4 +--
 src/client/qwaylanddisplay.cpp     |  4 +--
 src/client/qwaylanddisplay_p.h     |  3 ++
 src/client/qwaylandinputdevice_p.h |  2 +-
 src/client/qwaylandintegration.cpp | 45 ++++++++++++++++++++++--------
 src/client/qwaylandintegration_p.h | 14 ++++++++--
 src/client/qwaylandscreen_p.h      |  6 +---
 src/client/qwaylandwindow_p.h      |  3 +-
 8 files changed, 56 insertions(+), 25 deletions(-)

diff --git a/src/client/qwaylandcursor_p.h b/src/client/qwaylandcursor_p.h
index 751ffa68..27ce685a 100644
--- a/src/client/qwaylandcursor_p.h
+++ b/src/client/qwaylandcursor_p.h
@@ -77,7 +77,7 @@ public:
     ~QWaylandCursorTheme();
     ::wl_cursor *cursor(Qt::CursorShape shape);
 
-private:
+protected:
     enum WaylandCursor {
         ArrowCursor = Qt::ArrowCursor,
         UpArrowCursor,
@@ -130,7 +130,7 @@ public:
 
     static QSharedPointer<QWaylandBuffer> cursorBitmapBuffer(QWaylandDisplay *display, const QCursor *cursor);
 
-private:
+protected:
     QWaylandDisplay *mDisplay = nullptr;
     QPoint mLastPos;
 };
diff --git a/src/client/qwaylanddisplay.cpp b/src/client/qwaylanddisplay.cpp
index fe094f6f..1a2ee185 100644
--- a/src/client/qwaylanddisplay.cpp
+++ b/src/client/qwaylanddisplay.cpp
@@ -342,7 +342,7 @@ void QWaylandDisplay::registry_global(uint32_t id, const QString &interface, uin
     struct ::wl_registry *registry = object();
 
     if (interface == QStringLiteral("wl_output")) {
-        mWaitingScreens << new QWaylandScreen(this, version, id);
+        mWaitingScreens << mWaylandIntegration->createPlatformScreen(this, version, id);
     } else if (interface == QStringLiteral("wl_compositor")) {
         mCompositorVersion = qMin((int)version, 3);
         mCompositor.init(registry, id, mCompositorVersion);
@@ -630,7 +630,7 @@ QWaylandInputDevice *QWaylandDisplay::defaultInputDevice() const
 QWaylandCursor *QWaylandDisplay::waylandCursor()
 {
     if (!mCursor)
-        mCursor.reset(new QWaylandCursor(this));
+        mCursor.reset(mWaylandIntegration->createPlatformCursor(this));
     return mCursor.data();
 }
 
diff --git a/src/client/qwaylanddisplay_p.h b/src/client/qwaylanddisplay_p.h
index 188e9131..49e40b3d 100644
--- a/src/client/qwaylanddisplay_p.h
+++ b/src/client/qwaylanddisplay_p.h
@@ -207,6 +207,9 @@ public:
     void setLastInputDevice(QWaylandInputDevice *device, uint32_t serial, QWaylandWindow *window);
 
     bool isWindowActivated(const QWaylandWindow *window);
+
+    QWaylandIntegration *integration() { return mWaylandIntegration; }
+
     void handleWindowActivated(QWaylandWindow *window);
     void handleWindowDeactivated(QWaylandWindow *window);
     void handleKeyboardFocusChanged(QWaylandInputDevice *inputDevice);
diff --git a/src/client/qwaylandinputdevice_p.h b/src/client/qwaylandinputdevice_p.h
index 448d0fce..1074ac98 100644
--- a/src/client/qwaylandinputdevice_p.h
+++ b/src/client/qwaylandinputdevice_p.h
@@ -156,7 +156,7 @@ public:
     Pointer *pointer() const;
     Touch *touch() const;
 
-private:
+protected:
     QWaylandDisplay *mQDisplay = nullptr;
     struct wl_display *mDisplay = nullptr;
 
diff --git a/src/client/qwaylandintegration.cpp b/src/client/qwaylandintegration.cpp
index 7ad8e05e..c54f4bcd 100644
--- a/src/client/qwaylandintegration.cpp
+++ b/src/client/qwaylandintegration.cpp
@@ -51,6 +51,7 @@
 #include "qwaylanddnd_p.h"
 #include "qwaylandwindowmanagerintegration_p.h"
 #include "qwaylandscreen_p.h"
+#include "qwaylandcursor_p.h"
 
 #if defined(Q_OS_MACOS)
 #  include <QtFontDatabaseSupport/private/qcoretextfontdatabase_p.h>
@@ -109,22 +110,12 @@ QWaylandIntegration::QWaylandIntegration()
 #else
     : mFontDb(new QGenericUnixFontDatabase())
 #endif
-    , mNativeInterface(new QWaylandNativeInterface(this))
 {
-    initializeInputDeviceIntegration();
     mDisplay.reset(new QWaylandDisplay(this));
     if (!mDisplay->isInitialized()) {
         mFailed = true;
         return;
     }
-#if QT_CONFIG(clipboard)
-    mClipboard.reset(new QWaylandClipboard(mDisplay.data()));
-#endif
-#if QT_CONFIG(draganddrop)
-    mDrag.reset(new QWaylandDrag(mDisplay.data()));
-#endif
-
-    reconfigureInputContext();
 }
 
 QWaylandIntegration::~QWaylandIntegration()
@@ -190,8 +181,30 @@ QAbstractEventDispatcher *QWaylandIntegration::createEventDispatcher() const
     return createUnixEventDispatcher();
 }
 
+QPlatformNativeInterface *QWaylandIntegration::createPlatformNativeInterface()
+{
+    return new QWaylandNativeInterface(this);
+}
+
+void QWaylandIntegration::initializePlatform()
+{
+    mNativeInterface.reset(createPlatformNativeInterface());
+    initializeInputDeviceIntegration();
+#if QT_CONFIG(clipboard)
+    mClipboard.reset(new QWaylandClipboard(mDisplay.data()));
+#endif
+#if QT_CONFIG(draganddrop)
+    mDrag.reset(new QWaylandDrag(mDisplay.data()));
+#endif
+
+    reconfigureInputContext();
+}
+
 void QWaylandIntegration::initialize()
 {
+    // Support platform specicif initialization
+    initializePlatform();
+
     QAbstractEventDispatcher *dispatcher = QGuiApplicationPrivate::eventDispatcher;
     QObject::connect(dispatcher, SIGNAL(aboutToBlock()), mDisplay.data(), SLOT(flushRequests()));
     QObject::connect(dispatcher, SIGNAL(awake()), mDisplay.data(), SLOT(flushRequests()));
@@ -279,6 +292,16 @@ QPlatformTheme *QWaylandIntegration::createPlatformTheme(const QString &name) co
     return QGenericUnixTheme::createUnixTheme(name);
 }
 
+QWaylandScreen *QWaylandIntegration::createPlatformScreen(QWaylandDisplay *waylandDisplay, int version, uint32_t id) const
+{
+   return new QWaylandScreen(waylandDisplay, version, id);
+}
+
+QWaylandCursor *QWaylandIntegration::createPlatformCursor(QWaylandDisplay *display) const
+{
+   return new QWaylandCursor(display);
+}
+
 #if QT_CONFIG(vulkan)
 QPlatformVulkanInstance *QWaylandIntegration::createPlatformVulkanInstance(QVulkanInstance *instance) const
 {
@@ -422,7 +445,7 @@ void QWaylandIntegration::initializeShellIntegration()
     QWindowSystemInterfacePrivate::TabletEvent::setPlatformSynthesizesMouse(false);
 }
 
-QWaylandInputDevice *QWaylandIntegration::createInputDevice(QWaylandDisplay *display, int version, uint32_t id)
+QWaylandInputDevice *QWaylandIntegration::createInputDevice(QWaylandDisplay *display, int version, uint32_t id) const
 {
     if (mInputDeviceIntegration) {
         return mInputDeviceIntegration->createInputDevice(display, version, id);
diff --git a/src/client/qwaylandintegration_p.h b/src/client/qwaylandintegration_p.h
index ff70ae25..e687e0c6 100644
--- a/src/client/qwaylandintegration_p.h
+++ b/src/client/qwaylandintegration_p.h
@@ -67,6 +67,8 @@ class QWaylandServerBufferIntegration;
 class QWaylandShellIntegration;
 class QWaylandInputDeviceIntegration;
 class QWaylandInputDevice;
+class QWaylandScreen;
+class QWaylandCursor;
 
 class Q_WAYLAND_CLIENT_EXPORT QWaylandIntegration : public QPlatformIntegration
 {
@@ -117,7 +119,9 @@ public:
     QPlatformVulkanInstance *createPlatformVulkanInstance(QVulkanInstance *instance) const override;
 #endif
 
-    QWaylandInputDevice *createInputDevice(QWaylandDisplay *display, int version, uint32_t id);
+    virtual QWaylandInputDevice *createInputDevice(QWaylandDisplay *display, int version, uint32_t id) const;
+    virtual QWaylandScreen *createPlatformScreen(QWaylandDisplay *waylandDisplay, int version, uint32_t id) const;
+    virtual QWaylandCursor *createPlatformCursor(QWaylandDisplay *display) const;
 
     virtual QWaylandClientBufferIntegration *clientBufferIntegration() const;
     virtual QWaylandServerBufferIntegration *serverBufferIntegration() const;
@@ -125,19 +129,24 @@ public:
 
     void reconfigureInputContext();
 
-private:
+protected:
     // NOTE: mDisplay *must* be destructed after mDrag and mClientBufferIntegration
     // and mShellIntegration.
     // Do not move this definition into the private section at the bottom.
     QScopedPointer<QWaylandDisplay> mDisplay;
 
 protected:
+    virtual QPlatformNativeInterface *createPlatformNativeInterface();
+
     QScopedPointer<QWaylandClientBufferIntegration> mClientBufferIntegration;
     QScopedPointer<QWaylandServerBufferIntegration> mServerBufferIntegration;
     QScopedPointer<QWaylandShellIntegration> mShellIntegration;
     QScopedPointer<QWaylandInputDeviceIntegration> mInputDeviceIntegration;
 
+    QScopedPointer<QPlatformInputContext> mInputContext;
+
 private:
+    void initializePlatform();
     void initializeClientBufferIntegration();
     void initializeServerBufferIntegration();
     void initializeShellIntegration();
@@ -152,7 +161,6 @@ private:
     QScopedPointer<QPlatformDrag> mDrag;
 #endif
     QScopedPointer<QPlatformNativeInterface> mNativeInterface;
-    QScopedPointer<QPlatformInputContext> mInputContext;
 #if QT_CONFIG(accessibility)
     mutable QScopedPointer<QPlatformAccessibility> mAccessibility;
 #endif
diff --git a/src/client/qwaylandscreen_p.h b/src/client/qwaylandscreen_p.h
index df1c94f2..5ff77f94 100644
--- a/src/client/qwaylandscreen_p.h
+++ b/src/client/qwaylandscreen_p.h
@@ -115,7 +115,7 @@ public:
     static QWaylandScreen *waylandScreenFromWindow(QWindow *window);
     static QWaylandScreen *fromWlOutput(::wl_output *output);
 
-private:
+protected:
     void output_mode(uint32_t flags, int width, int height, int refresh) override;
     void output_geometry(int32_t x, int32_t y,
                          int32_t width, int32_t height,
@@ -151,10 +151,6 @@ private:
     bool mOutputDone = false;
     bool mXdgOutputDone = false;
     bool mInitialized = false;
-
-#if QT_CONFIG(cursor)
-    QScopedPointer<QWaylandCursor> mWaylandCursor;
-#endif
 };
 
 }
diff --git a/src/client/qwaylandwindow_p.h b/src/client/qwaylandwindow_p.h
index 6cc1664b..d7df84f9 100644
--- a/src/client/qwaylandwindow_p.h
+++ b/src/client/qwaylandwindow_p.h
@@ -214,6 +214,8 @@ signals:
     void wlSurfaceDestroyed();
 
 protected:
+    void sendExposeEvent(const QRect &rect);
+
     QWaylandDisplay *mDisplay = nullptr;
     QScopedPointer<QWaylandSurface> mSurface;
     QWaylandShellSurface *mShellSurface = nullptr;
@@ -268,7 +270,6 @@ private:
     bool shouldCreateShellSurface() const;
     bool shouldCreateSubSurface() const;
     void reset();
-    void sendExposeEvent(const QRect &rect);
     static void closePopups(QWaylandWindow *parent);
     QPlatformScreen *calculateScreenFromSurfaceEvents() const;
     void setOpaqueArea(const QRegion &opaqueArea);

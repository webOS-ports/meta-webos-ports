From d7343c00d5b01cec6dfef38be4d5ee952ddf6679 Mon Sep 17 00:00:00 2001
From: Elvis Lee <kwangwoong.lee@lge.com>
Date: Tue, 21 May 2019 17:50:44 +0300
Subject: [PATCH] Allow seat selection

Change-Id: Ic5f64ef37c3c76f1df0b19c43ea6a99f436519fa

---
 .../compositor_api/qwaylandcompositor.cpp     | 30 +++++++++++--------
 .../compositor_api/qwaylandcompositor_p.h     |  2 ++
 2 files changed, 19 insertions(+), 13 deletions(-)

diff --git a/src/compositor/compositor_api/qwaylandcompositor.cpp b/src/compositor/compositor_api/qwaylandcompositor.cpp
index 18d8da4f..0a736b32 100644
--- a/src/compositor/compositor_api/qwaylandcompositor.cpp
+++ b/src/compositor/compositor_api/qwaylandcompositor.cpp
@@ -449,6 +449,19 @@ void QWaylandCompositorPrivate::loadServerBufferIntegration()
 #endif
 }
 
+QWaylandSeat *QWaylandCompositorPrivate::seatFor(QInputEvent *inputEvent)
+{
+    QWaylandSeat *dev = nullptr;
+    for (int i = 0; i < seats.size(); i++) {
+        QWaylandSeat *candidate = seats.at(i);
+        if (candidate->isOwner(inputEvent)) {
+            dev = candidate;
+            break;
+        }
+    }
+    return dev;
+}
+
 /*!
   \qmltype WaylandCompositor
   \inqmlmodule QtWayland.Compositor
@@ -921,23 +934,14 @@ QWaylandSeat *QWaylandCompositor::defaultSeat() const
 }
 
 /*!
- * \internal
- *
- * Currently, Qt only supports a single seat, so this exists for
- * future proofing the APIs.
+ * Select the seat for a given input event.
+ * Currently, Qt only supports a single seat, but you can reimplement
+ * QWaylandCompositorPrivate::seatFor for a custom seat selection.
  */
 QWaylandSeat *QWaylandCompositor::seatFor(QInputEvent *inputEvent)
 {
     Q_D(QWaylandCompositor);
-    QWaylandSeat *dev = nullptr;
-    for (int i = 0; i < d->seats.size(); i++) {
-        QWaylandSeat *candidate = d->seats.at(i);
-        if (candidate->isOwner(inputEvent)) {
-            dev = candidate;
-            break;
-        }
-    }
-    return dev;
+    return d->seatFor(inputEvent);
 }
 
 /*!
diff --git a/src/compositor/compositor_api/qwaylandcompositor_p.h b/src/compositor/compositor_api/qwaylandcompositor_p.h
index 6dec044f..12d2d0c7 100644
--- a/src/compositor/compositor_api/qwaylandcompositor_p.h
+++ b/src/compositor/compositor_api/qwaylandcompositor_p.h
@@ -117,6 +117,8 @@ public:
     void connectToExternalSockets();
 #endif
 
+    virtual QWaylandSeat *seatFor(QInputEvent *inputEvent);
+
 protected:
     void compositor_create_surface(wl_compositor::Resource *resource, uint32_t id) override;
     void compositor_create_region(wl_compositor::Resource *resource, uint32_t id) override;

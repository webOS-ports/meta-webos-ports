From 54024dc6a8e66d48bb064c12f9bbc041c77d8d51 Mon Sep 17 00:00:00 2001
From: Christophe Chapuis <chris.chapuis@gmail.com>
Date: Thu, 4 Apr 2019 08:44:19 +0000
Subject: [PATCH] Implement Sync IPC messaging through
 qt.webChannelTransport.sendSync

Provide a new API "syncSend" to be able to do sync calls
through QtWebChannel calls.

This uses a patched version of qtwebchannel mojom interface
in qtwebengine-chromium.

Signed-off-by: Christophe Chapuis <chris.chapuis@gmail.com>
Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
---
 .../renderer/web_channel_ipc_transport.cpp    | 40 +++++++++++++++++--
 .../web_channel_ipc_transport_host.cpp        | 26 +++++++++---
 .../web_channel_ipc_transport_host.h          |  4 ++
 3 files changed, 61 insertions(+), 9 deletions(-)

diff --git a/src/core/renderer/web_channel_ipc_transport.cpp b/src/core/renderer/web_channel_ipc_transport.cpp
index 3b9c17b6..1a48e96e 100644
--- a/src/core/renderer/web_channel_ipc_transport.cpp
+++ b/src/core/renderer/web_channel_ipc_transport.cpp
@@ -68,7 +68,9 @@ public:
     static void Uninstall(blink::WebLocalFrame *frame, uint worldId);
 private:
     WebChannelTransport() {}
-    void NativeQtSendMessage(gin::Arguments *args);
+    void NativeQtSendMessage(gin::Arguments *args, bool bSyncCall);
+    void NativeQtSendMessageASync(gin::Arguments *args);
+    void NativeQtSendMessageSync(gin::Arguments *args);
 
     // gin::WrappableBase
     gin::ObjectTemplateBuilder GetObjectTemplateBuilder(v8::Isolate *isolate) override;
@@ -124,7 +126,17 @@ void WebChannelTransport::Uninstall(blink::WebLocalFrame *frame, uint worldId)
     Q_UNUSED(whocares);
 }
 
-void WebChannelTransport::NativeQtSendMessage(gin::Arguments *args)
+void WebChannelTransport::NativeQtSendMessageASync(gin::Arguments *args)
+{
+    NativeQtSendMessage(args, false);
+}
+
+void WebChannelTransport::NativeQtSendMessageSync(gin::Arguments *args)
+{
+    NativeQtSendMessage(args, true);
+}
+
+void WebChannelTransport::NativeQtSendMessage(gin::Arguments *args, bool bSyncCall)
 {
     blink::WebLocalFrame *frame = blink::WebLocalFrame::FrameForCurrentContext();
     if (!frame || !frame->View())
@@ -164,13 +176,33 @@ void WebChannelTransport::NativeQtSendMessage(gin::Arguments *args)
     const char *rawData = doc.rawData(&size);
     qtwebchannel::mojom::WebChannelTransportHostAssociatedPtr webChannelTransport;
     renderFrame->GetRemoteAssociatedInterfaces()->GetInterface(&webChannelTransport);
-    webChannelTransport->DispatchWebChannelMessage(std::vector<uint8_t>(rawData, rawData + size));
+    if(bSyncCall) {
+        std::vector<uint8_t> replyMessage;
+        webChannelTransport->DispatchWebChannelMessageSync(std::vector<uint8_t>(rawData, rawData + size), &replyMessage);
+
+        QJsonDocument docReply = QJsonDocument::fromRawData(reinterpret_cast<const char *>(replyMessage.data()),
+                                                       replyMessage.size(), QJsonDocument::BypassValidation);
+
+        QByteArray jsonReply = docReply.toJson(QJsonDocument::Compact);
+
+        v8::Isolate* isolate = args->isolate();
+
+        v8::Local<v8::Object> replyObject = v8::Object::New(isolate);
+        replyObject->Set(v8::String::NewFromUtf8(isolate, "data"),
+                      v8::String::NewFromUtf8(isolate, jsonReply.constData(), v8::String::kNormalString, jsonReply.size()));
+
+        args->Return(replyObject);
+    }
+    else {
+        webChannelTransport->DispatchWebChannelMessage(std::vector<uint8_t>(rawData, rawData + size));
+    }
 }
 
 gin::ObjectTemplateBuilder WebChannelTransport::GetObjectTemplateBuilder(v8::Isolate *isolate)
 {
     return gin::Wrappable<WebChannelTransport>::GetObjectTemplateBuilder(isolate)
-        .SetMethod("send", &WebChannelTransport::NativeQtSendMessage);
+        .SetMethod("send", &WebChannelTransport::NativeQtSendMessageASync)
+        .SetMethod("sendSync", &WebChannelTransport::NativeQtSendMessageSync);
 }
 
 WebChannelIPCTransport::WebChannelIPCTransport(content::RenderFrame *renderFrame)
diff --git a/src/core/renderer_host/web_channel_ipc_transport_host.cpp b/src/core/renderer_host/web_channel_ipc_transport_host.cpp
index e1929e4c..a2272866 100644
--- a/src/core/renderer_host/web_channel_ipc_transport_host.cpp
+++ b/src/core/renderer_host/web_channel_ipc_transport_host.cpp
@@ -77,6 +77,7 @@ WebChannelIPCTransportHost::WebChannelIPCTransportHost(content::WebContents *con
     , content::WebContentsObserver(contents)
     , m_worldId(worldId)
     , m_binding(contents, this)
+    , m_waitingJsonReply(0)
 {
     for (content::RenderFrameHost *frame : contents->GetAllFrames())
         setWorldId(frame, worldId);
@@ -97,11 +98,16 @@ void WebChannelIPCTransportHost::sendMessage(const QJsonObject &message)
     QJsonDocument doc(message);
     int size = 0;
     const char *rawData = doc.rawData(&size);
-    content::RenderFrameHost *frame = web_contents()->GetMainFrame();
-    qtwebchannel::mojom::WebChannelTransportRenderAssociatedPtr webChannelTransport;
-    frame->GetRemoteAssociatedInterfaces()->GetInterface(&webChannelTransport);
-    qCDebug(log).nospace() << "sending webchannel message to " << frame << ": " << doc;
-    webChannelTransport->DispatchWebChannelMessage(std::vector<uint8_t>(rawData, rawData + size), m_worldId);
+    if(m_waitingJsonReply) {
+         *m_waitingJsonReply = std::vector<uint8_t>(rawData, rawData + size);
+    }
+    else {
+        content::RenderFrameHost *frame = web_contents()->GetMainFrame();
+        qtwebchannel::mojom::WebChannelTransportRenderAssociatedPtr webChannelTransport;
+        frame->GetRemoteAssociatedInterfaces()->GetInterface(&webChannelTransport);
+        qCDebug(log).nospace() << "sending webchannel message to " << frame << ": " << doc;
+        webChannelTransport->DispatchWebChannelMessage(std::vector<uint8_t>(rawData, rawData + size), m_worldId);
+    }
 }
 
 void WebChannelIPCTransportHost::setWorldId(uint32_t worldId)
@@ -158,6 +164,16 @@ void WebChannelIPCTransportHost::DispatchWebChannelMessage(const std::vector<uin
     Q_EMIT messageReceived(doc.object(), this);
 }
 
+void WebChannelIPCTransportHost::DispatchWebChannelMessageSync(const std::vector<uint8_t> &binaryJson, DispatchWebChannelMessageSyncCallback callback)
+{
+    std::vector<uint8_t> localJson;
+    m_waitingJsonReply = &localJson;
+    DispatchWebChannelMessage(binaryJson);
+
+    std::move(callback).Run(std::move(localJson));
+    m_waitingJsonReply = 0;
+}
+
 void WebChannelIPCTransportHost::RenderFrameCreated(content::RenderFrameHost *frame)
 {
     setWorldId(frame, m_worldId);
diff --git a/src/core/renderer_host/web_channel_ipc_transport_host.h b/src/core/renderer_host/web_channel_ipc_transport_host.h
index 94891f25..7530dd30 100644
--- a/src/core/renderer_host/web_channel_ipc_transport_host.h
+++ b/src/core/renderer_host/web_channel_ipc_transport_host.h
@@ -76,11 +76,15 @@ private:
 
     // qtwebchannel::mojom::WebChannelTransportHost
     void DispatchWebChannelMessage(const std::vector<uint8_t> &binaryJson) override;
+    void DispatchWebChannelMessageSync(const std::vector<uint8_t> &binaryJson, DispatchWebChannelMessageSyncCallback callback) override;
 
     // Empty only during construction/destruction. Synchronized to all the
     // WebChannelIPCTransports/RenderFrames in the observed WebContents.
     uint32_t m_worldId;
     content::WebContentsFrameBindingSet<qtwebchannel::mojom::WebChannelTransportHost> m_binding;
+
+    // Sync call management
+    std::vector<uint8_t> *m_waitingJsonReply;
 };
 
 } // namespace

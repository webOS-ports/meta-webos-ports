From 33781fd7671673011e67b6adb76f6206c1ebbf26 Mon Sep 17 00:00:00 2001
From: Christophe Chapuis <chris.chapuis@gmail.com>
Date: Sun, 27 Sep 2015 21:39:56 +0200
Subject: [PATCH] WebContents: provide additional features from window.open to
 the client side

* Also, parse these features in a way that take into account JSON values.
* Also redirect calls to old AddNewContent to the new API, with empty additional features.
* Store the additional window features related to LuneOS in the WebContentsView object
* - additional_features (from window.open parameter)
* - initial target URL
* Update additional params from Chromium 53->56

Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
Signed-off-by: Christophe Chapuis <chris.chapuis@gmail.com>
---
 .../browser/web_contents/web_contents_impl.cc | 14 +++++++++--
 .../browser/web_contents/web_contents_view.h  |  8 +++++++
 .../public/browser/web_contents_delegate.h    | 21 +++++++++++++++-
 .../common/common_param_traits_macros.h       |  1 +
 .../renderer/window_features_converter.cc     |  2 ++
 .../blink/public/web/web_window_features.h    |  2 ++
 .../blink/public/web/window_features.mojom    |  6 +++++
 .../blink/renderer/core/page/create_window.cc | 24 +++++++++++++++++--
 8 files changed, 73 insertions(+), 5 deletions(-)

diff --git a/chromium/content/browser/web_contents/web_contents_impl.cc b/chromium/content/browser/web_contents/web_contents_impl.cc
index a2659263737..ddb43bd73db 100644
--- a/chromium/content/browser/web_contents/web_contents_impl.cc
+++ b/chromium/content/browser/web_contents/web_contents_impl.cc
@@ -2608,6 +2608,10 @@ void WebContentsImpl::CreateNewWindow(
     }
     return;
   }
+  
+  std::vector<base::string16> additional_features;
+  for (auto webStr : params.features->additionalFeatures)
+    additional_features.push_back(base::UTF8ToUTF16(base::StringPiece(webStr)));
 
   // Create the new web contents. This will automatically create the new
   // WebContentsView. In the future, we may want to create the view separately.
@@ -2651,6 +2655,11 @@ void WebContentsImpl::CreateNewWindow(
     if (!is_guest) {
       WebContentsView* new_view = raw_new_contents->view_.get();
 
+      // set the additional features required by the LuneOS app
+      // (ideally this information should be propagated using the IPC messaging)
+      new_view->setWindowAdditionalFeatures(additional_features);
+      new_view->setInitialTargetURL(params.target_url);
+
       // TODO(brettw): It seems bogus that we have to call this function on the
       // newly created object and give it one of its own member variables.
       new_view->CreateViewForWidget(
@@ -2701,7 +2710,7 @@ void WebContentsImpl::CreateNewWindow(
 
       delegate_->AddNewContents(this, std::move(new_contents),
                                 params.disposition, initial_rect,
-                                params.mimic_user_gesture, &was_blocked);
+                                params.mimic_user_gesture, &was_blocked, additional_features);
       if (!weak_new_contents)
         return;  // The delegate deleted |new_contents| during AddNewContents().
     }
@@ -2788,9 +2797,10 @@ void WebContentsImpl::ShowCreatedWindow(int process_id,
 
     base::WeakPtr<WebContentsImpl> weak_popup =
         raw_popup->weak_factory_.GetWeakPtr();
+    std::vector<base::string16> additional_features = raw_popup->view_.get()->getWindowAdditionalFeatures();
     if (delegate) {
       delegate->AddNewContents(this, std::move(popup), disposition,
-                               initial_rect, user_gesture, nullptr);
+                               initial_rect, user_gesture, nullptr, additional_features);
       if (!weak_popup)
         return;  // The delegate deleted |popup| during AddNewContents().
     }
diff --git a/chromium/content/browser/web_contents/web_contents_view.h b/chromium/content/browser/web_contents/web_contents_view.h
index 41e44d5d658..2d0fa698b2b 100644
--- a/chromium/content/browser/web_contents/web_contents_view.h
+++ b/chromium/content/browser/web_contents/web_contents_view.h
@@ -13,6 +13,7 @@
 #include "ui/gfx/geometry/rect.h"
 #include "ui/gfx/geometry/size.h"
 #include "ui/gfx/native_widget_types.h"
+#include "url/gurl.h"
 
 namespace content {
 class RenderViewHost;
@@ -137,6 +138,13 @@ class WebContentsView {
   virtual bool IsEventTracking() const = 0;
   virtual void CloseTabAfterEventTracking() = 0;
 #endif
+
+  // Add accessors to set/get the window additional features wanted by the LuneOS apps
+  // The actual implementation is done in web_contents_view_qt.h
+  virtual void setWindowAdditionalFeatures(const std::vector<base::string16> &additional_features) {}
+  virtual std::vector<base::string16> getWindowAdditionalFeatures() {}
+  virtual void setInitialTargetURL(const GURL &initialURL) {}
+  virtual GURL getInitialTargetURL() {}
 };
 
 }  // namespace content
diff --git a/chromium/content/public/browser/web_contents_delegate.h b/chromium/content/public/browser/web_contents_delegate.h
index f7e72b32ee7..9fd722e1d88 100644
--- a/chromium/content/public/browser/web_contents_delegate.h
+++ b/chromium/content/public/browser/web_contents_delegate.h
@@ -126,7 +126,26 @@ class CONTENT_EXPORT WebContentsDelegate {
                               WindowOpenDisposition disposition,
                               const gfx::Rect& initial_rect,
                               bool user_gesture,
-                              bool* was_blocked) {}
+                              bool* was_blocked) {
+      std::vector<base::string16> additional_features;
+      AddNewContents(source,std::move(new_contents),disposition,initial_rect,user_gesture,was_blocked, additional_features);
+  }
+
+  // Creates a new tab with the already-created WebContents 'new_contents'.
+  // The window for the added contents should be reparented correctly when this
+  // method returns.  If |disposition| is NEW_POPUP, |initial_rect| should hold
+  // the initial position. If |was_blocked| is non-NULL, then |*was_blocked|
+  // will be set to true if the popup gets blocked, and left unchanged
+  // otherwise.
+  virtual void AddNewContents(WebContents* source,
+                              std::unique_ptr<WebContents> new_contents,
+                              WindowOpenDisposition disposition,
+                              const gfx::Rect& initial_rect,
+                              bool user_gesture,
+                              bool* was_blocked,
+                              std::vector<base::string16> additional_features) {
+      AddNewContents(source,std::move(new_contents),disposition,initial_rect,user_gesture,was_blocked);
+  }
 
   // Selects the specified contents, bringing its container to the front.
   virtual void ActivateContents(WebContents* contents) {}
diff --git a/chromium/content/public/common/common_param_traits_macros.h b/chromium/content/public/common/common_param_traits_macros.h
index df1f442cde3..d505cf64eb4 100644
--- a/chromium/content/public/common/common_param_traits_macros.h
+++ b/chromium/content/public/common/common_param_traits_macros.h
@@ -260,6 +260,7 @@ IPC_STRUCT_TRAITS_BEGIN(blink::mojom::WindowFeatures)
   IPC_STRUCT_TRAITS_MEMBER(status_bar_visible)
   IPC_STRUCT_TRAITS_MEMBER(tool_bar_visible)
   IPC_STRUCT_TRAITS_MEMBER(scrollbars_visible)
+  IPC_STRUCT_TRAITS_MEMBER(additionalFeatures)
 IPC_STRUCT_TRAITS_END()
 
 IPC_ENUM_TRAITS_MAX_VALUE(ax::mojom::Event, ax::mojom::Event::kMaxValue)
diff --git a/chromium/content/public/renderer/window_features_converter.cc b/chromium/content/public/renderer/window_features_converter.cc
index b8dc86484c1..887dd1e5de8 100644
--- a/chromium/content/public/renderer/window_features_converter.cc
+++ b/chromium/content/public/renderer/window_features_converter.cc
@@ -21,6 +21,7 @@ blink::mojom::WindowFeaturesPtr ConvertWebWindowFeaturesToMojoWindowFeatures(
   result->status_bar_visible = web_window_features.status_bar_visible;
   result->tool_bar_visible = web_window_features.tool_bar_visible;
   result->scrollbars_visible = web_window_features.scrollbars_visible;
+  result->additionalFeatures = web_window_features.additionalFeatures;
   return result;
 }
 
@@ -39,6 +40,7 @@ blink::WebWindowFeatures ConvertMojoWindowFeaturesToWebWindowFeatures(
   result.status_bar_visible = window_features.status_bar_visible;
   result.tool_bar_visible = window_features.tool_bar_visible;
   result.scrollbars_visible = window_features.scrollbars_visible;
+  result.additionalFeatures = window_features.additionalFeatures;
   return result;
 }
 
diff --git a/chromium/third_party/blink/public/web/web_window_features.h b/chromium/third_party/blink/public/web/web_window_features.h
index 7aa5be6f750..106ad7944e7 100644
--- a/chromium/third_party/blink/public/web/web_window_features.h
+++ b/chromium/third_party/blink/public/web/web_window_features.h
@@ -54,6 +54,8 @@ struct WebWindowFeatures {
   bool noopener = false;
   bool background = false;
   bool persistent = false;
+  
+  std::vector<std::string> additionalFeatures;
 };
 
 }  // namespace blink
diff --git a/chromium/third_party/blink/public/web/window_features.mojom b/chromium/third_party/blink/public/web/window_features.mojom
index dac13c3861e..2ecfbd07f20 100644
--- a/chromium/third_party/blink/public/web/window_features.mojom
+++ b/chromium/third_party/blink/public/web/window_features.mojom
@@ -21,4 +21,10 @@ struct WindowFeatures {
     bool status_bar_visible = true;
     bool tool_bar_visible = true;
     bool scrollbars_visible = true;
+
+    // NOTE: WebWindowFeatures::additionalFeatures is not mirrored by this
+    // mojom struct as it's never used by the browser and therefore doesn't need
+    // to be sent.
+	// ... but webOS/LuneOS apps need that to send additional info to the OS
+    array<string> additionalFeatures;
 };
diff --git a/chromium/third_party/blink/renderer/core/page/create_window.cc b/chromium/third_party/blink/renderer/core/page/create_window.cc
index 475a2ac3906..93140056ab6 100644
--- a/chromium/third_party/blink/renderer/core/page/create_window.cc
+++ b/chromium/third_party/blink/renderer/core/page/create_window.cc
@@ -113,8 +113,23 @@ WebWindowFeatures GetWindowFeaturesFromString(const String& feature_string) {
       SECURITY_DCHECK(i <= length);
 
       // skip to first separator (end of value)
-      while (i < length && !IsWindowFeaturesSeparator(buffer[i]))
-        i++;
+      if (i < length && buffer[i] == '{') {
+          // json value: go to the matching '}'
+          int unmatchedBraceCount = 0;
+          while (i < length) {
+              if (buffer[i] == '{')
+                  unmatchedBraceCount++;
+              else if (buffer[i] == '}')
+                  unmatchedBraceCount--;
+              i++;
+              if (unmatchedBraceCount <= 0)
+                  break;
+          }
+      } else {
+          // classic case: skip to first separator
+          while (i < length && !IsWindowFeaturesSeparator(buffer[i]))
+            i++;
+      }
 
       value_end = i;
 
@@ -160,6 +175,9 @@ WebWindowFeatures GetWindowFeaturesFromString(const String& feature_string) {
       window_features.status_bar_visible = value;
     } else if (key_string == "scrollbars") {
       window_features.scrollbars_visible = value;
+    } else if (key_string == "attributes") {
+      String additionalFeature = key_string + "=" + value_string;
+      window_features.additionalFeatures.push_back(additionalFeature.Latin1().data());
     } else if (key_string == "resizable") {
       window_features.resizable = value;
     } else if (key_string == "noopener") {
@@ -168,6 +186,8 @@ WebWindowFeatures GetWindowFeaturesFromString(const String& feature_string) {
       window_features.background = true;
     } else if (key_string == "persistent") {
       window_features.persistent = true;
+    } else if (value == 1) {
+      window_features.additionalFeatures.push_back(key_string.Latin1().data());
     }
   }
 

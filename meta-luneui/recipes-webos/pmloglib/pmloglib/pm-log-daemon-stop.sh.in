#!/bin/sh
# Copyright (c) 2017-2018 LG Electronics, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

rm -rf /tmp/pmlogdaemon

systemctl list-jobs | egrep -q 'shutdown.target.*start' && SHUTDOWN=yes || SHUTDOWN=no
systemctl list-jobs | egrep -q 'reboot.target.*start' && REBOOT=yes || REBOOT=no
systemctl list-jobs | egrep -q 'halt.target.*start' && HALT=yes || HALT=no
systemctl list-jobs | egrep -q 'poweroff.target.*start' && POWEROFF=yes || POWEROFF=no

pwroff_reason=$(cat /tmp/poweroff_reason 2>/dev/null | awk 'BEGIN { FS="=";} /poweroff_reason/ {print $2} END{}')
if [ -z $pwroff_reason ] ; then
    if [ "$LS_HUBD_CRASH" != "" ] ; then
        # There was a crash - do not care which ls-hubd right here
        pwroff_reason="watchdog"
    else
        pwroff_reason="unknown"
    fi
fi

PIDL=`pidof PmLogDaemon` || true
PIDR=`pidof rdxd` || true
PIDU=`pidof uploadd` || true

if [ $SHUTDOWN == "yes" ] && [ $REBOOT == "yes" ] ; then
    # REBOOT
    if [ "$LS_HUBD_CRASH" != "ls-hubd_private" -a "$PIDL" != "" ] ; then
        # leave a note to tell why we rebooted
        PmLogCtl logkv . info REBOOT_REASON reason=\"$pwroff_reason\" "from reboot.conf" || true
        PmLogCtl flush || true

        if [ "$PIDR" != "" -a "$PIDU" != "" ] ; then
            # pmlogdaemon, rdxd and uploadd MUST be alive at this point when command is executed.
            echo "[REBOOT] - before analytics log support"
            echo "[REBOOT] - before analytics log support" > $KLOG
            luna-send -n 1 -w 300 luna://com.webos.pmlogd/forcerotate '{}'
        fi

        echo "[REBOOT] - save log files to @WEBOS_INSTALL_LOCALSTATEDIR@/spool/rdxd/previous_boot_logs.tar.gz"
        echo "[REBOOT] - save log files to @WEBOS_INSTALL_LOCALSTATEDIR@/spool/rdxd/previous_boot_logs.tar.gz" > $KLOG
        # prepare for log backup by removing old backup file.  We will verify that the new
        # file has been created (or wait a bit longer for it) down below.
        rm -f @WEBOS_INSTALL_LOCALSTATEDIR@/spool/rdxd/previous_boot_logs.tar.gz || true
        luna-send -n 1 -w 300 -f luna://com.webos.pmlogd/backuplogs '{}'

        # if PIDL is empty, then we didn't start creating the backup, so no point waiting for it
        # if pmlogdaemon backup is not done yet wait 2 more seconds for it to finish
        COUNT=0
        while [ ! -e @WEBOS_INSTALL_LOCALSTATEDIR@/spool/rdxd/previous_boot_logs.tar.gz -a $COUNT -le 8 ] ; do
            echo "[REBOOT] - pmlog backup wait 250msec" > $KLOG
            usleep 250000      # 0.25 second
            COUNT=$((COUNT + 1))
        done
    fi
elif [ $SHUTDOWN == "yes" ] && [ $POWEROFF == "yes" ] ; then
    # SHUTDWN (POWEROFF)
    if [ "$PIDL" != "" ] ; then
        # leave a note to explain why we're shutting down
        PmLogCtl logkv . info SHUTDOWN_REASON reason=\"$pwroff_reason\" "from shutdown.conf" || true
        PmLogCtl flush || true

        if [ "$PIDR" != "" -a "$PIDU" != "" ] ; then
            # pmlogdaemon, rdxd and uploadd MUST be alive at this point when command is executed.
            echo "[SHUTDOWN] - before analytics log support"
            echo "[SHUTDOWN] - before analytics log support" > $KLOG
            # must guarantee time for making log report
            luna-send -n 1 -w 150 luna://com.webos.pmlogd/forcerotate '{}'
        fi

        echo "[SHUTDOWN] - save log files to @WEBOS_INSTALL_LOCALSTATEDIR@/spool/rdxd/previous_boot_logs.tar.gz"
        echo "[SHUTDOWN] - save log files to @WEBOS_INSTALL_LOCALSTATEDIR@/spool/rdxd/previous_boot_logs.tar.gz" > $KLOG
        # prepare for log backup by removing old backup file.  We will verify that the new
        # file has been created (or wait a bit longer for it) down below.
        rm -f @WEBOS_INSTALL_LOCALSTATEDIR@/spool/rdxd/previous_boot_logs.tar.gz || true
        luna-send -n 1 -w 150 -f luna://com.webos.pmlogd/backuplogs '{}'

        # if pmlogdaemon backup is not done yet wait 2 more seconds for it to finish
        COUNT=0
        while [ ! -e @WEBOS_INSTALL_LOCALSTATEDIR@/spool/rdxd/previous_boot_logs.tar.gz -a $COUNT -le 8 ] ; do
            echo "[SHUTDOWN] - pmlog backup wait 250msec" > $KLOG
            usleep 250000      # 0.25 second
            COUNT=$((COUNT + 1))
        done
    fi
else
    echo "stop pmlogdaemon"
    exit 0
fi
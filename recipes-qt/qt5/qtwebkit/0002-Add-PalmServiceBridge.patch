From d505b887068f076cbc2f56ddead7dad8a7ca2233 Mon Sep 17 00:00:00 2001
From: Simon Busch <morphis@gravedo.de>
Date: Wed, 25 Sep 2013 00:12:19 +0200
Subject: [PATCH 2/5] Add PalmServiceBridge

Taken from https://github.com/isis-project/WebKit

Upstream-Status: Inappropiate [other]

Signed-off-by: Simon Busch <morphis@gravedo.de>
---
 Source/WebCore/DerivedSources.pri                  |   4 +
 Source/WebCore/Target.pri                          |  10 +
 Source/WebCore/WebCore.pri                         |   4 +
 Source/WebCore/platform/webos/LunaServiceMgr.cpp   | 288 ++++++++++++++++++++
 Source/WebCore/platform/webos/LunaServiceMgr.h     |  53 ++++
 .../WebCore/platform/webos/PalmServiceBridge.cpp   | 295 +++++++++++++++++++++
 Source/WebCore/platform/webos/PalmServiceBridge.h  |  79 ++++++
 .../WebCore/platform/webos/PalmServiceBridge.idl   |  15 ++
 Tools/qmake/mkspecs/features/features.pri          |   1 +
 9 files changed, 749 insertions(+)
 create mode 100644 Source/WebCore/platform/webos/LunaServiceMgr.cpp
 create mode 100644 Source/WebCore/platform/webos/LunaServiceMgr.h
 create mode 100644 Source/WebCore/platform/webos/PalmServiceBridge.cpp
 create mode 100644 Source/WebCore/platform/webos/PalmServiceBridge.h
 create mode 100644 Source/WebCore/platform/webos/PalmServiceBridge.idl

diff --git a/Source/WebCore/DerivedSources.pri b/Source/WebCore/DerivedSources.pri
index 06670cb..a93c71c 100644
--- a/Source/WebCore/DerivedSources.pri
+++ b/Source/WebCore/DerivedSources.pri
@@ -677,6 +677,10 @@ enable?(MEDIA_SOURCE) {
     $$PWD/Modules/mediasource/SourceBufferList.idl
 }
 
+enable?(PALM_SERVICE_BRIDGE) {
+  IDL_BINDINGS += $$PWD/platform/webos/PalmServiceBridge.idl
+}
+
 qtPrepareTool(QMAKE_MOC, moc)
 
 mathmlnames.output = MathMLNames.cpp
diff --git a/Source/WebCore/Target.pri b/Source/WebCore/Target.pri
index a2f22d4..7deaacf 100644
--- a/Source/WebCore/Target.pri
+++ b/Source/WebCore/Target.pri
@@ -3536,6 +3536,16 @@ enable?(WEB_AUDIO) {
     }
 }
 
+enable?(PALM_SERVICE_BRIDGE) {
+    INCLUDEPATH += $$PWD/platform/webos
+    SOURCES += \
+        platform/webos/PalmServiceBridge.cpp \
+        platform/webos/LunaServiceMgr.cpp
+    HEADERS += \
+        platform/webos/PalmServiceBridge.h \
+        platform/webos/LunaServiceMgr.h
+}
+
 enable?(FULLSCREEN_API) {
     SOURCES += \
         rendering/RenderFullScreen.cpp
diff --git a/Source/WebCore/WebCore.pri b/Source/WebCore/WebCore.pri
index d3aa6fd..0aeee55 100644
--- a/Source/WebCore/WebCore.pri
+++ b/Source/WebCore/WebCore.pri
@@ -253,6 +253,10 @@ enable?(opencl) {
     INCLUDEPATH += $$SOURCE_DIR/platform/graphics/gpu/opencl
 }
 
+enable?(PALM_SERVICE_BRIDGE) {
+    PKGCONFIG += luna-service2
+}
+
 mac {
     LIBS += -framework Carbon -framework AppKit -framework IOKit
 }
diff --git a/Source/WebCore/platform/webos/LunaServiceMgr.cpp b/Source/WebCore/platform/webos/LunaServiceMgr.cpp
new file mode 100644
index 0000000..b7941f6
--- /dev/null
+++ b/Source/WebCore/platform/webos/LunaServiceMgr.cpp
@@ -0,0 +1,288 @@
+#include "config.h"
+#include <glib.h>
+#include "LunaServiceMgr.h"
+
+#include <unistd.h>
+#include <lunaservice.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#include <wtf/text/WTFString.h>
+#include <wtf/text/CString.h>
+
+namespace WebCore {
+
+/** 
+* @brief Internal callback for service responses.
+* 
+* @param  sh 
+* @param  reply 
+* @param  ctx 
+* 
+* @retval
+*/
+static bool 
+message_filter(LSHandle *sh, LSMessage* reply, void* ctx)
+{
+    const char* payload = LSMessageGetPayload(reply);
+
+    LunaServiceManagerListener* listener = (LunaServiceManagerListener*)ctx;
+
+    if (listener) {
+        listener->serviceResponse(payload);
+        return true;
+    }
+
+    return false;
+}
+
+LunaServiceManager* s_instance = 0;
+
+/** 
+* @brief Obtains the singleton LunaServiceManager.
+* 
+* @retval the LunaServiceManager
+*/
+LunaServiceManager* LunaServiceManager::instance()
+{
+    bool retVal;
+    if (s_instance)
+        return s_instance;
+
+    s_instance = new LunaServiceManager();
+    retVal = s_instance->init();
+    if (!retVal)
+        goto error;
+
+    return s_instance;
+
+error:
+    fprintf(stderr, "*******************************************************************\n");
+    fprintf(stderr, "*  Could got get an instance of LunaServiceManager.               *\n");
+    fprintf(stderr, "*  Try running with luna-dbus start; luna-dbus run <executable>.  *\n");
+    fprintf(stderr, "*******************************************************************\n");
+    exit(-1);
+}
+    
+/** 
+* @brief Private constructor to enforce singleton.
+*/
+LunaServiceManager::LunaServiceManager() :
+      publicBus(0)
+    , privateBus(0)
+    , palmServiceHandle(0)
+    , publicBusHighPriority(0)
+    , privateBusHighPriority(0)
+    , palmServiceHandleHighPriority(0)
+{
+}
+
+LunaServiceManager::~LunaServiceManager()
+{
+    // ED : Close the single connection to DBUS.
+    if (palmServiceHandle) {
+        bool retVal;
+        LSError lserror;
+        LSErrorInit(&lserror);
+
+        retVal = LSUnregisterPalmService(palmServiceHandle, &lserror);
+        if (!retVal) {
+            g_warning("LSUnregisterPalmService ERROR %d: %s (%s @ %s:%d)",
+                lserror.error_code, lserror.message,
+                lserror.func, lserror.file, lserror.line);
+            LSErrorFree(&lserror);
+        }
+    }
+}
+
+bool LunaServiceManager::init()
+{
+    bool init;
+    LSError lserror;
+    LSErrorInit(&lserror);
+
+    String id("com.palm.luna-");
+    id.append(String::number(getpid()));    
+    String active = (id + "-active");
+    String phone = (id + "-phone");
+    init = LSRegisterPalmService(id.utf8().data(), &palmServiceHandle, &lserror);
+    if (!init) 
+        goto error;
+    
+    init = LSGmainAttachPalmService(palmServiceHandle,
+            g_main_loop_new(g_main_context_default(), TRUE), &lserror); 
+    if (!init) 
+        goto error;
+
+    privateBus = LSPalmServiceGetPrivateConnection(palmServiceHandle);
+    publicBus = LSPalmServiceGetPublicConnection(palmServiceHandle);
+
+    if (privateBus) {
+        init = LSGmainSetPriority(privateBus, G_PRIORITY_DEFAULT, &lserror);
+        if (!init)
+            goto error;
+    }
+
+    if (publicBus) {
+        init = LSGmainSetPriority(publicBus, G_PRIORITY_DEFAULT, &lserror);
+        if (!init)
+            goto error;
+    }
+
+    init = LSRegisterPalmService(phone.utf8().data(), &palmServiceHandleHighPriority, &lserror);
+    if (!init) 
+        goto error;
+
+    init = LSGmainAttachPalmService(palmServiceHandleHighPriority,
+            g_main_loop_new(g_main_context_default(), TRUE), &lserror); 
+    if (!init) 
+        goto error;
+
+    privateBusHighPriority = LSPalmServiceGetPrivateConnection(palmServiceHandleHighPriority);
+    publicBusHighPriority = LSPalmServiceGetPublicConnection(palmServiceHandleHighPriority);
+
+    if (privateBusHighPriority) {
+        init = LSGmainSetPriority(privateBusHighPriority, G_PRIORITY_HIGH, &lserror);
+        if (!init)
+            goto error;
+    }
+
+    if (publicBusHighPriority) {
+        init = LSGmainSetPriority(publicBusHighPriority, G_PRIORITY_HIGH, &lserror);
+        if (!init)
+            goto error;
+    }
+
+
+    init = LSRegisterPalmService(active.utf8().data(), &palmServiceHandleMediumPriority, &lserror);
+    if (!init) 
+        goto error;
+
+    init = LSGmainAttachPalmService(palmServiceHandleMediumPriority,
+            g_main_loop_new(g_main_context_default(), TRUE), &lserror);
+    if (!init) 
+        goto error;
+
+    privateBusMediumPriority = LSPalmServiceGetPrivateConnection(palmServiceHandleMediumPriority);
+    publicBusMediumPriority = LSPalmServiceGetPublicConnection(palmServiceHandleMediumPriority);
+
+    if (privateBusMediumPriority) {
+        init = LSGmainSetPriority(privateBusMediumPriority, G_PRIORITY_HIGH + 50, &lserror);
+        if (!init)
+            goto error;
+    }
+
+    if (publicBusMediumPriority) {
+        init = LSGmainSetPriority(publicBusMediumPriority, G_PRIORITY_HIGH + 50, &lserror);
+        if (!init)
+            goto error;
+    }
+
+error:
+    if (!init) {
+        g_warning("Cannot initialize LunaServiceManager ERROR %d: %s (%s @ %s:%d)",
+            lserror.error_code, lserror.message,
+            lserror.func, lserror.file, lserror.line);
+        LSErrorFree(&lserror);
+    }
+
+    return init;
+}
+
+/** 
+* @brief This method will make the async call to DBUS.
+* 
+* @param  uri 
+* @param  payload 
+* @param  inListener 
+* 
+* @retval 0 if message could not be sent.
+* @retval >0 serial number for the message.
+*/
+unsigned long LunaServiceManager::call(const char* uri, const char* payload, LunaServiceManagerListener* inListener,
+                                       const char* callerId, bool usePrivateBus)
+{
+    bool retVal;
+    LSError lserror;
+    LSErrorInit(&lserror);
+    LSMessageToken token = 0;
+    LSHandle* serviceHandle = 0;
+    
+    if (callerId && (!(*callerId))) 
+        callerId = 0;
+
+    static int phoneAppIdLen = strlen("com.palm.app.phone");
+    if (callerId && !(strncmp(callerId, "com.palm.app.phone", phoneAppIdLen))) {
+
+        if (!usePrivateBus)
+            serviceHandle = publicBusHighPriority;
+        else
+            serviceHandle = privateBusHighPriority;
+
+    } else {
+/*  else if (callerId && activeAppId && strncmp(callerId, activeAppId, strlen(activeAppId)) == 0) {
+
+
+        if (!usePrivateBus)
+            serviceHandle = publicBusMediumPriority;
+        else
+            serviceHandle = privateBusMediumPriority;
+    }
+*/
+        if (!usePrivateBus) 
+            serviceHandle = publicBus;
+        else  
+            serviceHandle = privateBus;
+    }
+    
+    if (!inListener)
+        retVal = LSCallFromApplication(serviceHandle, uri, payload, callerId, 0, 0, &token, &lserror);
+    else {
+        retVal = LSCallFromApplication(serviceHandle, uri, payload, callerId, message_filter, inListener, &token, &lserror);
+        if (retVal) {
+            inListener->listenerToken = token;
+            inListener->sh = serviceHandle;
+        }
+    }
+
+    if (!retVal) {
+        g_warning("LSCallFromApplication ERROR %d: %s (%s @ %s:%d)",
+            lserror.error_code, lserror.message,
+            lserror.func, lserror.file, lserror.line);
+        LSErrorFree(&lserror);
+        token = 0;
+        goto error;
+    }
+
+error:
+    return token;
+}
+    
+/** 
+ * @brief Terminates a call causing any subscription for responses to end.
+ *        This is also called by garbage collector's collect()
+ *        when no more references to inListener exist.
+ *
+ * @param  inListener 
+ */
+void LunaServiceManager::cancel(LunaServiceManagerListener* inListener)
+{
+    bool retVal;
+    LSError lserror;
+
+    if (!inListener || !inListener->listenerToken)
+        return;
+    
+    LSErrorInit(&lserror);
+    
+    if (!LSCallCancel(inListener->sh, inListener->listenerToken, &lserror)) {
+        g_warning("LSCallCancel ERROR %d: %s (%s @ %s:%d)",
+            lserror.error_code, lserror.message,
+            lserror.func, lserror.file, lserror.line);
+        LSErrorFree(&lserror);
+    }
+
+    // set the token to zero to indicate we have been canceled
+    inListener->listenerToken = 0;
+}
+};
diff --git a/Source/WebCore/platform/webos/LunaServiceMgr.h b/Source/WebCore/platform/webos/LunaServiceMgr.h
new file mode 100644
index 0000000..f7188a9
--- /dev/null
+++ b/Source/WebCore/platform/webos/LunaServiceMgr.h
@@ -0,0 +1,53 @@
+
+#ifndef LunaServiceMgr_h
+#define LunaServiceMgr_h
+
+#include <lunaservice.h>
+
+namespace WebCore {
+
+struct LunaServiceManagerListener {
+        LunaServiceManagerListener() : listenerToken(LSMESSAGE_TOKEN_INVALID), sh(0) { }
+        virtual ~LunaServiceManagerListener() { }
+        virtual void serviceResponse(const char* body) = 0;
+        LSMessageToken listenerToken;
+        LSHandle* sh;
+};
+
+
+//
+//  LunaServiceManager
+//
+// This class is a singleton which handles all the client requests
+// for a WebKit instance.
+
+class LunaServiceManager {
+    public:
+        ~LunaServiceManager();
+        
+        static LunaServiceManager* instance();
+        unsigned long call(const char* uri, const char* payload, LunaServiceManagerListener*, const char* callerId, bool usePrivateBus = false);
+        void cancel(LunaServiceManagerListener*);
+
+    private:
+        bool init();
+        LunaServiceManager();
+
+        LSHandle* publicBus;
+        LSHandle* privateBus;
+        LSPalmService* palmServiceHandle;
+
+        // The Medium Priority bus is used for the active app
+        LSHandle* publicBusMediumPriority;
+        LSHandle* privateBusMediumPriority;
+        LSPalmService* palmServiceHandleMediumPriority;
+
+        // The High Priority bus is used only for the Phone app
+        LSHandle* publicBusHighPriority;
+        LSHandle* privateBusHighPriority;
+        LSPalmService* palmServiceHandleHighPriority;
+};
+
+}
+
+#endif
diff --git a/Source/WebCore/platform/webos/PalmServiceBridge.cpp b/Source/WebCore/platform/webos/PalmServiceBridge.cpp
new file mode 100644
index 0000000..47b0f16
--- /dev/null
+++ b/Source/WebCore/platform/webos/PalmServiceBridge.cpp
@@ -0,0 +1,295 @@
+#include "config.h"
+#include "PalmServiceBridge.h"
+
+#include "Document.h"
+#include "Event.h"
+#include "EventException.h"
+#include "EventListener.h"
+#include "EventNames.h"
+#include "ExceptionCode.h"
+#include "Frame.h"
+#include "Logging.h"
+#include "Page.h"
+#include <wtf/text/WTFString.h>
+#include "ScriptController.h"
+#include <wtf/RefCountedLeakCounter.h>
+
+#include "JSDOMWindow.h"
+#include "JSEventListener.h"
+#include "JSFunction.h"
+#include "ScriptSourceCode.h"
+#include "ScriptValue.h"
+#include "runtime_root.h"
+#include <runtime/JSLock.h>
+using namespace JSC;
+
+#include <map>
+#include <set>
+
+namespace WebCore {
+
+typedef std::set<PalmServiceBridge*> ServicesSet;
+typedef std::map<Document*, ServicesSet*> ServicesSetMap;
+
+#ifndef NDEBUG
+static WTF::RefCountedLeakCounter serviceBridgeCounter("PalmServiceBridge");
+#endif
+
+static ServicesSetMap* servicesByDocument()
+{
+    static ServicesSetMap map;
+    return &map;
+}
+
+int PalmServiceBridge::numHandlesForUrl(const char* appId)
+{
+    for (ServicesSetMap::iterator setIt = servicesByDocument()->begin(); setIt != servicesByDocument()->end(); ++setIt) {
+        if (!strcmp(appId, setIt->first->url().string().utf8().data()))
+            return setIt->second->size();
+    }
+
+    return 0;
+}
+
+void PalmServiceBridge::handlesForUrl(const char* appId, std::list<PalmServiceBridge*>& outHandles)
+{
+    outHandles.clear();
+    for (ServicesSetMap::iterator setIt = servicesByDocument()->begin(); setIt != servicesByDocument()->end(); ++setIt) {
+        if (!strcmp(appId, setIt->first->url().string().utf8().data())) {
+            ServicesSet* set = setIt->second;
+
+            for (ServicesSet::iterator s = set->begin(); s != set->end(); ++s)
+                outHandles.push_back(*s);
+
+            return;
+        }
+    }
+}
+
+static void addToServicesByDocument(Document* doc, PalmServiceBridge* svc)
+{
+    if (!doc || !svc)
+        return;
+
+    ServicesSet* set = 0;
+    ServicesSetMap::iterator it = servicesByDocument()->find(doc);
+    if (it == servicesByDocument()->end()) {
+        set = new ServicesSet();
+        (*servicesByDocument())[doc] = set;
+    } else
+        set = it->second;
+
+    set->insert(svc);
+}
+
+static void removeFromServicesByDocument(Document* doc, PalmServiceBridge* svc)
+{
+    if (!doc || !svc)
+        return;
+
+    ServicesSetMap::iterator it = servicesByDocument()->find(doc);
+    if (it == servicesByDocument()->end())
+        return;
+
+    ServicesSet* set = it->second;
+    if (!set)
+        return;
+
+    set->erase(svc);
+    if (!set->size()) {
+        // remove from the hash map
+        delete set;
+        servicesByDocument()->erase(it);
+    }
+}
+
+PalmServiceBridge::PalmServiceBridge(ScriptExecutionContext* context, bool subscribe)
+    : ActiveDOMObject(context),
+      m_canceled(false),
+      m_subscribed(subscribe),
+      m_inServiceCallback(false),
+      m_identifier(0),
+      m_isPrivileged(false)
+{
+    addToServicesByDocument(document(), this);
+
+#ifndef NDEBUG
+    serviceBridgeCounter.increment();
+#endif
+
+    JSValue identifier;
+    ExecState* exec = 0;
+    Frame *frame = document()->frame();
+    if (frame) {
+        identifier = frame->script()->executeScript(ScriptSourceCode("PalmSystem && PalmSystem.getIdentifier()")).jsValue();
+        JSGlobalObject* globalObject = frame->script()->bindingRootObject()->globalObject();
+        exec = globalObject->globalExec();
+
+        m_identifier = strdup(identifier.toString(exec)->value(exec).utf8().data());
+
+        /* check for privileged bus names */
+        if (strncmp(m_identifier, "com.palm", 8) == 0 ||
+            strncmp(m_identifier, "com.webos", 9) == 0 ||
+            strncmp(m_identifier, "org.webosports", 14) == 0)
+            m_isPrivileged = true;
+    }
+}
+
+bool PalmServiceBridge::init(Document* d, bool subscribe)
+{
+    m_subscribed = subscribe;
+    return true;
+}
+
+PalmServiceBridge::~PalmServiceBridge()
+{
+    ExceptionCode ec;
+    cancel(ec);
+
+    if (scriptExecutionContext() && document())
+        removeFromServicesByDocument(document(), this);
+
+    if (m_identifier)
+        free(m_identifier);
+
+#ifndef NDEBUG
+    serviceBridgeCounter.decrement();
+#endif
+}
+
+void PalmServiceBridge::detachServices(Document* doc)
+{
+    ServicesSetMap::iterator it = servicesByDocument()->find(doc);
+    if (it == servicesByDocument()->end())
+        return;
+
+    ServicesSet* services = it->second;
+    servicesByDocument()->erase(it);
+
+    if (services) {
+        while (services->size()) {
+            ServicesSet::iterator sit = services->begin();
+            ExceptionCode ec;
+            (*sit)->cancel(ec);
+            services->erase(sit);
+        }
+        delete services;
+    }
+
+}
+
+void PalmServiceBridge::cancelServices(Document* doc)
+{
+    ServicesSetMap::iterator it = servicesByDocument()->find(doc);
+    if (it == servicesByDocument()->end())
+        return;
+
+    ServicesSet* services = it->second;
+
+    if (services) {
+        for (ServicesSet::iterator sit = services->begin(); sit != services->end(); ++sit) {
+            PalmServiceBridge* br = *sit;
+            ExceptionCode ec;
+            br->cancel(ec);
+        }
+    }
+}
+
+String PalmServiceBridge::version()
+{
+    return String("1.1");
+}
+
+int PalmServiceBridge::token()
+{
+    return (int)listenerToken;
+}
+
+int PalmServiceBridge::call(const String& uri, const String& payload, ExceptionCode& ec)
+{
+    LunaServiceManager::instance()->call(uri.utf8().data(), payload.utf8().data(), this, m_identifier, m_isPrivileged);
+    if (LSMESSAGE_TOKEN_INVALID == listenerToken) {
+        ExceptionCode ec;
+        cancel(ec);
+    }
+
+    return (int)listenerToken;
+}
+
+void PalmServiceBridge::serviceResponse(const char* body)
+{
+    if (m_canceled || !document())
+        return;
+
+    if (!body)
+        body = "";
+
+    Frame* frame = document()->frame();
+
+    JSGlobalObject* globalObject = frame->script()->bindingRootObject()->globalObject();
+    ExecState* exec = globalObject->globalExec();
+
+    JSLockHolder lock(exec);
+
+    const JSEventListener* listener = JSEventListener::cast(m_callbackFunction.get());
+    JSObject* function = 0;
+    if (listener)
+        function = listener->jsFunction(scriptExecutionContext());
+    if (!function)
+        return;
+
+    CallData callData;
+    CallType callType = JSFunction::getCallData(function, callData);
+
+    if (callType == CallTypeNone)
+        return;
+
+    MarkedArgumentBuffer args;
+    args.append(jsString(exec, String::fromUTF8(body)));
+
+    JSC::call(exec, function, callType, callData, function, args);
+
+    if (exec->hadException())
+        reportCurrentException(exec);
+
+    document()->updateStyleIfNeeded();
+}
+
+void PalmServiceBridge::cancel(ExceptionCode& ec)
+{
+    if (m_canceled)
+        return;
+
+    m_canceled = true;
+    if (listenerToken)
+        LunaServiceManager::instance()->cancel(this);
+}
+
+void PalmServiceBridge::stop()
+{
+    ExceptionCode ec;
+    cancel(ec);
+}
+
+bool PalmServiceBridge::canSuspend() const
+{
+    return false;
+}
+
+void PalmServiceBridge::contextDestroyed()
+{
+    ActiveDOMObject::contextDestroyed();
+}
+
+ScriptExecutionContext* PalmServiceBridge::scriptExecutionContext() const
+{
+    return ActiveDOMObject::scriptExecutionContext();
+}
+
+Document* PalmServiceBridge::document() const
+{
+    ASSERT(scriptExecutionContext()->isDocument());
+    return static_cast<Document*>(scriptExecutionContext());
+}
+
+} // namespace WebCore
diff --git a/Source/WebCore/platform/webos/PalmServiceBridge.h b/Source/WebCore/platform/webos/PalmServiceBridge.h
new file mode 100644
index 0000000..6571738
--- /dev/null
+++ b/Source/WebCore/platform/webos/PalmServiceBridge.h
@@ -0,0 +1,79 @@
+#ifndef PalmServiceBridge_h
+#define PalmServiceBridge_h
+
+#include "ActiveDOMObject.h"
+#include "Event.h"
+#include "EventListener.h"
+#include "EventTarget.h"
+#include "LunaServiceMgr.h"
+#include <wtf/OwnPtr.h>
+
+#include <heap/Strong.h>
+#include <heap/StrongInlines.h>
+
+#include <glib.h>
+#include <list>
+
+
+namespace WebCore {
+
+class Document;
+
+
+class PalmServiceBridge : public RefCounted<PalmServiceBridge>,
+                          public LunaServiceManagerListener,
+                          public ActiveDOMObject {
+    public:
+        static PassRefPtr<PalmServiceBridge> create(ScriptExecutionContext* context, bool subscribe = false)
+        {
+            return adoptRef(new PalmServiceBridge(context, subscribe));
+        }
+
+        bool init(Document*, bool subscribed = false);
+        ~PalmServiceBridge();
+
+        static int numHandlesForUrl(const char* appId);
+        static void handlesForUrl(const char* appId, std::list<PalmServiceBridge*>& outHandles);
+
+        virtual PalmServiceBridge* toPalmServiceBridge() { return this; }
+
+        static void detachServices(Document*);
+        static void cancelServices(Document*);
+
+        String version();
+
+        int token();
+
+        int call(const String& uri, const String& payload, ExceptionCode&);
+        void cancel(ExceptionCode&);
+
+        // callback from LunaServiceManagerListener
+        virtual void serviceResponse(const char* body);
+
+        Document* document() const;
+
+        void setOnservicecallback(PassRefPtr<EventListener> eventListener) { m_callbackFunction = eventListener; }
+        EventListener* onservicecallback() const { return m_callbackFunction.get(); }
+
+        virtual ScriptExecutionContext* scriptExecutionContext() const;
+
+        // ActiveDOMObject:
+        virtual void contextDestroyed();
+        virtual bool canSuspend() const;
+        virtual void stop();
+
+    private:
+        RefPtr<EventListener> m_callbackFunction;
+        bool m_canceled;
+        bool m_subscribed;
+        bool m_inServiceCallback;
+        const char *m_identifier;
+        bool m_isPrivileged;
+
+        PalmServiceBridge(ScriptExecutionContext*, bool);
+        PalmServiceBridge();
+};
+
+}
+
+#endif
diff --git a/Source/WebCore/platform/webos/PalmServiceBridge.idl b/Source/WebCore/platform/webos/PalmServiceBridge.idl
new file mode 100644
index 0000000..5c2cac9
--- /dev/null
+++ b/Source/WebCore/platform/webos/PalmServiceBridge.idl
@@ -0,0 +1,15 @@
+[
+    GlobalContext=DOMWindow&WorkerGlobalScope,
+    Conditional=PALM_SERVICE_BRIDGE,
+    ActiveDOMObject,
+    Constructor,
+    ConstructorCallWith=ScriptExecutionContext,
+    JSNoStaticTables
+] interface PalmServiceBridge {
+
+    [RaisesException] unsigned long call(in DOMString method, in DOMString url);
+    [RaisesException] void cancel();
+
+    attribute EventListener onservicecallback;
+    readonly attribute unsigned long token;
+};
diff --git a/Tools/qmake/mkspecs/features/features.pri b/Tools/qmake/mkspecs/features/features.pri
index 1819a5c..7ff1faa 100644
--- a/Tools/qmake/mkspecs/features/features.pri
+++ b/Tools/qmake/mkspecs/features/features.pri
@@ -126,3 +126,4 @@ FEATURE_DEFAULTS = \
     ENABLE_WORKERS=1 \
     ENABLE_XHR_TIMEOUT=1 \
     ENABLE_XSLT=0 \
+    ENABLE_PALM_SERVICE_BRIDGE=1 \
-- 
1.8.1.2


From 60c219c42ba2e0a5becb9b27ff4a1cfacba8551a Mon Sep 17 00:00:00 2001
From: Simon Busch <morphis@gravedo.de>
Date: Mon, 14 Oct 2013 08:39:16 +0200
Subject: [PATCH] Implement handling of window management related callbacks
 from WebProcess

Upstream-Status: pending [https://qt.gitorious.org/qt/qtwebkit/]

Signed-off-by: Simon Busch <morphis@gravedo.de>
---
 Source/WebKit2/Target.pri                          |   2 +
 Source/WebKit2/UIProcess/API/qt/qquickwebview_p.h  |   5 +
 .../UIProcess/API/qt/qwebnewpagerequest.cpp        |  89 ++++++++++++++++
 .../UIProcess/API/qt/qwebnewpagerequest_p.h        |  60 +++++++++++
 Source/WebKit2/UIProcess/qt/QtWebPageUIClient.cpp  | 113 +++++++++++++++++++++
 Source/WebKit2/UIProcess/qt/QtWebPageUIClient.h    |   8 ++
 6 files changed, 277 insertions(+)
 create mode 100644 Source/WebKit2/UIProcess/API/qt/qwebnewpagerequest.cpp
 create mode 100644 Source/WebKit2/UIProcess/API/qt/qwebnewpagerequest_p.h

diff --git a/Source/WebKit2/Target.pri b/Source/WebKit2/Target.pri
index 597e010..ac1b340 100644
--- a/Source/WebKit2/Target.pri
+++ b/Source/WebKit2/Target.pri
@@ -791,6 +791,7 @@ have?(QTQUICK) {
         UIProcess/API/qt/qtwebsecurityorigin_p.h \
         UIProcess/API/qt/qwebloadrequest_p.h \
         UIProcess/API/qt/qwebnavigationrequest_p.h \
+        UIProcess/API/qt/qwebnewpagerequest_p.h \
         UIProcess/API/qt/qquickwebpage_p.h \
         UIProcess/API/qt/qquickwebpage_p_p.h \
         UIProcess/API/qt/qquickwebview_p.h \
@@ -824,6 +825,7 @@ have?(QTQUICK) {
         UIProcess/API/qt/qtwebsecurityorigin.cpp \
         UIProcess/API/qt/qwebloadrequest.cpp \
         UIProcess/API/qt/qwebnavigationrequest.cpp \
+        UIProcess/API/qt/qwebnewpagerequest.cpp \
         UIProcess/API/qt/qquickwebpage.cpp \
         UIProcess/API/qt/qquickwebview.cpp \
         UIProcess/API/qt/qwebiconimageprovider.cpp \
diff --git a/Source/WebKit2/UIProcess/API/qt/qquickwebview_p.h b/Source/WebKit2/UIProcess/API/qt/qquickwebview_p.h
index 6d1f669..8cfad34 100644
--- a/Source/WebKit2/UIProcess/API/qt/qquickwebview_p.h
+++ b/Source/WebKit2/UIProcess/API/qt/qquickwebview_p.h
@@ -32,6 +32,7 @@ QT_BEGIN_NAMESPACE
 class QQmlComponent;
 QT_END_NAMESPACE
 class QWebNavigationRequest;
+class QWebNewPageRequest;
 class QQuickWebPage;
 class QQuickWebViewAttached;
 class QWebLoadRequest;
@@ -402,6 +403,10 @@ Q_SIGNALS:
     void processDidBecomeUnresponsive();
     void processDidBecomeResponsive();
 
+    void createNewPage(QWebNewPageRequest *request);
+    void showPage();
+    void closePage();
+
 private:
     QQuickWebViewExperimental(QQuickWebView* webView, QQuickWebViewPrivate* webViewPrivate);
     QQuickWebView* q_ptr;
diff --git a/Source/WebKit2/UIProcess/API/qt/qwebnewpagerequest.cpp b/Source/WebKit2/UIProcess/API/qt/qwebnewpagerequest.cpp
new file mode 100644
index 0000000..b25eadb
--- /dev/null
+++ b/Source/WebKit2/UIProcess/API/qt/qwebnewpagerequest.cpp
@@ -0,0 +1,89 @@
+/*
+    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+    Boston, MA 02110-1301, USA.
+*/
+
+#include "config.h"
+#include "qwebnewpagerequest_p.h"
+#include "qquickwebview_p.h"
+
+class QWebNewPageRequestPrivate {
+public:
+    QWebNewPageRequestPrivate(const QUrl& url, const QVariantMap& windowFeatures, Qt::KeyboardModifiers keyboardModifiers, Qt::MouseButton mouseButton)
+        : url(url)
+        , mouseButton(mouseButton)
+        , keyboardModifiers(keyboardModifiers)
+        , windowFeatures(windowFeatures)
+        , webView(0)
+    {
+    }
+
+    ~QWebNewPageRequestPrivate()
+    {
+    }
+
+    QUrl url;
+    Qt::MouseButton mouseButton;
+    Qt::KeyboardModifiers keyboardModifiers;
+    QVariantMap windowFeatures;
+    QQuickWebView *webView;
+};
+
+QWebNewPageRequest::QWebNewPageRequest(const QUrl& url, const QVariantMap& windowFeatures, Qt::KeyboardModifiers keyboardModifiers, Qt::MouseButton mouseButton, QObject* parent)
+    : QObject(parent)
+    , d(new QWebNewPageRequestPrivate(url, windowFeatures, keyboardModifiers, mouseButton))
+{
+}
+
+QWebNewPageRequest::~QWebNewPageRequest()
+{
+    delete d;
+}
+
+void QWebNewPageRequest::setWebView(QQuickWebView *webView)
+{
+    if (d->webView == webView)
+        return;
+
+    d->webView = webView;
+    emit webViewChanged();
+}
+
+QUrl QWebNewPageRequest::url() const
+{
+    return d->url;
+}
+
+QVariantMap QWebNewPageRequest::windowFeatures() const
+{
+    return d->windowFeatures;
+}
+
+int QWebNewPageRequest::mouseButton() const
+{
+    return int(d->mouseButton);
+}
+
+int QWebNewPageRequest::keyboardModifiers() const
+{
+    return int(d->keyboardModifiers);
+}
+
+QQuickWebView* QWebNewPageRequest::webView() const
+{
+    return d->webView;
+}
diff --git a/Source/WebKit2/UIProcess/API/qt/qwebnewpagerequest_p.h b/Source/WebKit2/UIProcess/API/qt/qwebnewpagerequest_p.h
new file mode 100644
index 0000000..3b9fa21
--- /dev/null
+++ b/Source/WebKit2/UIProcess/API/qt/qwebnewpagerequest_p.h
@@ -0,0 +1,60 @@
+/*
+    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+    Boston, MA 02110-1301, USA.
+*/
+
+#ifndef qwebnewpagerequest_p_h
+#define qwebnewpagerequest_p_h
+
+#include "qquickwebview_p.h"
+#include "qwebkitglobal.h"
+
+#include <QtCore/QObject>
+#include <QtCore/QUrl>
+
+class QWebNewPageRequestPrivate;
+
+class QWEBKIT_EXPORT QWebNewPageRequest : public QObject {
+    Q_OBJECT
+    Q_PROPERTY(QUrl url READ url CONSTANT FINAL)
+    Q_PROPERTY(QVariantMap windowFeatures READ windowFeatures CONSTANT FINAL)
+    Q_PROPERTY(int mouseButton READ mouseButton CONSTANT FINAL)
+    Q_PROPERTY(int keyboardModifiers READ keyboardModifiers CONSTANT FINAL)
+    Q_PROPERTY(QQuickWebView *webView READ webView WRITE setWebView NOTIFY webViewChanged);
+
+public:
+    QWebNewPageRequest(const QUrl& url, const QVariantMap& windowFeature,
+                       Qt::KeyboardModifiers modifiers, Qt::MouseButton mouseButton,
+                       QObject* parent = 0);
+    ~QWebNewPageRequest();
+
+    QUrl url() const;
+    int mouseButton() const;
+    int keyboardModifiers() const;
+    QVariantMap windowFeatures() const;
+
+    void setWebView(QQuickWebView *webView);
+    QQuickWebView *webView() const;
+
+Q_SIGNALS:
+    void webViewChanged();
+
+private:
+    QWebNewPageRequestPrivate* d;
+};
+
+#endif // qwebnewpagerequest_h
diff --git a/Source/WebKit2/UIProcess/qt/QtWebPageUIClient.cpp b/Source/WebKit2/UIProcess/qt/QtWebPageUIClient.cpp
index af88423..a4de460 100644
--- a/Source/WebKit2/UIProcess/qt/QtWebPageUIClient.cpp
+++ b/Source/WebKit2/UIProcess/qt/QtWebPageUIClient.cpp
@@ -26,11 +26,16 @@
 #include "qquickwebview_p.h"
 #include "qquickwebview_p_p.h"
 #include "qwebpermissionrequest_p.h"
+#include "qwebnewpagerequest_p.h"
 #include <WKArray.h>
 #include <WKHitTestResult.h>
 #include <WKOpenPanelParameters.h>
 #include <WKOpenPanelResultListener.h>
 #include <WKRetainPtr.h>
+#include <WKURLRequest.h>
+#include "WKDictionary.h"
+#include "WKNumber.h"
+#include "WKString.h"
 
 namespace WebKit {
 
@@ -49,6 +54,9 @@ QtWebPageUIClient::QtWebPageUIClient(WKPageRef pageRef, QQuickWebView* webView)
     uiClient.exceededDatabaseQuota = exceededDatabaseQuota;
     uiClient.decidePolicyForGeolocationPermissionRequest = policyForGeolocationPermissionRequest;
     uiClient.decidePolicyForNotificationPermissionRequest = policyForNotificationPermissionRequest;
+    uiClient.createNewPage = createNewPage;
+    uiClient.showPage = showPage;
+    uiClient.close = closePage;
     WKPageSetPageUIClient(pageRef, &uiClient);
 }
 
@@ -92,6 +100,30 @@ void QtWebPageUIClient::permissionRequest(QWebPermissionRequest* request)
     emit m_webView->experimental()->permissionRequested(request);
 }
 
+WKPageRef QtWebPageUIClient::createNewPage(const QUrl& url, const QVariantMap& windowFeatures,
+                            Qt::KeyboardModifiers modifiers, Qt::MouseButton mouseButtons)
+{
+    QWebNewPageRequest request(url, windowFeatures, modifiers, mouseButtons);
+
+    emit m_webView->experimental()->createNewPage(&request);
+
+    QQuickWebView *newWebView = request.webView();
+    if (newWebView != 0)
+        return static_cast<WKPageRef>(WKRetain(newWebView->pageRef()));
+
+    return 0;
+}
+
+void QtWebPageUIClient::showPage()
+{
+    emit m_webView->experimental()->showPage();
+}
+
+void QtWebPageUIClient::closePage()
+{
+    emit m_webView->experimental()->closePage();
+}
+
 static QtWebPageUIClient* toQtWebPageUIClient(const void* clientInfo)
 {
     ASSERT(clientInfo);
@@ -173,5 +205,86 @@ void QtWebPageUIClient::policyForNotificationPermissionRequest(WKPageRef page, W
     toQtWebPageUIClient(clientInfo)->permissionRequest(req);
 }
 
+static Qt::MouseButton toQtMouseButton(WKEventMouseButton button)
+{
+    switch (button) {
+    case kWKEventMouseButtonLeftButton:
+        return Qt::LeftButton;
+    case kWKEventMouseButtonMiddleButton:
+        return Qt::MiddleButton;
+    case kWKEventMouseButtonRightButton:
+        return Qt::RightButton;
+    case kWKEventMouseButtonNoButton:
+        return Qt::NoButton;
+    }
+    ASSERT_NOT_REACHED();
+    return Qt::NoButton;
+}
+
+static Qt::KeyboardModifiers toQtKeyboardModifiers(WKEventModifiers modifiers)
+{
+    Qt::KeyboardModifiers qtModifiers = Qt::NoModifier;
+    if (modifiers & kWKEventModifiersShiftKey)
+        qtModifiers |= Qt::ShiftModifier;
+    if (modifiers & kWKEventModifiersControlKey)
+        qtModifiers |= Qt::ControlModifier;
+    if (modifiers & kWKEventModifiersAltKey)
+        qtModifiers |= Qt::AltModifier;
+    if (modifiers & kWKEventModifiersMetaKey)
+        qtModifiers |= Qt::MetaModifier;
+    return qtModifiers;
+}
+
+static inline WKTypeRef getWindowFeatureValue(WKDictionaryRef windowFeatures, const char* featureName)
+{
+    ASSERT(featureName);
+    if (!windowFeatures)
+        return 0;
+
+    WKRetainPtr<WKStringRef> key(AdoptWK, WKStringCreateWithUTF8CString(featureName));
+    return WKDictionaryGetItemForKey(windowFeatures, key.get());
+}
+
+static bool getWindowFeatureBoolValue(WKDictionaryRef windowFeatures, const char* featureName, bool defaultValue)
+{
+    WKBooleanRef value = static_cast<WKBooleanRef>(getWindowFeatureValue(windowFeatures, featureName));
+
+    return value ? WKBooleanGetValue(value) : defaultValue;
+}
+
+static double getWindowFeatureDoubleValue(WKDictionaryRef windowFeatures, const char* featureName, double defaultValue)
+{
+    WKDoubleRef value = static_cast<WKDoubleRef>(getWindowFeatureValue(windowFeatures, featureName));
+
+    return value ?  WKDoubleGetValue(value) : defaultValue;
+}
+
+WKPageRef QtWebPageUIClient::createNewPage(WKPageRef page, WKURLRequestRef request, WKDictionaryRef wkWindowFeatures, WKEventModifiers modifiers, WKEventMouseButton mouseButton, const void *clientInfo)
+{
+    WKRetainPtr<WKURLRef> requestURL(AdoptWK, WKURLRequestCopyURL(request));
+    QUrl qUrl = WKURLCopyQUrl(requestURL.get());
+
+    QVariantMap windowFeatures;
+
+    windowFeatures.insert("x", getWindowFeatureDoubleValue(wkWindowFeatures, "x", 0));
+    windowFeatures.insert("y", getWindowFeatureDoubleValue(wkWindowFeatures, "y", 0));
+    windowFeatures.insert("width", getWindowFeatureDoubleValue(wkWindowFeatures, "width", 0));
+    windowFeatures.insert("height", getWindowFeatureDoubleValue(wkWindowFeatures, "height", 0));
+    windowFeatures.insert("fullscreen", getWindowFeatureBoolValue(wkWindowFeatures, "fullscreen", false));
+
+    return toQtWebPageUIClient(clientInfo)->createNewPage(qUrl, windowFeatures,
+        toQtKeyboardModifiers(modifiers), toQtMouseButton(mouseButton));
+}
+
+void QtWebPageUIClient::showPage(WKPageRef page, const void *clientInfo)
+{
+    toQtWebPageUIClient(clientInfo)->showPage();
+}
+
+void QtWebPageUIClient::closePage(WKPageRef page, const void *clientInfo)
+{
+    toQtWebPageUIClient(clientInfo)->closePage();
+}
+
 } // namespace WebKit
 
diff --git a/Source/WebKit2/UIProcess/qt/QtWebPageUIClient.h b/Source/WebKit2/UIProcess/qt/QtWebPageUIClient.h
index e8aaa82..92b13da 100644
--- a/Source/WebKit2/UIProcess/qt/QtWebPageUIClient.h
+++ b/Source/WebKit2/UIProcess/qt/QtWebPageUIClient.h
@@ -23,6 +23,7 @@
 
 #include <QtCore/QString>
 #include <QtCore/QUrl>
+#include <QtCore/QVariantMap>
 #include <WKFrame.h>
 #include <WKGeolocationPermissionRequest.h>
 #include <WKPage.h>
@@ -50,6 +51,10 @@ private:
     void runOpenPanel(WKOpenPanelResultListenerRef, const QStringList& selectedFileNames, FileChooserType);
     void mouseDidMoveOverElement(const QUrl& linkURL, const QString& linkTitle);
     void permissionRequest(QWebPermissionRequest*);
+    WKPageRef createNewPage(const QUrl& url, const QVariantMap& windowFeatures,
+                            Qt::KeyboardModifiers modifiers, Qt::MouseButton mouseButtons);
+    void showPage();
+    void closePage();
 
     // WKPageUIClient callbacks.
     static void runJavaScriptAlert(WKPageRef, WKStringRef alertText, WKFrameRef, const void* clientInfo);
@@ -60,6 +65,9 @@ private:
     static unsigned long long exceededDatabaseQuota(WKPageRef, WKFrameRef, WKSecurityOriginRef, WKStringRef databaseName, WKStringRef displayName, unsigned long long currentQuota, unsigned long long currentOriginUsage, unsigned long long currentDatabaseUsage, unsigned long long expectedUsage, const void *clientInfo);
     static void policyForGeolocationPermissionRequest(WKPageRef, WKFrameRef, WKSecurityOriginRef, WKGeolocationPermissionRequestRef, const void*);
     static void policyForNotificationPermissionRequest(WKPageRef, WKSecurityOriginRef, WKNotificationPermissionRequestRef, const void*);
+    static WKPageRef createNewPage(WKPageRef page, WKURLRequestRef request, WKDictionaryRef wkWindowFeatures, WKEventModifiers modifiers, WKEventMouseButton mouseButton, const void *clientInfo);
+    static void showPage(WKPageRef page, const void *clientInfo);
+    static void closePage(WKPageRef page, const void *clientInfo);
 
     QQuickWebView* m_webView;
     QUrl m_lastHoveredURL;
-- 
1.8.1.2

